{"version":3,"sources":["../src/index.ts","../src/core/index.ts","../src/core/config-manager.ts","../src/core/logging.ts","../src/util/strings.ts","../src/auth/globals.ts","../src/auth/hooks.ts","../src/auth/user-service.ts","../src/core/core.ts","../src/core/event-service.ts","../src/core/globals.ts","../src/core/hooks.ts","../src/Hawtio.tsx","../src/img/index.ts","../src/ui/login/HawtioLogin.tsx","../src/ui/notification/HawtioNotification.tsx","../src/ui/page/HawtioLoadingPage.tsx","../src/util/dates.ts","../src/ui/login/HawtioLoginForm.tsx","../../../node_modules/tslib/tslib.es6.mjs","../../../node_modules/@patternfly/react-icons/src/createIcon.tsx","../../../node_modules/@patternfly/react-icons/dist/esm/icons/asleep-icon.js","../../../node_modules/@patternfly/react-icons/dist/esm/icons/ban-icon.js","../../../node_modules/@patternfly/react-icons/dist/esm/icons/bars-icon.js","../../../node_modules/@patternfly/react-icons/dist/esm/icons/check-circle-icon.js","../../../node_modules/@patternfly/react-icons/dist/esm/icons/cube-icon.js","../../../node_modules/@patternfly/react-icons/dist/esm/icons/cubes-icon.js","../../../node_modules/@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon.js","../../../node_modules/@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon.js","../../../node_modules/@patternfly/react-icons/dist/esm/icons/folder-icon.js","../../../node_modules/@patternfly/react-icons/dist/esm/icons/folder-open-icon.js","../../../node_modules/@patternfly/react-icons/dist/esm/icons/help-icon.js","../../../node_modules/@patternfly/react-icons/dist/esm/icons/info-circle-icon.js","../../../node_modules/@patternfly/react-icons/dist/esm/icons/lock-icon.js","../../../node_modules/@patternfly/react-icons/dist/esm/icons/long-arrow-alt-down-icon.js","../../../node_modules/@patternfly/react-icons/dist/esm/icons/minus-icon.js","../../../node_modules/@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon.js","../../../node_modules/@patternfly/react-icons/dist/esm/icons/pause-circle-icon.js","../../../node_modules/@patternfly/react-icons/dist/esm/icons/play-icon.js","../../../node_modules/@patternfly/react-icons/dist/esm/icons/plugged-icon.js","../../../node_modules/@patternfly/react-icons/dist/esm/icons/plus-circle-icon.js","../../../node_modules/@patternfly/react-icons/dist/esm/icons/plus-icon.js","../../../node_modules/@patternfly/react-icons/dist/esm/icons/question-circle-icon.js","../../../node_modules/@patternfly/react-icons/dist/esm/icons/redo-icon.js","../../../node_modules/@patternfly/react-icons/dist/esm/icons/remove2-icon.js","../../../node_modules/@patternfly/react-icons/dist/esm/icons/search-icon.js","../../../node_modules/@patternfly/react-icons/dist/esm/icons/times-circle-icon.js","../../../node_modules/@patternfly/react-icons/dist/esm/icons/trash-icon.js","../../../node_modules/@patternfly/react-icons/dist/esm/icons/trend-up-icon.js","../../../node_modules/@patternfly/react-icons/dist/esm/icons/unplugged-icon.js","../src/ui/login/globals.ts","../src/ui/login/login-service.ts","../src/help/HawtioHelp.tsx","../src/help/help.md","../src/help/registry.ts","../src/plugins/auth/keycloak/help.md","../src/util/globals.ts","../src/util/fetch.ts","../src/util/https.ts","../src/plugins/auth/keycloak/keycloak-service.ts","../src/plugins/auth/keycloak/globals.ts","../src/plugins/auth/keycloak/index.ts","../src/plugins/auth/oidc/help.md","../src/plugins/auth/oidc/oidc-service.ts","../src/plugins/auth/oidc/index.ts","../src/plugins/shared/HawtioEmptyCard.tsx","../src/plugins/shared/HawtioLoadingCard.tsx","../src/plugins/shared/JmxContentMBeans.tsx","../src/plugins/context.ts","../src/plugins/shared/PluginTreeViewToolbar.tsx","../src/util/objects.ts","../src/plugins/shared/attributes/Attributes.tsx","../src/plugins/shared/globals.ts","../src/plugins/shared/attributes/AttributeModal.tsx","../src/util/jolokia.ts","../src/plugins/shared/jolokia-service.ts","../src/util/crypto.ts","../src/util/urls.ts","../src/plugins/shared/connect-service.ts","../src/util/htmls.ts","../src/plugins/shared/tree/node.ts","../src/plugins/shared/tree/globals.ts","../src/plugins/shared/tree/processor-registry.ts","../src/plugins/shared/tree/tree.ts","../src/plugins/rbac/globals.ts","../src/plugins/rbac/rbac-service.ts","../src/plugins/shared/attributes/attribute-service.ts","../src/plugins/shared/attributes/AttributeTable.tsx","../src/plugins/shared/chart/Chart.tsx","../src/plugins/shared/chart/WatchableAttributesForm.tsx","../src/plugins/shared/operations/Operations.tsx","../src/plugins/shared/operations/OperationForm.tsx","../src/plugins/shared/operations/operation.ts","../src/plugins/shared/operations/operation-service.ts","../src/plugins/shared/workspace.ts","../src/preferences/registry.ts","../src/plugins/camel/Camel.tsx","../src/plugins/camel/CamelContent.tsx","../src/util/xml.ts","../src/plugins/camel/globals.ts","../src/plugins/camel/endpoints/endpoints-service.ts","../src/plugins/camel/icons/CamelImageIcon.tsx","../src/plugins/camel/icons/svg/index.ts","../src/plugins/camel/icons/Icons.tsx","../src/plugins/camel/schema-service.ts","../src/plugins/camel/routes-service.ts","../src/plugins/camel/camel-service.ts","../src/plugins/camel/context.ts","../src/plugins/camel/contexts/Contexts.tsx","../src/plugins/camel/contexts/ContextToolbar.tsx","../src/plugins/camel/contexts/contexts-service.ts","../src/util/arrays.ts","../src/plugins/camel/debug/Debug.tsx","../src/plugins/camel/route-diagram/RouteDiagram.tsx","../src/plugins/camel/camel-preferences-service.ts","../src/plugins/camel/route-diagram/context.ts","../src/plugins/camel/route-diagram/visualization-service.ts","../src/plugins/camel/debug/ConditionalBreakpointModel.tsx","../src/plugins/camel/debug/debug-service.ts","../src/plugins/camel/debug/MessageDrawer.tsx","../src/plugins/camel/endpoints/Endpoints.tsx","../src/plugins/camel/endpoints/AddEndpoint.tsx","../src/plugins/camel/endpoints/AddEndpointURI.tsx","../src/plugins/camel/endpoints/context.ts","../src/plugins/camel/endpoints/AddEndpointWizard.tsx","../src/plugins/camel/endpoints/EndpointParametersForm.tsx","../src/plugins/camel/endpoints/BrowseMessages.tsx","../src/plugins/camel/endpoints/InputWithSuggestions.tsx","../src/plugins/camel/endpoints/EndpointsStats.tsx","../src/plugins/camel/endpoints/SendMessage.tsx","../src/plugins/camel/endpoints/exchange-headers-camel-model.json","../src/plugins/camel/exchanges/Exchanges.tsx","../src/plugins/camel/exchanges/BlockedExchanges.tsx","../src/plugins/camel/exchanges/exchanges-service.ts","../src/plugins/camel/exchanges/InflightExchanges.tsx","../src/plugins/camel/profile/Profile.tsx","../src/plugins/camel/profile/profile-service.ts","../src/plugins/camel/properties/Properties.tsx","../src/plugins/camel/properties/PropertiesList.tsx","../src/plugins/camel/properties/PropertiesTooltippedName.tsx","../src/plugins/camel/properties/property.ts","../src/plugins/camel/properties/properties-service.ts","../src/plugins/camel/rest-services/RestServices.tsx","../src/plugins/camel/rest-services/rest-services-service.ts","../src/plugins/camel/routes/CamelRoutes.tsx","../src/plugins/camel/routes/route.ts","../src/plugins/camel/routes/routes-service.ts","../src/plugins/camel/routes/Source.tsx","../src/plugins/camel/trace/Trace.tsx","../src/plugins/camel/trace/tracing-service.ts","../src/plugins/camel/type-converters/TypeConverters.tsx","../src/plugins/camel/type-converters/TypeConvertersStatistics.tsx","../src/plugins/camel/type-converters/type-converters-service.ts","../src/plugins/camel/CamelTreeView.tsx","../src/ui/icons/TooltipHelpIcon.tsx","../src/plugins/camel/CamelPreferences.tsx","../src/plugins/camel/help.md","../src/plugins/camel/tree-processor.ts","../src/plugins/camel/index.ts","../src/plugins/connect/Connect.tsx","../src/plugins/connect/context.ts","../src/plugins/connect/connections.ts","../src/plugins/connect/discover/Discover.tsx","../src/plugins/connect/globals.ts","../src/plugins/connect/discover/discover-service.ts","../src/plugins/connect/login/ConnectLogin.tsx","../src/plugins/connect/remote/Remote.tsx","../src/plugins/connect/remote/ConnectionModal.tsx","../src/plugins/connect/remote/ImportModal.tsx","../src/plugins/connect/ConnectPreferences.tsx","../src/plugins/connect/help.md","../src/plugins/connect/init.ts","../src/plugins/connect/ConnectionStatus.tsx","../src/plugins/connect/index.ts","../src/plugins/jmx/globals.ts","../src/plugins/jmx/help.md","../src/plugins/jmx/Jmx.tsx","../src/plugins/jmx/context.ts","../src/plugins/jmx/JmxContent.tsx","../src/plugins/jmx/JmxTreeView.tsx","../src/plugins/jmx/index.ts","../src/plugins/logs/globals.ts","../src/plugins/logs/help.md","../src/plugins/logs/Logs.tsx","../src/plugins/logs/log-entry.ts","../src/plugins/logs/logs-service.ts","../src/plugins/logs/LogsPreferences.tsx","../src/plugins/logs/index.ts","../src/plugins/quartz/globals.ts","../src/plugins/quartz/help.md","../src/plugins/quartz/Quartz.tsx","../src/plugins/quartz/QuartzContent.tsx","../src/plugins/quartz/context.ts","../src/plugins/quartz/icons/index.tsx","../src/plugins/quartz/quartz-service.ts","../src/plugins/quartz/jobs/Jobs.tsx","../src/plugins/quartz/jobs/JobsTableRow.tsx","../src/plugins/quartz/scheduler/Scheduler.tsx","../src/plugins/quartz/triggers/Triggers.tsx","../src/plugins/quartz/triggers/TriggersTableRow.tsx","../src/plugins/quartz/triggers/TriggersManualModal.tsx","../src/plugins/quartz/triggers/TriggersUpdateModal.tsx","../src/plugins/quartz/QuartzTreeView.tsx","../src/plugins/quartz/index.ts","../src/plugins/rbac/tree-processor.ts","../src/plugins/rbac/index.ts","../src/plugins/runtime/Runtime.tsx","../src/plugins/runtime/Metrics.tsx","../src/plugins/runtime/runtime-service.ts","../src/plugins/runtime/SysProps.tsx","../src/plugins/runtime/Threads.tsx","../src/plugins/runtime/ThreadInfoModal.tsx","../src/plugins/runtime/globals.ts","../src/plugins/runtime/help.md","../src/plugins/runtime/index.ts","../src/plugins/springboot/SpringBoot.tsx","../src/plugins/springboot/Health.tsx","../src/plugins/springboot/types.ts","../src/plugins/springboot/springboot-service.ts","../src/plugins/springboot/Info.tsx","../src/plugins/springboot/Loggers.tsx","../src/plugins/springboot/TraceView.tsx","../src/plugins/springboot/globals.ts","../src/plugins/springboot/help.md","../src/plugins/springboot/index.ts","../src/plugins/index.ts","../src/preferences/HawtioPreferences.tsx","../src/preferences/help.md","../src/preferences/HomePreferences.tsx","../src/preferences/globals.ts","../src/preferences/preferences-service.ts","../src/preferences/LogsPreferences.tsx","../src/preferences/context.ts","../src/ui/page/HawtioPage.tsx","../src/ui/about/HawtioAbout.tsx","../src/ui/about/context.ts","../src/ui/about/globals.ts","../src/ui/page/HawtioHeader.tsx","../src/ui/page/context.ts","../src/ui/page/HawtioSidebar.tsx","../src/ui/page/globals.ts","../src/ui/session/globals.ts","../src/ui/session/session-service.ts","../src/ui/session/SessionMonitor.tsx"],"sourcesContent":["import { configManager } from './core'\r\n\r\n// Hawtio React component\r\nexport * from './Hawtio'\r\n// Hawtio API\r\nexport * from './auth'\r\nexport * from './core'\r\nexport * from './help'\r\nexport * from './plugins'\r\nexport * from './preferences'\r\nexport * from './ui'\r\n\r\n// Register Hawtio React component version\r\nconfigManager.addProductInfo('Hawtio React', '__PACKAGE_VERSION_PLACEHOLDER__')\r\n","export * from './config-manager'\r\nexport * from './core'\r\nexport * from './event-service'\r\nexport * from './hooks'\r\nexport * from './logging'\r\n","import $ from 'jquery'\r\nimport { Plugin } from './core'\r\nimport { Logger } from './logging'\r\n\r\nconst log = Logger.get('hawtio-core-config')\r\n\r\nexport const DEFAULT_APP_NAME = 'Hawtio Management Console'\r\nexport const DEFAULT_LOGIN_TITLE = 'Log in to your account'\r\n\r\n/**\r\n * The single user-customisable entrypoint for the Hawtio console configurations.\r\n */\r\nexport type Hawtconfig = {\r\n  /**\r\n   * Configuration for branding & styles.\r\n   */\r\n  branding?: BrandingConfig\r\n\r\n  /**\r\n   * Configuration for the built-in login page.\r\n   */\r\n  login?: LoginConfig\r\n\r\n  /**\r\n   * Configuration for the About modal.\r\n   */\r\n  about?: AboutConfig\r\n\r\n  /**\r\n   * The user can explicitly disable plugins by specifying the plugin route paths.\r\n   *\r\n   * This option can be used if some of the built-in plugins are not desirable\r\n   * for the custom installation of Hawtio console.\r\n   */\r\n  disabledRoutes?: DisabledRoutes\r\n\r\n  /**\r\n   * Configuration for JMX plugin.\r\n   */\r\n  jmx?: JmxConfig\r\n\r\n  /**\r\n   * Configuration for Hawtio Online.\r\n   */\r\n  online?: OnlineConfig\r\n}\r\n\r\n/**\r\n * Branding configuration type.\r\n */\r\nexport type BrandingConfig = {\r\n  appName?: string\r\n  showAppName?: boolean\r\n  appLogoUrl?: string\r\n  css?: string\r\n  favicon?: string\r\n}\r\n\r\n/**\r\n * Login configuration type.\r\n */\r\nexport type LoginConfig = {\r\n  title?: string\r\n  description?: string\r\n  links?: LoginLink[]\r\n}\r\n\r\nexport type LoginLink = {\r\n  url: string\r\n  text: string\r\n}\r\n\r\n/**\r\n * About configuration type.\r\n */\r\nexport type AboutConfig = {\r\n  title?: string\r\n  description?: string\r\n  imgSrc?: string\r\n  productInfo?: AboutProductInfo[]\r\n  copyright?: string\r\n}\r\n\r\nexport type AboutProductInfo = {\r\n  name: string\r\n  value: string\r\n}\r\n\r\nexport type DisabledRoutes = string[]\r\n\r\n/**\r\n * JMX configuration type.\r\n */\r\nexport type JmxConfig = {\r\n  /**\r\n   * This option can either disable workspace completely by setting `false`, or\r\n   * specify an array of MBean paths in the form of\r\n   * `<domain>/<prop1>=<value1>,<prop2>=<value2>,...`\r\n   * to fine-tune which MBeans to load into workspace.\r\n   *\r\n   * Note that disabling workspace should also deactivate all the plugins that\r\n   * depend on MBeans provided by workspace.\r\n   *\r\n   * @see https://github.com/hawtio/hawtio-next/issues/421\r\n   */\r\n  workspace?: boolean | string[]\r\n}\r\n\r\n/**\r\n * Hawtio Online configuration type.\r\n */\r\nexport type OnlineConfig = {\r\n  /**\r\n   * Selector for OpenShift projects or Kubernetes namespaces.\r\n   *\r\n   * @see https://github.com/hawtio/hawtio-online/issues/64\r\n   */\r\n  projectSelector?: string\r\n}\r\n\r\nexport const HAWTCONFIG_JSON = 'hawtconfig.json'\r\n\r\nclass ConfigManager {\r\n  private config?: Promise<Hawtconfig>\r\n\r\n  reset() {\r\n    this.config = undefined\r\n  }\r\n\r\n  setHawtconfig(config: Hawtconfig) {\r\n    this.config = Promise.resolve(config)\r\n  }\r\n\r\n  getHawtconfig(): Promise<Hawtconfig> {\r\n    if (this.config) {\r\n      return this.config\r\n    }\r\n\r\n    this.config = this.loadConfig()\r\n    return this.config\r\n  }\r\n\r\n  private async loadConfig(): Promise<Hawtconfig> {\r\n    log.info('Loading', HAWTCONFIG_JSON)\r\n\r\n    try {\r\n      const res = await fetch(HAWTCONFIG_JSON)\r\n      if (!res.ok) {\r\n        log.error('Failed to fetch', HAWTCONFIG_JSON, '-', res.status, res.statusText)\r\n        return {}\r\n      }\r\n\r\n      const config = await res.json()\r\n      log.debug(HAWTCONFIG_JSON, '=', config)\r\n      log.info('Loaded', HAWTCONFIG_JSON)\r\n      return config\r\n    } catch (err) {\r\n      log.error('Error fetching', HAWTCONFIG_JSON, '-', err)\r\n      return {}\r\n    }\r\n  }\r\n\r\n  async configure(configurer: (config: Hawtconfig) => void) {\r\n    const config = await this.getHawtconfig()\r\n    configurer(config)\r\n  }\r\n\r\n  async applyBranding(): Promise<boolean> {\r\n    const { branding } = await this.getHawtconfig()\r\n    if (!branding) {\r\n      return false\r\n    }\r\n\r\n    log.info('Apply branding', branding)\r\n    let applied = false\r\n    if (branding.appName) {\r\n      log.info('Updating title -', branding.appName)\r\n      document.title = branding.appName\r\n      applied = true\r\n    }\r\n    if (branding.css) {\r\n      // Branding css should be pushed to last to override the builtin PatternFly styles\r\n      this.updateHref('#branding', branding.css, true)\r\n      applied = true\r\n    }\r\n    if (branding.favicon) {\r\n      this.updateHref('#favicon', branding.favicon)\r\n      applied = true\r\n    }\r\n    return applied\r\n  }\r\n\r\n  private updateHref(id: string, path: string, moveToLast: boolean = false): void {\r\n    log.info('Updating href for', id, '-', path, moveToLast)\r\n    const elm = $(id)\r\n    elm.prop('disabled', true)\r\n    elm.attr({ href: path })\r\n    if (moveToLast) {\r\n      elm.remove()\r\n      $('head').append(elm)\r\n    }\r\n    elm.prop('disabled', false)\r\n  }\r\n\r\n  async isRouteEnabled(path: string): Promise<boolean> {\r\n    const { disabledRoutes } = await this.getHawtconfig()\r\n    return !disabledRoutes || !disabledRoutes.includes(path)\r\n  }\r\n\r\n  async filterEnabledPlugins(plugins: Plugin[]): Promise<Plugin[]> {\r\n    const enabledPlugins: Plugin[] = []\r\n    for (const plugin of plugins) {\r\n      if ((plugin.path == null && (await plugin.isActive())) || (await this.isRouteEnabled(plugin.path!))) {\r\n        enabledPlugins.push(plugin)\r\n      } else {\r\n        log.debug(`Plugin \"${plugin.id}\" disabled by hawtconfig.json`)\r\n      }\r\n    }\r\n    return enabledPlugins\r\n  }\r\n\r\n  async addProductInfo(name: string, value: string) {\r\n    const config = await this.getHawtconfig()\r\n    if (!config.about) {\r\n      config.about = {}\r\n    }\r\n    if (!config.about.productInfo) {\r\n      config.about.productInfo = []\r\n    }\r\n    config.about.productInfo.push({ name, value })\r\n  }\r\n}\r\n\r\nexport const configManager = new ConfigManager()\r\n","/* eslint-disable no-console */\r\nimport { stringSorter } from '@hawtiosrc/util/strings'\r\nimport jsLogger, { GlobalLogger, ILogger, ILogLevel } from 'js-logger'\r\nimport { is, object, type } from 'superstruct'\r\n\r\n// Necessary for external plugins to compile with --dts option\r\nexport * from 'js-logger'\r\n\r\nexport const STORAGE_KEY_LOG_LEVEL = 'core.logging.logLevel'\r\nexport const STORAGE_KEY_CHILD_LOGGERS = 'core.logging.childLoggers'\r\n\r\nexport interface HawtioLogger extends GlobalLogger {\r\n  getChildLoggers(): ChildLogger[]\r\n  getAvailableChildLoggers(): ChildLogger[]\r\n  addChildLogger(logger: ChildLogger): void\r\n  updateChildLogger(name: string, level: ILogLevel | string): void\r\n  removeChildLogger(logger: ChildLogger): void\r\n}\r\n\r\nexport interface ChildLogger {\r\n  name: string\r\n  filterLevel: ILogLevel\r\n}\r\n\r\nclass LocalStorageHawtioLogger implements HawtioLogger {\r\n  TRACE = jsLogger.TRACE\r\n  DEBUG = jsLogger.DEBUG\r\n  INFO = jsLogger.INFO\r\n  TIME = jsLogger.TIME\r\n  WARN = jsLogger.WARN\r\n  ERROR = jsLogger.ERROR\r\n  OFF = jsLogger.OFF\r\n\r\n  trace = jsLogger.trace\r\n  debug = jsLogger.debug\r\n  info = jsLogger.info\r\n  log = jsLogger.log\r\n  warn = jsLogger.warn\r\n  error = jsLogger.error\r\n  time = jsLogger.time\r\n  timeEnd = jsLogger.timeEnd\r\n  getLevel = jsLogger.getLevel\r\n  enabledFor = jsLogger.enabledFor\r\n\r\n  useDefaults = jsLogger.useDefaults\r\n  setHandler = jsLogger.setHandler\r\n  // 'typeof jsLogger.createDefaultHandler' is a hack as otherwise tsc complains TS4029 error\r\n  createDefaultHandler: typeof jsLogger.createDefaultHandler = jsLogger.createDefaultHandler\r\n\r\n  private readonly LOG_LEVEL_MAP: { [name: string]: ILogLevel } = {\r\n    TRACE: this.TRACE,\r\n    DEBUG: this.DEBUG,\r\n    INFO: this.INFO,\r\n    TIME: this.TIME,\r\n    WARN: this.WARN,\r\n    ERROR: this.ERROR,\r\n    OFF: this.OFF,\r\n  } as const\r\n\r\n  get(name: string): ILogger {\r\n    let logger = this.loggers[name]\r\n    if (logger) {\r\n      return logger\r\n    }\r\n    logger = jsLogger.get(name)\r\n    this.loggers[name] = logger\r\n    return logger\r\n  }\r\n\r\n  setLevel(level: ILogLevel | string) {\r\n    const logLevel = this.toLogLevel(level)\r\n    jsLogger.setLevel(logLevel)\r\n    this.saveLogLevel(logLevel)\r\n  }\r\n\r\n  private loggers: { [name: string]: ILogger } = {}\r\n\r\n  constructor() {\r\n    try {\r\n      const logLevel = this.loadLogLevel()\r\n      jsLogger.setLevel(logLevel)\r\n    } catch (e) {\r\n      console.error('Failed to load log level from local storage:', e)\r\n    }\r\n\r\n    try {\r\n      const childLoggers = this.loadChildLoggers()\r\n      childLoggers.forEach(logger => this.get(logger.name).setLevel(logger.filterLevel))\r\n    } catch (e) {\r\n      console.error('Failed to load child loggers from local storage:', e)\r\n    }\r\n\r\n    this.setHandler(this.createDefaultHandler())\r\n  }\r\n\r\n  private toLogLevel(level: ILogLevel | string): ILogLevel {\r\n    if (typeof level !== 'string') {\r\n      return level\r\n    }\r\n\r\n    const logLevel = this.LOG_LEVEL_MAP[level]\r\n    if (!logLevel) {\r\n      console.error('Unknown log level:', level)\r\n      return this.INFO\r\n    }\r\n    return logLevel\r\n  }\r\n\r\n  private loadLogLevel(): ILogLevel {\r\n    const logLevel = localStorage.getItem(STORAGE_KEY_LOG_LEVEL)\r\n    return logLevel ? JSON.parse(logLevel) : this.INFO\r\n  }\r\n\r\n  private saveLogLevel(level: ILogLevel) {\r\n    localStorage.setItem(STORAGE_KEY_LOG_LEVEL, JSON.stringify(level))\r\n  }\r\n\r\n  private loadChildLoggers(): ChildLogger[] {\r\n    const childLoggers = localStorage.getItem(STORAGE_KEY_CHILD_LOGGERS)\r\n    return childLoggers ? JSON.parse(childLoggers) : []\r\n  }\r\n\r\n  private saveChildLoggers(loggers: ChildLogger[]) {\r\n    localStorage.setItem(STORAGE_KEY_CHILD_LOGGERS, JSON.stringify(loggers))\r\n  }\r\n\r\n  getChildLoggers(): ChildLogger[] {\r\n    const childLoggers = this.loadChildLoggers()\r\n    childLoggers.sort((a, b) => stringSorter(a.name, b.name))\r\n    return childLoggers\r\n  }\r\n\r\n  getAvailableChildLoggers(): ChildLogger[] {\r\n    const allLoggers: ChildLogger[] = []\r\n    Object.values(this.loggers).forEach(logger => {\r\n      // reflectively access 'context' property of js-logger Logger object\r\n      if (is(logger, type({ context: object() }))) {\r\n        allLoggers.push(logger.context as unknown as ChildLogger)\r\n      } else {\r\n        console.error('Logger does not have context:', logger)\r\n      }\r\n    })\r\n    const childLoggers = this.getChildLoggers()\r\n    const availableLoggers = allLoggers.filter(logger => !childLoggers.some(l => l.name === logger.name))\r\n    availableLoggers.sort((a, b) => stringSorter(a.name, b.name))\r\n    return availableLoggers\r\n  }\r\n\r\n  addChildLogger(logger: ChildLogger): void {\r\n    const childLoggers = this.getChildLoggers()\r\n    childLoggers.push(logger)\r\n    this.saveChildLoggers(childLoggers)\r\n    this.get(logger.name).setLevel(logger.filterLevel)\r\n  }\r\n\r\n  updateChildLogger(name: string, level: ILogLevel | string): void {\r\n    const logLevel = this.toLogLevel(level)\r\n    const updated = this.getChildLoggers().map(logger => {\r\n      if (logger.name === name) {\r\n        logger.filterLevel = logLevel\r\n      }\r\n      return logger\r\n    })\r\n    this.saveChildLoggers(updated)\r\n    this.get(name).setLevel(logLevel)\r\n  }\r\n\r\n  removeChildLogger(logger: ChildLogger) {\r\n    const removed = this.getChildLoggers().filter(l => l.name !== logger.name)\r\n    this.saveChildLoggers(removed)\r\n    this.get(logger.name).setLevel(this.getLevel())\r\n  }\r\n}\r\n\r\n/**\r\n * Hawtio logger\r\n */\r\nexport const Logger = new LocalStorageHawtioLogger()\r\n","/**\r\n * Return true if the string is either null or empty.\r\n */\r\nexport function isBlank(str?: string): boolean {\r\n  if (str === undefined || str === null) {\r\n    return true\r\n  }\r\n  if (typeof str !== 'string') {\r\n    // not null but also not a string...\r\n    return false\r\n  }\r\n\r\n  return str.trim().length === 0\r\n}\r\n\r\n/**\r\n * Simple toString that obscures any field called 'password'.\r\n */\r\nexport function toString(obj: unknown): string {\r\n  if (!obj) {\r\n    return '{}'\r\n  }\r\n\r\n  const strs = Object.entries(obj).map(([key, value]) => {\r\n    let obscured = value\r\n    if (key.toLowerCase() === 'password') {\r\n      obscured = obfuscate(value)\r\n    } else if (typeof value === 'object') {\r\n      obscured = toString(obscured)\r\n    }\r\n    return `${key}: ${obscured}`\r\n  })\r\n  return `{ ${strs.join(', ')} }`\r\n}\r\n\r\n/**\r\n * Convert a string into a bunch of '*' of the same length.\r\n */\r\nexport function obfuscate(str: string): string {\r\n  if (typeof str !== 'string') {\r\n    return ''\r\n  }\r\n  return str\r\n    .split('')\r\n    .map(_ => '*')\r\n    .join('')\r\n}\r\n\r\n/**\r\n * Removes leading characters from a string.\r\n */\r\nexport function trimStart(text: string, chars: string): string {\r\n  return text.replace(new RegExp(`^[${chars}]+`, 'g'), '')\r\n}\r\n\r\n/**\r\n * Removes trailing characters from a string.\r\n */\r\nexport function trimEnd(text: string, chars: string): string {\r\n  return text.replace(new RegExp(`[${chars}]+$`, 'g'), '')\r\n}\r\n\r\n/**\r\n * Removes all quotes/apostrophes from the beginning and end of string.\r\n *\r\n * @param text\r\n * @returns {string}\r\n */\r\nexport function trimQuotes(text: string): string {\r\n  if (text && text.length > 0) {\r\n    // Make sure only enclosing quotes are removed\r\n    const headTrimmed = trimStart(text, '\\'\"')\r\n    if (headTrimmed.length < text.length) {\r\n      return trimEnd(headTrimmed, '\\'\"')\r\n    }\r\n  }\r\n  return text\r\n}\r\n\r\nexport function stringSorter(a: string, b: string, sortDesc?: boolean): number {\r\n  let res = a.localeCompare(b)\r\n  if (sortDesc) {\r\n    res *= -1\r\n  }\r\n  return res\r\n}\r\n\r\nexport function parseBoolean(value: string): boolean {\r\n  if (!value) return false\r\n\r\n  return /^true$/i.test(value) || parseInt(value) === 1\r\n}\r\n\r\n/**\r\n * Will format a property to a standard human readable string with its spaces.\r\n * It will respect MBean and leave it together\r\n * @param str The property to transform\r\n * @returns The property with its proper spaces\r\n */\r\nexport function humanizeLabels(str: string): string {\r\n  return str\r\n    .split('-')\r\n    .filter(str => !isBlank(str))\r\n    .map(str => str.replace(/^./, str => str.toUpperCase()))\r\n    .join(' ')\r\n    .replace(/([a-z])([A-Z])/g, '$1 $2')\r\n    .replace(/\\b([A-Z]+)([A-Z])([a-z])/, '$1 $2$3')\r\n    .replace('M Bean', 'MBean')\r\n    .replace('Mbean', 'MBean')\r\n    .replace(/^./, str => str.toUpperCase())\r\n    .replace(/ +/, ' ')\r\n    .trim()\r\n}\r\n\r\n/**\r\n * Matches the given string value with the pattern.\r\n * A pattern can be the exact matching string or an expression that includes '*'\r\n * as wildcard.\r\n */\r\nexport function matchWithWildcard(value: string, pattern: string): boolean {\r\n  if (!pattern.includes('*')) {\r\n    return value === pattern\r\n  }\r\n\r\n  // The '*' is used as the wildcard to remove it, escape the rest and rejoin with\r\n  // the correct regex syntax.\r\n  const rule = pattern\r\n    .split('*')\r\n    // Escape any regex special characters\r\n    .map(s => s.replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, '\\\\$1'))\r\n    .join('.*')\r\n  const regexp = new RegExp(`^${rule}$`, 'i')\r\n  return value.match(regexp) !== null\r\n}\r\n","import { Logger } from '@hawtiosrc/core/logging'\r\n\r\nexport const moduleName = 'hawtio-auth'\r\nexport const log = Logger.get(moduleName)\r\n\r\nexport const PUBLIC_USER = 'public'\r\n\r\nexport const PATH_USER = 'user'\r\nexport const PATH_LOGOUT = 'auth/logout'\r\n","import { useEffect, useState } from 'react'\r\nimport { userService } from './user-service'\r\n\r\n/**\r\n * Custom React hook for using Hawtio users.\r\n */\r\nexport function useUser() {\r\n  const [username, setUsername] = useState('')\r\n  const [isLogin, setIsLogin] = useState(false)\r\n  const [userLoaded, setUserLoaded] = useState(false)\r\n  // special, temporary status of user fetching operation. Required to avoid flickering when OAuth2\r\n  // redirect login is pending\r\n  const [userLoading, setUserLoading] = useState(true)\r\n\r\n  useEffect(() => {\r\n    let proceed = true\r\n    const isProceed = () => proceed\r\n    const fetchUser = async () => {\r\n      // Try syncing the login status with the server here\r\n      await userService.fetchUser(true, () => isProceed())\r\n\r\n      const username = await userService.getUsername()\r\n      const isLogin = await userService.isLogin()\r\n      const isLoading = await userService.isLoading()\r\n      if (isProceed()) {\r\n        setUsername(username)\r\n        setIsLogin(isLogin)\r\n        setUserLoading(isLoading)\r\n        setUserLoaded(true)\r\n      }\r\n    }\r\n    fetchUser()\r\n\r\n    return () => {\r\n      proceed = false\r\n    }\r\n  }, [])\r\n\r\n  return { username, isLogin, userLoaded, userLoading }\r\n}\r\n","import { eventService } from '@hawtiosrc/core'\r\nimport { log, PATH_LOGOUT, PATH_USER, PUBLIC_USER } from './globals'\r\n\r\nexport type User = {\r\n  username: string\r\n  isLogin: boolean\r\n  isLoading?: boolean\r\n}\r\n\r\nexport type ResolveUser = (user: User) => void\r\nexport type FetchUserHook = (resolve: ResolveUser, proceed?: () => boolean) => Promise<boolean>\r\nexport type LogoutHook = () => Promise<boolean>\r\n\r\nexport interface IUserService {\r\n  addFetchUserHook(name: string, hook: FetchUserHook): void\r\n  addLogoutHook(name: string, hook: LogoutHook): void\r\n  fetchUser(retry?: boolean, proceed?: () => boolean): Promise<void>\r\n  getUsername(): Promise<string>\r\n  isLogin(): Promise<boolean>\r\n  getToken(): string | null\r\n  setToken(token: string): void\r\n  logout(): Promise<void>\r\n}\r\n\r\nclass UserService implements IUserService {\r\n  private readonly user: Promise<User>\r\n  private resolveUser: ResolveUser = () => {\r\n    // no-op\r\n  }\r\n  private fetchUserHooks: { [name: string]: FetchUserHook } = {}\r\n  private logoutHooks: { [name: string]: LogoutHook } = {}\r\n  private token: string | null = null\r\n\r\n  constructor() {\r\n    this.user = new Promise<User>(resolve => {\r\n      this.resolveUser = resolve\r\n    })\r\n  }\r\n\r\n  addFetchUserHook(name: string, hook: FetchUserHook) {\r\n    this.fetchUserHooks[name] = hook\r\n  }\r\n\r\n  addLogoutHook(name: string, hook: LogoutHook) {\r\n    this.logoutHooks[name] = hook\r\n  }\r\n\r\n  /**\r\n   * Sync login status with the server by fetching login user.\r\n   */\r\n  async fetchUser(retry = true, proceed?: () => boolean): Promise<void> {\r\n    // First, let fetch user hooks to resolve the user in a special way\r\n    for (const [name, fetchUser] of Object.entries(this.fetchUserHooks)) {\r\n      const resolved = await fetchUser(this.resolveUser, proceed)\r\n      if (proceed && !proceed()) {\r\n        return\r\n      }\r\n      log.debug('Invoke fetch user hook', name, ': resolved =', resolved)\r\n      if (resolved) {\r\n        // Login succeeded\r\n        eventService.login()\r\n        return\r\n      }\r\n    }\r\n\r\n    // Default fetch user logic\r\n    try {\r\n      const res = await fetch(PATH_USER)\r\n      if (!res.ok) {\r\n        log.error('Failed to fetch user:', res.status, res.statusText)\r\n        if (retry && res.status === 403) {\r\n          // Wait for 1000ms in case login session is not ready at server side.\r\n          // This retry was originally introduced for Spring Security support,\r\n          // but it no longer relies on the retry. Now it is kept mainly for\r\n          // additional resilience at authentication.\r\n          await new Promise(resolve => setTimeout(resolve, 1000))\r\n          return this.fetchUser(false)\r\n        }\r\n\r\n        this.resolveUser({ username: PUBLIC_USER, isLogin: false })\r\n        return\r\n      }\r\n\r\n      const username = await res.json()\r\n      log.info('Logged in as:', username)\r\n      this.resolveUser({ username, isLogin: true })\r\n\r\n      // Send login event\r\n      eventService.login()\r\n    } catch (err) {\r\n      // Silently ignore as mostly it's just not logged-in yet\r\n      log.debug('Failed to get logged-in user from', PATH_USER, '-', err)\r\n      this.resolveUser({ username: PUBLIC_USER, isLogin: false })\r\n    }\r\n  }\r\n\r\n  async getUsername(): Promise<string> {\r\n    return (await this.user).username\r\n  }\r\n\r\n  async isLogin(): Promise<boolean> {\r\n    return (await this.user).isLogin\r\n  }\r\n\r\n  async isLoading(): Promise<boolean> {\r\n    const u = await this.user\r\n    return u.isLoading ?? false\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return this.token\r\n  }\r\n\r\n  setToken(token: string) {\r\n    this.token = token\r\n  }\r\n\r\n  async logout() {\r\n    const login = await this.user\r\n    if (!login.isLogin) {\r\n      log.debug('Not logged in')\r\n      return\r\n    }\r\n\r\n    log.info('Log out:', login.username)\r\n\r\n    // Send logout event\r\n    eventService.logout()\r\n\r\n    // First, let logout hooks to log out in a special way\r\n    for (const [name, logout] of Object.entries(this.logoutHooks)) {\r\n      const result = await logout()\r\n      log.debug('Invoke logout hook', name, ': result =', result)\r\n      if (result) {\r\n        // Logout succeeded\r\n        return\r\n      }\r\n    }\r\n\r\n    // Default logout logic\r\n    log.debug('Redirect to:', PATH_LOGOUT)\r\n    window.location.href = PATH_LOGOUT\r\n  }\r\n}\r\n\r\nexport const userService = new UserService()\r\n\r\n// Export non-exported definitions for testing\r\nexport const __testing__ = {\r\n  UserService,\r\n}\r\n","import { userService } from '@hawtiosrc/auth'\r\nimport { importRemote, ImportRemoteOptions } from '@module-federation/utilities'\r\nimport $ from 'jquery'\r\nimport { configManager } from './config-manager'\r\nimport { eventService } from './event-service'\r\nimport { log } from './globals'\r\n\r\n/**\r\n * Components to be added to the header navbar\r\n * Can define either a single component type or\r\n * a component with a universal property.\r\n *\r\n * By default, components will only be displayed\r\n * if the plugin UI is also visible. However, setting\r\n * universal to 'true' will ensure the component\r\n * remains displayed regardless of which plugin is\r\n * given focus.\r\n */\r\nexport interface UniversalHeaderItem {\r\n  /**\r\n   * The component that should be populated as\r\n   * a dropdown item on the header bar.\r\n   */\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  component: React.ComponentType<any>\r\n\r\n  /**\r\n   * Should components remain visible on header even when\r\n   * the plugin is not being displayed.\r\n   */\r\n  universal: boolean\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport type HeaderItem = React.ComponentType<any> | UniversalHeaderItem\r\n\r\nexport function isUniversalHeaderItem(item: HeaderItem): item is UniversalHeaderItem {\r\n  return 'component' in item && 'universal' in item && typeof item.universal === 'boolean'\r\n}\r\n\r\n/**\r\n * Internal representation of a Hawtio plugin.\r\n */\r\nexport interface Plugin {\r\n  /**\r\n   * Mandatory, unique plugin identifier\r\n   */\r\n  id: string\r\n\r\n  /**\r\n   * Title to be displayed in left PageSidebar\r\n   */\r\n  title?: string\r\n\r\n  /**\r\n   * Path for plugin's main component. Optional if the plugin only contributes header elements for example\r\n   */\r\n  path?: string\r\n\r\n  /**\r\n   * The order to be shown in the Hawtio sidebar.\r\n   *\r\n   * This only controls presentation and doesn't change the order of plugin to\r\n   * be loaded.\r\n   *\r\n   * If it's not specified, it defaults to `100`. `0` ~ `30` are reserved for\r\n   * the builtin plugins.\r\n   */\r\n  order?: number\r\n\r\n  /**\r\n   * If this plugin provides a login form component\r\n   */\r\n  isLogin?: boolean\r\n\r\n  /**\r\n   * Plugins main component to be displayed\r\n   */\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  component?: React.ComponentType<any>\r\n\r\n  headerItems?: HeaderItem[]\r\n\r\n  /**\r\n   * Returns if this plugin should be activated.\r\n   * This method needs to return a promise as the process of resolving if a plugin\r\n   * should be activated may require information collected asynchronously such as\r\n   * the existence of some MBeans, etc.\r\n   */\r\n  isActive: () => Promise<boolean>\r\n}\r\n\r\nconst DEFAULT_PLUGIN_ORDER = 100\r\n\r\n/**\r\n * A collection of internal Hawtio plugins with IDs as keys.\r\n */\r\ntype Plugins = Record<string, Plugin>\r\n\r\n/**\r\n * Type definition of the entry point for a Hawtio plugin.\r\n */\r\nexport type HawtioPlugin = () => void\r\n\r\nexport interface HawtioRemote extends ImportRemoteOptions {\r\n  pluginEntry?: string\r\n}\r\n\r\nconst DEFAULT_PLUGIN_ENTRY = 'plugin'\r\n\r\n/**\r\n * Hawtio core service.\r\n *\r\n * This service provides the following functionalities:\r\n * - Base path provisioning\r\n * - Plugin loader and discovery mechanism\r\n */\r\nclass HawtioCore {\r\n  /**\r\n   * Hawtio base path.\r\n   */\r\n  private basePath?: string\r\n\r\n  /**\r\n   * List of URLs that the plugin loader will try and discover plugins from.\r\n   */\r\n  private urls: string[] = []\r\n\r\n  /**\r\n   * Holds all of the Hawtio plugins that need to be bootstrapped.\r\n   */\r\n  private plugins: Plugins = {}\r\n\r\n  /**\r\n   * Sets the base path of the Hawtio console.\r\n   * If the given path includes trailing '/', it will be trimmed.\r\n   */\r\n  setBasePath(path: string) {\r\n    if (path.length > 1 && path.endsWith('/')) {\r\n      // Remove trailing '/'\r\n      this.basePath = path.slice(0, -1)\r\n    } else {\r\n      this.basePath = path\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the base path of the Hawtio console without trailing '/'.\r\n   */\r\n  getBasePath(): string | undefined {\r\n    if (!this.basePath) {\r\n      const basePath = this.documentBase()\r\n      log.info('Base path from html head:', basePath)\r\n      if (basePath && basePath.length > 1 && basePath.endsWith('/')) {\r\n        // Remove trailing '/'\r\n        this.basePath = basePath.slice(0, -1)\r\n      } else {\r\n        this.basePath = basePath\r\n      }\r\n    }\r\n    return this.basePath\r\n  }\r\n\r\n  private documentBase(): string | undefined {\r\n    const base = $('head').find('base')\r\n    if (base && base.length > 0) {\r\n      return base.attr('href')\r\n    }\r\n    return undefined\r\n  }\r\n\r\n  /**\r\n   * Adds an angular module to the list of modules to bootstrap.\r\n   */\r\n  addPlugin(plugin: Plugin): HawtioCore {\r\n    log.info('Add plugin:', plugin.id)\r\n    if (this.plugins[plugin.id]) {\r\n      throw new Error(`Plugin \"${plugin.id}\" already exists`)\r\n    }\r\n    this.plugins[plugin.id] = plugin\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Adds a URL for discovering plugins.\r\n   */\r\n  addUrl(url: string): HawtioCore {\r\n    log.info('Add URL:', url)\r\n    this.urls.push(url)\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Bootstraps Hawtio.\r\n   */\r\n  async bootstrap() {\r\n    log.info('Bootstrapping Hawtio...')\r\n\r\n    // Load plugins\r\n    await this.loadPlugins()\r\n\r\n    // Apply branding\r\n    // Branding should be applied after loading plugins as plugins may customise hawtconfig.\r\n    const brandingApplied = await configManager.applyBranding()\r\n    log.info('Branding applied:', brandingApplied)\r\n\r\n    log.info('Bootstrapped Hawtio')\r\n  }\r\n\r\n  /**\r\n   * Downloads plugins from any configured URLs and load them.\r\n   * It is invoked at Hawtio's bootstrapping.\r\n   *\r\n   * This plugin mechanism is implemented based on Webpack Module Federation.\r\n   * https://module-federation.github.io/\r\n   */\r\n  private async loadPlugins() {\r\n    if (this.urls.length === 0) {\r\n      log.info('No URLs provided to load external plugins')\r\n      return\r\n    }\r\n\r\n    const numBefore = Object.keys(this.plugins).length\r\n    log.info(numBefore, 'plugins before loading:', { ...this.plugins })\r\n\r\n    // Load external plugins from all URLs\r\n    await Promise.all(this.urls.map(this.loadExternalPlugins))\r\n\r\n    const numAfter = Object.keys(this.plugins).length\r\n    log.info(numAfter, 'plugins after loaded:', this.plugins)\r\n\r\n    // Notify plugins update\r\n    if (numBefore !== numAfter) {\r\n      log.debug('Notify plugins update')\r\n      eventService.pluginsUpdated()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Loads external plugins from the given URL. The URL endpoint is expected to\r\n   * return an array of HawtioRemote objects.\r\n   */\r\n  private async loadExternalPlugins(url: string) {\r\n    log.debug('Trying url:', url)\r\n    try {\r\n      const res = await fetch(url)\r\n      if (!res.ok) {\r\n        log.error('Failed to fetch url:', url, '-', res.status, res.statusText)\r\n        return\r\n      }\r\n\r\n      const remotes = (await res.json()) as HawtioRemote[]\r\n      log.debug('Loaded remotes from url:', url, '=', remotes)\r\n\r\n      // Load plugins\r\n      await Promise.all(\r\n        remotes.map(async remote => {\r\n          log.debug('Loading remote', remote)\r\n          try {\r\n            const plugin = await importRemote<{ [entry: string]: HawtioPlugin }>(remote)\r\n            const entryFn = plugin[remote.pluginEntry || DEFAULT_PLUGIN_ENTRY]\r\n            if (!entryFn) {\r\n              throw new Error(`Plugin entry not found: ${remote.pluginEntry || DEFAULT_PLUGIN_ENTRY}`)\r\n            }\r\n            entryFn()\r\n            log.debug('Loaded remote', remote)\r\n          } catch (err) {\r\n            log.error('Error loading remote:', remote, '-', err)\r\n          }\r\n        }),\r\n      )\r\n    } catch (err) {\r\n      log.error('Error fetching url:', url, '-', err)\r\n    }\r\n  }\r\n\r\n  getPlugins(): Plugin[] {\r\n    return Object.values(this.plugins)\r\n  }\r\n\r\n  /**\r\n   * Resolves which of registered plugins are active with the current environment.\r\n   *\r\n   * There are two types of plugin: normal plugin and login plugin.\r\n   * If it's normal, it's only resolved when the user is already logged in.\r\n   * If it's login, it's only resolved when the user is not logged in yet, and thus\r\n   * can only affects the login page.\r\n   *\r\n   * Therefore, this method depends on the login status provided by the `userService`.\r\n   */\r\n  async resolvePlugins(): Promise<Plugin[]> {\r\n    const userLoggedIn = await userService.isLogin()\r\n\r\n    log.debug('Resolve plugins: login =', userLoggedIn)\r\n\r\n    const resolved: Plugin[] = []\r\n    // load plugins sequentially to maintain the order\r\n    for (const plugin of this.getPlugins()) {\r\n      log.debug('Resolve plugin:', plugin.id)\r\n\r\n      if ((userLoggedIn && plugin.isLogin) || (!userLoggedIn && !plugin.isLogin)) {\r\n        continue\r\n      }\r\n\r\n      if (await plugin.isActive()) {\r\n        resolved.push(plugin)\r\n      }\r\n    }\r\n\r\n    log.debug('Resolved plugins:', resolved)\r\n\r\n    // Sort plugins for presentation\r\n    resolved.sort((a, b) => (a.order ?? DEFAULT_PLUGIN_ORDER) - (b.order ?? DEFAULT_PLUGIN_ORDER))\r\n\r\n    return resolved\r\n  }\r\n}\r\n\r\n/**\r\n * Hawtio core singleton instance.\r\n */\r\nexport const hawtio = new HawtioCore()\r\n","import EventEmitter from 'eventemitter3'\r\nimport { Logger } from './logging'\r\n\r\nconst log = Logger.get('hawtio-core-event')\r\n\r\nexport type NotificationType = 'default' | 'info' | 'success' | 'warning' | 'danger'\r\n\r\nexport type Notification = {\r\n  type: NotificationType\r\n  message: string\r\n  duration?: number\r\n}\r\n\r\nexport type EventListener = () => void\r\nexport type NotificationListener = (notification: Notification) => void\r\n\r\nexport type HawtioEvent = 'notify' | 'login' | 'logout' | 'refresh' | 'pluginsUpdated'\r\n\r\nexport const EVENT_NOTIFY: HawtioEvent = 'notify'\r\nexport const EVENT_LOGIN: HawtioEvent = 'login'\r\nexport const EVENT_LOGOUT: HawtioEvent = 'logout'\r\nexport const EVENT_REFRESH: HawtioEvent = 'refresh'\r\nexport const EVENT_PLUGINS_UPDATED: HawtioEvent = 'pluginsUpdated'\r\n\r\nconst DEFAULT_DURATION = 8000\r\n\r\nexport interface IEventService {\r\n  notify(notification: Notification): void\r\n  onNotify(listener: NotificationListener): void\r\n\r\n  login(): void\r\n  onLogin(listener: EventListener): void\r\n\r\n  logout(): void\r\n  onLogout(listener: EventListener): void\r\n\r\n  refresh(): void\r\n  onRefresh(listener: EventListener): void\r\n\r\n  pluginsUpdated(): void\r\n  onPluginsUpdated(listener: EventListener): void\r\n\r\n  removeListener(event: HawtioEvent, listener: EventListener | NotificationListener): void\r\n}\r\n\r\nclass EventService implements IEventService {\r\n  private eventEmitter = new EventEmitter()\r\n\r\n  notify(notification: Notification) {\r\n    if (!notification.duration) {\r\n      notification.duration = DEFAULT_DURATION\r\n    }\r\n    this.eventEmitter.emit(EVENT_NOTIFY, notification)\r\n  }\r\n\r\n  onNotify(listener: NotificationListener) {\r\n    this.eventEmitter.on(EVENT_NOTIFY, listener)\r\n    log.debug('Number of listeners on', EVENT_NOTIFY, '=', this.eventEmitter.listenerCount(EVENT_NOTIFY))\r\n  }\r\n\r\n  login() {\r\n    this.eventEmitter.emit(EVENT_LOGIN)\r\n  }\r\n\r\n  onLogin(listener: EventListener) {\r\n    this.eventEmitter.on(EVENT_LOGIN, listener)\r\n  }\r\n\r\n  logout() {\r\n    this.eventEmitter.emit(EVENT_LOGOUT)\r\n  }\r\n\r\n  onLogout(listener: EventListener) {\r\n    this.eventEmitter.on(EVENT_LOGOUT, listener)\r\n  }\r\n\r\n  refresh() {\r\n    this.eventEmitter.emit(EVENT_REFRESH)\r\n  }\r\n\r\n  onRefresh(listener: EventListener) {\r\n    this.eventEmitter.on(EVENT_REFRESH, listener)\r\n  }\r\n\r\n  pluginsUpdated() {\r\n    this.eventEmitter.emit(EVENT_PLUGINS_UPDATED)\r\n  }\r\n\r\n  onPluginsUpdated(listener: EventListener) {\r\n    this.eventEmitter.on(EVENT_PLUGINS_UPDATED, listener)\r\n  }\r\n\r\n  removeListener(event: HawtioEvent, listener: EventListener | NotificationListener) {\r\n    this.eventEmitter.removeListener(event, listener)\r\n  }\r\n}\r\n\r\nexport const eventService = new EventService()\r\n","import { Logger } from './logging'\r\n\r\nexport const moduleName = 'hawtio-core'\r\nexport const log = Logger.get(moduleName)\r\n","import { configManager, eventService, EVENT_PLUGINS_UPDATED, Hawtconfig, hawtio, Plugin } from '@hawtiosrc/core'\r\nimport { useEffect, useState } from 'react'\r\nimport { log } from './globals'\r\n\r\n/**\r\n * Custom React hook for using Hawtio plugins.\r\n */\r\nexport function usePlugins() {\r\n  const [plugins, setPlugins] = useState<Plugin[]>([])\r\n  const [pluginsLoaded, setPluginsLoaded] = useState(false)\r\n\r\n  log.debug('usePlugins - Plugins:', hawtio.getPlugins())\r\n\r\n  useEffect(() => {\r\n    const loadPlugins = async () => {\r\n      const activePlugins = await hawtio.resolvePlugins()\r\n      // Filter plugins by hawtconfig.json\r\n      const enabledPlugins = await configManager.filterEnabledPlugins(activePlugins)\r\n      setPlugins(enabledPlugins)\r\n      setPluginsLoaded(true)\r\n    }\r\n    loadPlugins()\r\n\r\n    // Reload plugins when they are updated elsewhere\r\n    eventService.onPluginsUpdated(loadPlugins)\r\n    return () => eventService.removeListener(EVENT_PLUGINS_UPDATED, loadPlugins)\r\n  }, [])\r\n\r\n  return { plugins, pluginsLoaded }\r\n}\r\n\r\n/**\r\n * Custom React hook for using hawtconfig.json.\r\n */\r\nexport function useHawtconfig() {\r\n  const [hawtconfig, setHawtconfig] = useState<Hawtconfig>({})\r\n  const [hawtconfigLoaded, setHawtconfigLoaded] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const loadHawtconfig = async () => {\r\n      setHawtconfig(await configManager.getHawtconfig())\r\n      setHawtconfigLoaded(true)\r\n    }\r\n    loadHawtconfig()\r\n  }, [])\r\n\r\n  return { hawtconfig, hawtconfigLoaded }\r\n}\r\n","import React from 'react'\r\nimport { BrowserRouter, Route, Routes } from 'react-router-dom'\r\nimport { hawtio } from './core'\r\nimport './Hawtio.css'\r\nimport { HawtioLogin } from './ui/login'\r\nimport { HawtioPage } from './ui/page'\r\n\r\nexport type HawtioProps = {\r\n  basepath?: string\r\n}\r\n\r\nexport const Hawtio: React.FunctionComponent<HawtioProps> = props => {\r\n  const { basepath } = props\r\n\r\n  if (basepath) {\r\n    hawtio.setBasePath(basepath)\r\n  }\r\n\r\n  return (\r\n    <BrowserRouter basename={hawtio.getBasePath()}>\r\n      <Routes>\r\n        <Route path='/login' element={<HawtioLogin />} />\r\n        <Route path='/*' element={<HawtioPage />} />\r\n      </Routes>\r\n    </BrowserRouter>\r\n  )\r\n}\r\n","import { BackgroundImageSrcMap } from '@patternfly/react-core'\r\nimport hawtioLogo from './hawtio-logo.svg'\r\nimport userAvatar from './img_avatar.svg'\r\nimport backgroundImageSrcLg from './pfbg_1200.jpg'\r\nimport backgroundImageSrcXs from './pfbg_576.jpg'\r\nimport backgroundImageSrcXs2x from './pfbg_576@2x.jpg'\r\nimport backgroundImageSrcSm from './pfbg_768.jpg'\r\nimport backgroundImageSrcSm2x from './pfbg_768@2x.jpg'\r\n\r\nexport const backgroundImages: BackgroundImageSrcMap = {\r\n  xs: backgroundImageSrcXs,\r\n  xs2x: backgroundImageSrcXs2x,\r\n  sm: backgroundImageSrcSm,\r\n  sm2x: backgroundImageSrcSm2x,\r\n  lg: backgroundImageSrcLg,\r\n}\r\n\r\nexport { hawtioLogo, userAvatar }\r\n","import { useUser } from '@hawtiosrc/auth/hooks'\r\nimport { DEFAULT_APP_NAME, DEFAULT_LOGIN_TITLE, useHawtconfig, usePlugins } from '@hawtiosrc/core'\r\nimport { backgroundImages, hawtioLogo } from '@hawtiosrc/img'\r\nimport { ListItem, ListVariant, LoginFooterItem, LoginPage } from '@patternfly/react-core'\r\nimport React from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { HawtioNotification } from '../notification'\r\nimport { HawtioLoadingPage } from '../page/HawtioLoadingPage'\r\nimport { HawtioLoginForm } from './HawtioLoginForm'\r\nimport { log } from './globals'\r\n\r\nexport const HawtioLogin: React.FunctionComponent = () => {\r\n  const navigate = useNavigate()\r\n\r\n  const { isLogin, userLoaded } = useUser()\r\n  const { hawtconfig, hawtconfigLoaded } = useHawtconfig()\r\n  const { plugins, pluginsLoaded } = usePlugins()\r\n\r\n  if (!userLoaded || !hawtconfigLoaded || !pluginsLoaded) {\r\n    log.debug('Loading:', 'user =', userLoaded, ', hawtconfig =', hawtconfigLoaded, ', pluginsLoaded =', pluginsLoaded)\r\n    return <HawtioLoadingPage />\r\n  }\r\n\r\n  if (isLogin) {\r\n    navigate('/')\r\n  }\r\n\r\n  let loginForm = <HawtioLoginForm />\r\n  const loginPlugins = plugins.filter(plugin => plugin.isLogin)\r\n  log.debug('Discovered Login Plugins:', loginPlugins.length)\r\n\r\n  if (loginPlugins.length > 0) {\r\n    log.debug('Found Login Plugins ... Customising the Login Page')\r\n\r\n    const loginPlugin = loginPlugins[0]\r\n    const component = loginPlugin?.component\r\n    if (component) {\r\n      log.debug('Building with customised login form component')\r\n      loginForm = React.createElement(component)\r\n    }\r\n  }\r\n\r\n  const appLogo = hawtconfig.branding?.appLogoUrl ?? hawtioLogo\r\n  const appName = hawtconfig.branding?.appName ?? DEFAULT_APP_NAME\r\n  const description = hawtconfig.login?.description ?? ''\r\n  const links = hawtconfig.login?.links ?? []\r\n  const title = hawtconfig.login?.title ?? DEFAULT_LOGIN_TITLE\r\n\r\n  const footerLinks = (\r\n    <React.Fragment>\r\n      {links.map((link, index) => (\r\n        <ListItem key={`footer-link-${index}`}>\r\n          <LoginFooterItem href={link.url}>{link.text}</LoginFooterItem>\r\n        </ListItem>\r\n      ))}\r\n    </React.Fragment>\r\n  )\r\n\r\n  return (\r\n    <LoginPage\r\n      backgroundImgSrc={backgroundImages}\r\n      brandImgSrc={appLogo}\r\n      brandImgAlt={appName}\r\n      loginTitle={title}\r\n      textContent={description}\r\n      footerListItems={footerLinks}\r\n      footerListVariants={ListVariant.inline}\r\n    >\r\n      {loginForm}\r\n      <HawtioNotification />\r\n    </LoginPage>\r\n  )\r\n}\r\n","import { eventService, EVENT_NOTIFY, Notification, NotificationType } from '@hawtiosrc/core'\r\nimport { Alert, AlertActionCloseButton, AlertGroup, AlertProps } from '@patternfly/react-core'\r\nimport React, { useEffect, useState } from 'react'\r\n\r\nconst MAX_ALERTS_TO_DISPLAY = 5\r\n\r\nexport const HawtioNotification: React.FunctionComponent = () => {\r\n  const [alerts, setAlerts] = useState<Partial<AlertProps>[]>([])\r\n  const [overflowMessage, setOverflowMessage] = useState('')\r\n  const [maxDisplayed, setMaxDisplayed] = useState(MAX_ALERTS_TO_DISPLAY)\r\n\r\n  const getOverflowMessage = (alertsNumber: number) => {\r\n    const overflow = alertsNumber - maxDisplayed\r\n    return overflow > 0 ? `View ${overflow} more alerts` : ''\r\n  }\r\n\r\n  const addAlert = (title: string, variant: NotificationType, key: React.Key) => {\r\n    const newAlerts = [...alerts, { title, variant, key }]\r\n    setAlerts(newAlerts)\r\n    setOverflowMessage(getOverflowMessage(newAlerts.length))\r\n    // reset max displayed every time a new alert is added\r\n    setMaxDisplayed(MAX_ALERTS_TO_DISPLAY)\r\n  }\r\n\r\n  const removeAlert = (key: React.Key) => {\r\n    const newAlerts = alerts.filter(alert => alert.key !== key)\r\n    setAlerts(newAlerts)\r\n    setOverflowMessage(getOverflowMessage(newAlerts.length))\r\n    // reset max displayed every time an alert is removed\r\n    setMaxDisplayed(MAX_ALERTS_TO_DISPLAY)\r\n  }\r\n\r\n  const getUniqueKey = () => new Date().getTime()\r\n\r\n  useEffect(() => {\r\n    const listener = (notification: Notification) => {\r\n      const key = getUniqueKey()\r\n      addAlert(notification.message, notification.type, key)\r\n      if (notification.duration) {\r\n        setTimeout(() => {\r\n          removeAlert(key)\r\n        }, notification.duration)\r\n      }\r\n    }\r\n    eventService.onNotify(listener)\r\n\r\n    return () => eventService.removeListener(EVENT_NOTIFY, listener)\r\n    // TODO: better way to ensure one listener registration per rendering\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n\r\n  const onOverflowClick = () => {\r\n    setMaxDisplayed(alerts.length)\r\n    setOverflowMessage('')\r\n  }\r\n\r\n  return (\r\n    <AlertGroup isToast isLiveRegion onOverflowClick={onOverflowClick} overflowMessage={overflowMessage}>\r\n      {alerts.slice(0, maxDisplayed).map(({ key, variant, title }) => (\r\n        <Alert\r\n          variant={variant}\r\n          title={title}\r\n          actionClose={\r\n            <AlertActionCloseButton\r\n              title={title as string}\r\n              variantLabel={`${variant} alert`}\r\n              onClose={() => key && removeAlert(key)}\r\n            />\r\n          }\r\n          key={key}\r\n        />\r\n      ))}\r\n    </AlertGroup>\r\n  )\r\n}\r\n","import { Bullseye, Page, Spinner, Text, TextContent, TextVariants } from '@patternfly/react-core'\r\nimport React from 'react'\r\n\r\nexport const HawtioLoadingPage: React.FunctionComponent = () => (\r\n  <Page>\r\n    <Bullseye>\r\n      <div style={{ justifyContent: 'center' }}>\r\n        <Spinner diameter='60px' isSVG aria-label='Loading Hawtio' />\r\n\r\n        <TextContent>\r\n          <Text className={'--pf-global--Color--200'} component={TextVariants.h3}>\r\n            Loading ...\r\n          </Text>\r\n        </TextContent>\r\n      </div>\r\n    </Bullseye>\r\n  </Page>\r\n)\r\n","export function formatTimestamp(date: Date, millis = false): string {\r\n  const padZero = (n: number, len = 2) => String(n).padStart(len, '0')\r\n\r\n  const year = date.getFullYear()\r\n  const month = padZero(date.getMonth() + 1)\r\n  const day = padZero(date.getDate())\r\n  const hours = padZero(date.getHours())\r\n  const minutes = padZero(date.getMinutes())\r\n  const seconds = padZero(date.getSeconds())\r\n  if (!millis) {\r\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`\r\n  }\r\n  const milliseconds = padZero(date.getMilliseconds(), 3)\r\n  return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}.${milliseconds}`\r\n}\r\n\r\nexport function humanizeSeconds(seconds: number): string {\r\n  const humanize = (n: number, unit: string) => {\r\n    const fixed = Number.isInteger(n) ? n : n.toFixed(1)\r\n    return `${fixed} ${unit}` + (n === 1 ? '' : 's')\r\n  }\r\n  if (seconds < 60) {\r\n    return humanize(seconds, 'second')\r\n  }\r\n  if (seconds < 60 * 60) {\r\n    return humanize(seconds / 60, 'minute')\r\n  }\r\n  if (seconds < 60 * 60 * 24) {\r\n    return humanize(seconds / (60 * 60), 'hour')\r\n  }\r\n  return humanize(seconds / (60 * 60 * 24), 'day')\r\n}\r\n","import { useUser } from '@hawtiosrc/auth/hooks'\r\nimport { humanizeSeconds } from '@hawtiosrc/util/dates'\r\nimport { LoginForm, LoginFormProps } from '@patternfly/react-core'\r\nimport { ExclamationCircleIcon } from '@patternfly/react-icons'\r\nimport React, { useState } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { log } from './globals'\r\nimport { loginService } from './login-service'\r\n\r\nexport const HawtioLoginForm: React.FunctionComponent = () => {\r\n  const navigate = useNavigate()\r\n\r\n  const { isLogin } = useUser()\r\n  const [username, setUsername] = useState(loginService.getUser())\r\n  const [isValidUsername, setIsValidUsername] = useState(true)\r\n  const [password, setPassword] = useState('')\r\n  const [isValidPassword, setIsValidPassword] = useState(true)\r\n  const [rememberMe, setRememberMe] = useState(username !== '')\r\n  const [loginFailed, setLoginFailed] = useState(false)\r\n  const [loginFailedMessage, setLoginFailedMessage] = useState('')\r\n  const [isEnabled, setIsEnabled] = useState(true)\r\n\r\n  log.debug('Login state: username =', username, 'isLogin =', isLogin)\r\n\r\n  const reset = () => {\r\n    setIsValidUsername(true)\r\n    setIsValidPassword(true)\r\n    setLoginFailed(false)\r\n    setLoginFailedMessage('')\r\n    setIsEnabled(true)\r\n  }\r\n\r\n  const doLogin: LoginFormProps['onLoginButtonClick'] = event => {\r\n    event.preventDefault()\r\n    reset()\r\n    let invalid = false\r\n    if (username.trim() === '') {\r\n      setIsValidUsername(false)\r\n      setLoginFailed(true)\r\n      invalid = true\r\n    }\r\n    if (password === '') {\r\n      setIsValidPassword(false)\r\n      setLoginFailed(true)\r\n      invalid = true\r\n    }\r\n    if (invalid) {\r\n      setLoginFailedMessage('Username/password should not be empty')\r\n      return\r\n    }\r\n\r\n    loginService.login(username, password, rememberMe).then(result => {\r\n      switch (result.type) {\r\n        case 'success':\r\n          navigate('/')\r\n          // Reload page to force initialising Jolokia service\r\n          navigate(0)\r\n          break\r\n        case 'failure':\r\n          setLoginFailed(true)\r\n          setLoginFailedMessage('Invalid login credentials')\r\n          setIsValidUsername(false)\r\n          setIsValidPassword(false)\r\n          break\r\n        case 'throttled': {\r\n          const { retryAfter } = result\r\n          setLoginFailed(true)\r\n          setLoginFailedMessage(`Login attempt blocked. Retry after ${humanizeSeconds(retryAfter)}`)\r\n          setIsValidUsername(false)\r\n          setIsValidPassword(false)\r\n          setIsEnabled(false)\r\n          setTimeout(reset, retryAfter * 1000)\r\n          break\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  const rememberMeLabel = 'Remember username'\r\n\r\n  return (\r\n    <LoginForm\r\n      showHelperText={loginFailed}\r\n      helperText={loginFailedMessage}\r\n      helperTextIcon={<ExclamationCircleIcon />}\r\n      usernameLabel='Username'\r\n      usernameValue={username}\r\n      onChangeUsername={setUsername}\r\n      isValidUsername={isValidUsername}\r\n      passwordLabel='Password'\r\n      passwordValue={password}\r\n      onChangePassword={setPassword}\r\n      isValidPassword={isValidPassword}\r\n      rememberMeLabel={rememberMeLabel}\r\n      isRememberMeChecked={rememberMe}\r\n      onChangeRememberMe={() => setRememberMe(!rememberMe)}\r\n      onLoginButtonClick={doLogin}\r\n      loginButtonLabel='Log in'\r\n      isLoginButtonDisabled={!isEnabled}\r\n    />\r\n  )\r\n}\r\n","/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n  return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose;\n    if (async) {\n        if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n        dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n        if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n        dispose = value[Symbol.dispose];\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  function next() {\n    while (env.stack.length) {\n      var rec = env.stack.pop();\n      try {\n        var result = rec.dispose && rec.dispose.call(rec.value);\n        if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n      }\n      catch (e) {\n          fail(e);\n      }\n    }\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n};\n","import * as React from 'react';\n\nexport enum IconSize {\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl'\n}\n\nexport const getSize = (size: IconSize | keyof typeof IconSize) => {\n  switch (size) {\n    case IconSize.sm:\n      return '1em';\n    case IconSize.md:\n      return '1.5em';\n    case IconSize.lg:\n      return '2em';\n    case IconSize.xl:\n      return '3em';\n    default:\n      return '1em';\n  }\n};\n\nexport interface IconDefinition {\n  name?: string;\n  width: number;\n  height: number;\n  svgPath: string;\n  xOffset?: number;\n  yOffset?: number;\n}\n\nexport interface SVGIconProps extends Omit<React.HTMLProps<SVGElement>, 'size' | 'ref'> {\n  color?: string;\n  size?: IconSize | keyof typeof IconSize;\n  title?: string;\n  noVerticalAlign?: boolean;\n}\n\nlet currentId = 0;\n\n/**\n * Factory to create Icon class components for consumers\n */\nexport function createIcon({\n  name,\n  xOffset = 0,\n  yOffset = 0,\n  width,\n  height,\n  svgPath\n}: IconDefinition): React.ComponentClass<SVGIconProps> {\n  return class SVGIcon extends React.Component<SVGIconProps> {\n    static displayName = name;\n    static defaultProps = {\n      color: 'currentColor',\n      size: IconSize.sm,\n      noVerticalAlign: false\n    };\n\n    id = `icon-title-${currentId++}`;\n\n    render() {\n      const { size, color, title, noVerticalAlign, ...props } = this.props;\n\n      const hasTitle = Boolean(title);\n      const heightWidth = getSize(size);\n      const baseAlign = -0.125 * Number.parseFloat(heightWidth);\n      const style = noVerticalAlign ? null : { verticalAlign: `${baseAlign}em` };\n      const viewBox = [xOffset, yOffset, width, height].join(' ');\n\n      return (\n        <svg\n          style={style}\n          fill={color}\n          height={heightWidth}\n          width={heightWidth}\n          viewBox={viewBox}\n          aria-labelledby={hasTitle ? this.id : null}\n          aria-hidden={hasTitle ? null : true}\n          role=\"img\"\n          {...(props as Omit<React.SVGProps<SVGElement>, 'ref'>)} // Lie.\n        >\n          {hasTitle && <title id={this.id}>{title}</title>}\n          <path d={svgPath} />\n        </svg>\n      );\n    }\n  };\n}\n","import { createIcon } from '../createIcon';\n\nexport const AsleepIconConfig = {\n  name: 'AsleepIcon',\n  height: 1024,\n  width: 1024,\n  svgPath: 'M512,128 C300.2,128 128,300.3 128,512 C128,723.9 300.2,896 512,896 C723.8,896 896,723.8 896,512 C896,300.2 723.7,128 512,128 M512.1,1024 C229.8,1024 0,794.3 0,512 C0,229.7 229.7,0 512.1,0 C794.5,0 1024,229.7 1024,512 C1024,794.3 794.4,1024 512.1,1024 M744.1,619.2 C723.2,664.3 691.733333,700.333333 649.7,727.3 C607.666667,754.266667 561.766667,767.766667 512,767.801349 C477.880448,767.912684 444.106349,760.967204 412.8,747.4 C381.4,733.8 354,715.7 331,692.7 C308,669.7 289.9,642.6 276.3,611.1 C262.774308,579.78407 255.863244,546.011774 255.998009,511.9 C255.891693,478.450317 262.417551,445.311196 275.2,414.4 C288,383.4 305.333333,356.566667 327.2,333.9 C349.066667,311.233333 375.233333,292.966667 405.7,279.1 C436.09495,265.229747 468.913253,257.449838 502.3,256.2 C512,255.8 523.3,262.3 527.1,271.4 C531.1,280.5 531.7,290.8 524.3,297.7 C505.1,315 488.3,335.2 478.2,358.2 C468.1,381.2 460.8,403.2 460.8,428.7 C460.8,461.6 466.7,489.6 482.9,517.4 C498.746034,544.796001 521.503999,567.553966 548.9,583.4 C576.6,599.6 607,607.7 639.9,607.7 C666.146645,607.723074 692.070807,601.916608 715.8,590.7 C724.9,586.7 732.9,588.1 739.8,595 C742.843305,598.084991 744.867601,602.02888 745.6,606.3 C746.409483,610.652973 745.8867,615.148908 744.1,619.2',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const AsleepIcon = createIcon(AsleepIconConfig);\n\nexport default AsleepIcon;","import { createIcon } from '../createIcon';\n\nexport const BanIconConfig = {\n  name: 'BanIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M256 8C119.034 8 8 119.033 8 256s111.034 248 248 248 248-111.034 248-248S392.967 8 256 8zm130.108 117.892c65.448 65.448 70 165.481 20.677 235.637L150.47 105.216c70.204-49.356 170.226-44.735 235.638 20.676zM125.892 386.108c-65.448-65.448-70-165.481-20.677-235.637L361.53 406.784c-70.203 49.356-170.226 44.736-235.638-20.676z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const BanIcon = createIcon(BanIconConfig);\n\nexport default BanIcon;","import { createIcon } from '../createIcon';\n\nexport const BarsIconConfig = {\n  name: 'BarsIcon',\n  height: 512,\n  width: 448,\n  svgPath: 'M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const BarsIcon = createIcon(BarsIconConfig);\n\nexport default BarsIcon;","import { createIcon } from '../createIcon';\n\nexport const CheckCircleIconConfig = {\n  name: 'CheckCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const CheckCircleIcon = createIcon(CheckCircleIconConfig);\n\nexport default CheckCircleIcon;","import { createIcon } from '../createIcon';\n\nexport const CubeIconConfig = {\n  name: 'CubeIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M239.1 6.3l-208 78c-18.7 7-31.1 25-31.1 45v225.1c0 18.2 10.3 34.8 26.5 42.9l208 104c13.5 6.8 29.4 6.8 42.9 0l208-104c16.3-8.1 26.5-24.8 26.5-42.9V129.3c0-20-12.4-37.9-31.1-44.9l-208-78C262 2.2 250 2.2 239.1 6.3zM256 68.4l192 72v1.1l-192 78-192-78v-1.1l192-72zm32 356V275.5l160-65v133.9l-160 80z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const CubeIcon = createIcon(CubeIconConfig);\n\nexport default CubeIcon;","import { createIcon } from '../createIcon';\n\nexport const CubesIconConfig = {\n  name: 'CubesIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M488.6 250.2L392 214V105.5c0-15-9.3-28.4-23.4-33.7l-100-37.5c-8.1-3.1-17.1-3.1-25.3 0l-100 37.5c-14.1 5.3-23.4 18.7-23.4 33.7V214l-96.6 36.2C9.3 255.5 0 268.9 0 283.9V394c0 13.6 7.7 26.1 19.9 32.2l100 50c10.1 5.1 22.1 5.1 32.2 0l103.9-52 103.9 52c10.1 5.1 22.1 5.1 32.2 0l100-50c12.2-6.1 19.9-18.6 19.9-32.2V283.9c0-15-9.3-28.4-23.4-33.7zM358 214.8l-85 31.9v-68.2l85-37v73.3zM154 104.1l102-38.2 102 38.2v.6l-102 41.4-102-41.4v-.6zm84 291.1l-85 42.5v-79.1l85-38.8v75.4zm0-112l-102 41.4-102-41.4v-.6l102-38.2 102 38.2v.6zm240 112l-85 42.5v-79.1l85-38.8v75.4zm0-112l-102 41.4-102-41.4v-.6l102-38.2 102 38.2v.6z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const CubesIcon = createIcon(CubesIconConfig);\n\nexport default CubesIcon;","import { createIcon } from '../createIcon';\n\nexport const ExclamationCircleIconConfig = {\n  name: 'ExclamationCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const ExclamationCircleIcon = createIcon(ExclamationCircleIconConfig);\n\nexport default ExclamationCircleIcon;","import { createIcon } from '../createIcon';\n\nexport const ExclamationTriangleIconConfig = {\n  name: 'ExclamationTriangleIcon',\n  height: 512,\n  width: 576,\n  svgPath: 'M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const ExclamationTriangleIcon = createIcon(ExclamationTriangleIconConfig);\n\nexport default ExclamationTriangleIcon;","import { createIcon } from '../createIcon';\n\nexport const FolderIconConfig = {\n  name: 'FolderIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M464 128H272l-64-64H48C21.49 64 0 85.49 0 112v288c0 26.51 21.49 48 48 48h416c26.51 0 48-21.49 48-48V176c0-26.51-21.49-48-48-48z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const FolderIcon = createIcon(FolderIconConfig);\n\nexport default FolderIcon;","import { createIcon } from '../createIcon';\n\nexport const FolderOpenIconConfig = {\n  name: 'FolderOpenIcon',\n  height: 512,\n  width: 576,\n  svgPath: 'M572.694 292.093L500.27 416.248A63.997 63.997 0 0 1 444.989 448H45.025c-18.523 0-30.064-20.093-20.731-36.093l72.424-124.155A64 64 0 0 1 152 256h399.964c18.523 0 30.064 20.093 20.73 36.093zM152 224h328v-48c0-26.51-21.49-48-48-48H272l-64-64H48C21.49 64 0 85.49 0 112v278.046l69.077-118.418C86.214 242.25 117.989 224 152 224z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const FolderOpenIcon = createIcon(FolderOpenIconConfig);\n\nexport default FolderOpenIcon;","import { createIcon } from '../createIcon';\n\nexport const HelpIconConfig = {\n  name: 'HelpIcon',\n  height: 1024,\n  width: 1024,\n  svgPath: 'M521.3,576 C627.5,576 713.7,502 713.7,413.7 C713.7,325.4 627.6,253.6 521.3,253.6 C366,253.6 334.5,337.7 329.2,407.2 C329.2,414.3 335.2,416 343.5,416 L445,416 C450.5,416 458,415.5 460.8,406.5 C460.8,362.6 582.9,357.1 582.9,413.6 C582.9,441.9 556.2,470.9 521.3,473 C486.4,475.1 447.3,479.8 447.3,521.7 L447.3,553.8 C447.3,570.8 456.1,576 472,576 C487.9,576 521.3,576 521.3,576 M575.3,751.3 L575.3,655.3 C575.313862,651.055109 573.620137,646.982962 570.6,644 C567.638831,640.947672 563.552355,639.247987 559.3,639.29884 L463.3,639.29884 C459.055109,639.286138 454.982962,640.979863 452,644 C448.947672,646.961169 447.247987,651.047645 447.29884,655.3 L447.29884,751.3 C447.286138,755.544891 448.979863,759.617038 452,762.6 C454.961169,765.652328 459.047645,767.352013 463.3,767.30116 L559.3,767.30116 C563.544891,767.313862 567.617038,765.620137 570.6,762.6 C573.659349,759.643612 575.360354,755.553963 575.3,751.3 M512,896 C300.2,896 128,723.9 128,512 C128,300.3 300.2,128 512,128 C723.8,128 896,300.2 896,512 C896,723.8 723.7,896 512,896 M512.1,0 C229.7,0 0,229.8 0,512 C0,794.2 229.8,1024 512.1,1024 C794.4,1024 1024,794.3 1024,512 C1024,229.7 794.4,0 512.1,0',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const HelpIcon = createIcon(HelpIconConfig);\n\nexport default HelpIcon;","import { createIcon } from '../createIcon';\n\nexport const InfoCircleIconConfig = {\n  name: 'InfoCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const InfoCircleIcon = createIcon(InfoCircleIconConfig);\n\nexport default InfoCircleIcon;","import { createIcon } from '../createIcon';\n\nexport const LockIconConfig = {\n  name: 'LockIcon',\n  height: 512,\n  width: 448,\n  svgPath: 'M400 224h-24v-72C376 68.2 307.8 0 224 0S72 68.2 72 152v72H48c-26.5 0-48 21.5-48 48v192c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V272c0-26.5-21.5-48-48-48zm-104 0H152v-72c0-39.7 32.3-72 72-72s72 32.3 72 72v72z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const LockIcon = createIcon(LockIconConfig);\n\nexport default LockIcon;","import { createIcon } from '../createIcon';\n\nexport const LongArrowAltDownIconConfig = {\n  name: 'LongArrowAltDownIcon',\n  height: 512,\n  width: 256,\n  svgPath: 'M168 345.941V44c0-6.627-5.373-12-12-12h-56c-6.627 0-12 5.373-12 12v301.941H41.941c-21.382 0-32.09 25.851-16.971 40.971l86.059 86.059c9.373 9.373 24.569 9.373 33.941 0l86.059-86.059c15.119-15.119 4.411-40.971-16.971-40.971H168z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const LongArrowAltDownIcon = createIcon(LongArrowAltDownIconConfig);\n\nexport default LongArrowAltDownIcon;","import { createIcon } from '../createIcon';\n\nexport const MinusIconConfig = {\n  name: 'MinusIcon',\n  height: 512,\n  width: 448,\n  svgPath: 'M416 208H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h384c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const MinusIcon = createIcon(MinusIconConfig);\n\nexport default MinusIcon;","import { createIcon } from '../createIcon';\n\nexport const OutlinedQuestionCircleIconConfig = {\n  name: 'OutlinedQuestionCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 448c-110.532 0-200-89.431-200-200 0-110.495 89.472-200 200-200 110.491 0 200 89.471 200 200 0 110.53-89.431 200-200 200zm107.244-255.2c0 67.052-72.421 68.084-72.421 92.863V300c0 6.627-5.373 12-12 12h-45.647c-6.627 0-12-5.373-12-12v-8.659c0-35.745 27.1-50.034 47.579-61.516 17.561-9.845 28.324-16.541 28.324-29.579 0-17.246-21.999-28.693-39.784-28.693-23.189 0-33.894 10.977-48.942 29.969-4.057 5.12-11.46 6.071-16.666 2.124l-27.824-21.098c-5.107-3.872-6.251-11.066-2.644-16.363C184.846 131.491 214.94 112 261.794 112c49.071 0 101.45 38.304 101.45 88.8zM298 368c0 23.159-18.841 42-42 42s-42-18.841-42-42 18.841-42 42-42 42 18.841 42 42z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const OutlinedQuestionCircleIcon = createIcon(OutlinedQuestionCircleIconConfig);\n\nexport default OutlinedQuestionCircleIcon;","import { createIcon } from '../createIcon';\n\nexport const PauseCircleIconConfig = {\n  name: 'PauseCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm-16 328c0 8.8-7.2 16-16 16h-48c-8.8 0-16-7.2-16-16V176c0-8.8 7.2-16 16-16h48c8.8 0 16 7.2 16 16v160zm112 0c0 8.8-7.2 16-16 16h-48c-8.8 0-16-7.2-16-16V176c0-8.8 7.2-16 16-16h48c8.8 0 16 7.2 16 16v160z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const PauseCircleIcon = createIcon(PauseCircleIconConfig);\n\nexport default PauseCircleIcon;","import { createIcon } from '../createIcon';\n\nexport const PlayIconConfig = {\n  name: 'PlayIcon',\n  height: 512,\n  width: 448,\n  svgPath: 'M424.4 214.7L72.4 6.6C43.8-10.3 0 6.1 0 47.9V464c0 37.5 40.7 60.1 72.4 41.3l352-208c31.4-18.5 31.5-64.1 0-82.6z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const PlayIcon = createIcon(PlayIconConfig);\n\nexport default PlayIcon;","import { createIcon } from '../createIcon';\n\nexport const PluggedIconConfig = {\n  name: 'PluggedIcon',\n  height: 1024,\n  width: 704,\n  svgPath: 'M64,448 C73.8,555.7 76.7,807.9 256,850.2 L256,1024 L448,1024 L448,851.6 C627.2,807.9 626,603.2 640,448 L64,448 Z M576,256 L576,32.2 C576,14.5 561.6,0.1 543.8,0.2 L479.8,0.5 C462.2,0.6 448,14.9 448,32.5 L448,256 L256,256 L256,32 C256,14.3 241.7,0 224,0 L160,0 C142.3,0 128,14.3 128,32 L128,256 L0,256 L0,384 L704,384 L704,256 L576,256 Z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const PluggedIcon = createIcon(PluggedIconConfig);\n\nexport default PluggedIcon;","import { createIcon } from '../createIcon';\n\nexport const PlusCircleIconConfig = {\n  name: 'PlusCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm144 276c0 6.6-5.4 12-12 12h-92v92c0 6.6-5.4 12-12 12h-56c-6.6 0-12-5.4-12-12v-92h-92c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h92v-92c0-6.6 5.4-12 12-12h56c6.6 0 12 5.4 12 12v92h92c6.6 0 12 5.4 12 12v56z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const PlusCircleIcon = createIcon(PlusCircleIconConfig);\n\nexport default PlusCircleIcon;","import { createIcon } from '../createIcon';\n\nexport const PlusIconConfig = {\n  name: 'PlusIcon',\n  height: 512,\n  width: 448,\n  svgPath: 'M416 208H272V64c0-17.67-14.33-32-32-32h-32c-17.67 0-32 14.33-32 32v144H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h144v144c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32V304h144c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const PlusIcon = createIcon(PlusIconConfig);\n\nexport default PlusIcon;","import { createIcon } from '../createIcon';\n\nexport const QuestionCircleIconConfig = {\n  name: 'QuestionCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zM262.655 90c-54.497 0-89.255 22.957-116.549 63.758-3.536 5.286-2.353 12.415 2.715 16.258l34.699 26.31c5.205 3.947 12.621 3.008 16.665-2.122 17.864-22.658 30.113-35.797 57.303-35.797 20.429 0 45.698 13.148 45.698 32.958 0 14.976-12.363 22.667-32.534 33.976C247.128 238.528 216 254.941 216 296v4c0 6.627 5.373 12 12 12h56c6.627 0 12-5.373 12-12v-1.333c0-28.462 83.186-29.647 83.186-106.667 0-58.002-60.165-102-116.531-102zM256 338c-25.365 0-46 20.635-46 46 0 25.364 20.635 46 46 46s46-20.636 46-46c0-25.365-20.635-46-46-46z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const QuestionCircleIcon = createIcon(QuestionCircleIconConfig);\n\nexport default QuestionCircleIcon;","import { createIcon } from '../createIcon';\n\nexport const RedoIconConfig = {\n  name: 'RedoIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M500.33 0h-47.41a12 12 0 0 0-12 12.57l4 82.76A247.42 247.42 0 0 0 256 8C119.34 8 7.9 119.53 8 256.19 8.1 393.07 119.1 504 256 504a247.1 247.1 0 0 0 166.18-63.91 12 12 0 0 0 .48-17.43l-34-34a12 12 0 0 0-16.38-.55A176 176 0 1 1 402.1 157.8l-101.53-4.87a12 12 0 0 0-12.57 12v47.41a12 12 0 0 0 12 12h200.33a12 12 0 0 0 12-12V12a12 12 0 0 0-12-12z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const RedoIcon = createIcon(RedoIconConfig);\n\nexport default RedoIcon;","import { createIcon } from '../createIcon';\n\nexport const Remove2IconConfig = {\n  name: 'Remove2Icon',\n  height: 1024,\n  width: 896,\n  svgPath: 'M576,128 L576,0 L320,0 L320,128 L0,128 L0,320 L64,256 L832,256 L896,320 L896,128 L576,128 Z M512,128 L384,128 L384,64 L512,64 L512,128 Z M64,320 L128,1024 L731.4,1024 L832,320 L64,320 Z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const Remove2Icon = createIcon(Remove2IconConfig);\n\nexport default Remove2Icon;","import { createIcon } from '../createIcon';\n\nexport const SearchIconConfig = {\n  name: 'SearchIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const SearchIcon = createIcon(SearchIconConfig);\n\nexport default SearchIcon;","import { createIcon } from '../createIcon';\n\nexport const TimesCircleIconConfig = {\n  name: 'TimesCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const TimesCircleIcon = createIcon(TimesCircleIconConfig);\n\nexport default TimesCircleIcon;","import { createIcon } from '../createIcon';\n\nexport const TrashIconConfig = {\n  name: 'TrashIcon',\n  height: 512,\n  width: 448,\n  svgPath: 'M432 32H312l-9.4-18.7A24 24 0 0 0 281.1 0H166.8a23.72 23.72 0 0 0-21.4 13.3L136 32H16A16 16 0 0 0 0 48v32a16 16 0 0 0 16 16h416a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16zM53.2 467a48 48 0 0 0 47.9 45h245.8a48 48 0 0 0 47.9-45L416 128H32z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const TrashIcon = createIcon(TrashIconConfig);\n\nexport default TrashIcon;","import { createIcon } from '../createIcon';\n\nexport const TrendUpIconConfig = {\n  name: 'TrendUpIcon',\n  height: 1024,\n  width: 960,\n  svgPath: 'M960,224 C960,206.3 945.7,192 928,192 L480,192 C462.3,192 448,206.3 448,224 L448,288 C448,305.7 462.3,320 480,320 L741.5,320 L450.3,614.2 L343.7,507.2 C331.2,494.7 310.9,494.6 298.4,507.2 L9.4,796.2 C3.1,802.4 0,810.6 0,818.7 C0,826.9 3.1,835.1 9.4,841.3 L54.7,886.6 C60.9,892.8 69.1,896 77.3,896 C85.5,896 93.7,892.9 99.9,886.6 L320.9,665.6 L427.5,772.6 C440,785.1 460.3,785.2 472.8,772.6 L832,410.5 L831,672 C831,689.7 844.3,704 862,704 L926,704 C943.7,704 960,689.7 960,672 L960,224 Z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const TrendUpIcon = createIcon(TrendUpIconConfig);\n\nexport default TrendUpIcon;","import { createIcon } from '../createIcon';\n\nexport const UnpluggedIconConfig = {\n  name: 'UnpluggedIcon',\n  height: 1024,\n  width: 958,\n  svgPath: 'M346.935298,837.9 C358.136437,843 370.137658,847.099 383.038971,850.2 L383.038971,1024 L575.058507,1024 L575.058507,851.599 C754.276741,807.9 753.076619,603.2 767.078043,448 L736.874971,448 L346.935298,837.9 Z M944.096053,146.9 L81.9083335,1009 C72.507377,1018.4 60.3061356,1023 48.0048841,1023 C35.7036325,1023 23.5023912,1018.299 14.1014347,1009 C4.70047823,999.599 0,987.299 0,975 C0,962.7 4.70047823,950.5 14.0014245,941.099 L238.624278,716.5 C200.12036,625.2 196.720015,511.5 190.919424,448 L507.151598,448 L571.15811,384 L127.012922,384 L127.012922,256 L255.025947,256 L255.025947,32 C255.025947,14.299 269.327402,0 287.029203,0 L351.035715,0 C368.737516,0 383.038971,14.299 383.038971,32 L383.038971,256 L575.058507,256 L575.058507,32.5 C575.058507,14.9 589.259952,0.6 606.861743,0.5 L670.868255,0.2 C688.570056,0.1 703.071531,14.5 703.071531,32.2 L703.071531,252.2 L876.189145,79 C886.990243,68.2 901.791749,63.6 915.893184,65.299 C926.194232,66.5 936.095239,71.1 943.996043,79 C953.397,88.4 958,100.6 958,112.9 C958.097478,125.2 953.397,137.5 944.096053,146.9 L944.096053,146.9 Z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const UnpluggedIcon = createIcon(UnpluggedIconConfig);\n\nexport default UnpluggedIcon;","import { Logger } from '@hawtiosrc/core/logging'\r\n\r\nexport const log = Logger.get('hawtio-ui-login')\r\n","import { eventService } from '@hawtiosrc/core'\r\nimport { log } from './globals'\r\n\r\nconst PATH_LOGIN = 'auth/login'\r\n\r\nconst STORAGE_KEY_LOGIN = 'login'\r\n\r\nexport type LoginResult = { type: 'success' } | { type: 'failure' } | { type: 'throttled'; retryAfter: number }\r\n\r\nexport interface ILoginService {\r\n  login(username: string, password: string, remember: boolean): Promise<LoginResult>\r\n  getUser(): string\r\n  rememberUser(username: string): void\r\n  clearUser(): void\r\n}\r\n\r\nclass LoginService implements ILoginService {\r\n  async login(username: string, password: string, remember: boolean): Promise<LoginResult> {\r\n    try {\r\n      const res = await fetch(PATH_LOGIN, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ username, password }),\r\n      })\r\n      if (!res.ok) {\r\n        // Login failed\r\n        log.error('Login error:', res)\r\n        if (res.status === 429) {\r\n          // Login throttled\r\n          const retryAfter = parseInt(res.headers.get('Retry-After') ?? '0')\r\n          return { type: 'throttled', retryAfter }\r\n        }\r\n        return { type: 'failure' }\r\n      }\r\n\r\n      const data = await res.text()\r\n      log.debug('Server login success:', data)\r\n      if (remember) {\r\n        this.rememberUser(username)\r\n      } else {\r\n        this.clearUser()\r\n      }\r\n      return { type: 'success' }\r\n    } catch (err) {\r\n      // System error at login\r\n      log.error('Login error:', err)\r\n      eventService.notify({\r\n        type: 'danger',\r\n        message: `Login error: ${err}`,\r\n      })\r\n      return { type: 'failure' }\r\n    }\r\n  }\r\n\r\n  getUser(): string {\r\n    const login = localStorage.getItem(STORAGE_KEY_LOGIN)\r\n    if (!login) {\r\n      return ''\r\n    }\r\n    return JSON.parse(login).username ?? ''\r\n  }\r\n\r\n  rememberUser(username: string) {\r\n    localStorage.setItem(STORAGE_KEY_LOGIN, JSON.stringify({ username }))\r\n  }\r\n\r\n  clearUser() {\r\n    localStorage.removeItem(STORAGE_KEY_LOGIN)\r\n  }\r\n}\r\n\r\nexport const loginService = new LoginService()\r\n","import {\r\n  Card,\r\n  CardBody,\r\n  Nav,\r\n  NavItem,\r\n  NavList,\r\n  PageGroup,\r\n  PageNavigation,\r\n  PageSection,\r\n  PageSectionVariants,\r\n  TextContent,\r\n  Title,\r\n} from '@patternfly/react-core'\r\nimport React from 'react'\r\nimport Markdown from 'react-markdown'\r\nimport { NavLink, Navigate, Route, Routes, useLocation } from 'react-router-dom'\r\nimport help from './help.md'\r\nimport { helpRegistry } from './registry'\r\n\r\nhelpRegistry.add('home', 'Home', help, 1)\r\n\r\nexport const HawtioHelp: React.FunctionComponent = () => {\r\n  const location = useLocation()\r\n  return (\r\n    <React.Fragment>\r\n      <PageSection variant={PageSectionVariants.light}>\r\n        <Title headingLevel='h1'>Help</Title>\r\n      </PageSection>\r\n      <PageGroup>\r\n        <PageNavigation>\r\n          <Nav aria-label='Nav' variant='tertiary'>\r\n            <NavList>\r\n              {helpRegistry.getHelps().map(help => (\r\n                <NavItem key={help.id} isActive={location.pathname === `/help/${help.id}`}>\r\n                  <NavLink to={help.id}>{help.title}</NavLink>\r\n                </NavItem>\r\n              ))}\r\n            </NavList>\r\n          </Nav>\r\n        </PageNavigation>\r\n      </PageGroup>\r\n      <PageSection>\r\n        <Card isFullHeight>\r\n          <Routes>\r\n            {helpRegistry.getHelps().map(help => (\r\n              <Route\r\n                key={help.id}\r\n                path={help.id}\r\n                element={\r\n                  <CardBody>\r\n                    <TextContent>\r\n                      <Markdown>{help.content}</Markdown>\r\n                    </TextContent>\r\n                  </CardBody>\r\n                }\r\n              />\r\n            ))}\r\n            <Route path='/' element={<Navigate to='home' />} />\r\n          </Routes>\r\n        </Card>\r\n      </PageSection>\r\n    </React.Fragment>\r\n  )\r\n}\r\n","## Hawtio Help\r\n\r\nHawtio is a lightweight and modular Web console for managing Java and JVM applications.\r\n\r\n### Plugin help\r\n\r\nBrowse the available help topics for plugin specific documentation using the help navigation bar.\r\n\r\n### Further reading\r\n\r\n- [Hawtio](https://hawt.io 'Hawtio') website\r\n- Help improve Hawtio by [contributing](https://hawt.io/docs/contributing/)\r\n- Hawtio on [GitHub](https://github.com/hawtio/hawtio)\r\n","export type Help = {\r\n  id: string\r\n  title: string\r\n  content: string\r\n  order: number\r\n}\r\n\r\nclass HelpRegistry {\r\n  private helps: { [id: string]: Help } = {}\r\n\r\n  add(id: string, title: string, content: string, order = 100) {\r\n    if (this.helps[id]) {\r\n      throw new Error(`Help '${id}' already registered`)\r\n    }\r\n    this.helps[id] = { id, title, content, order }\r\n  }\r\n\r\n  getHelps(): Help[] {\r\n    return Object.values(this.helps).sort((a, b) => a.order - b.order)\r\n  }\r\n\r\n  reset() {\r\n    this.helps = {}\r\n  }\r\n}\r\n\r\nexport const helpRegistry = new HelpRegistry()\r\n","## Keycloak\r\n\r\nThe Keycloak plugin allows you to integrate Hawtio console with Keycloak authentication.\r\n","import { Logger } from '@hawtiosrc/core/logging'\r\n\r\nexport const log = Logger.get('hawtio-util')\r\n","import { log } from './globals'\r\n\r\nexport type FetchPathCallback<T> = {\r\n  success: (data: string) => T\r\n  error: () => T\r\n}\r\n\r\nexport async function fetchPath<T>(path: string, callback: FetchPathCallback<T>): Promise<T> {\r\n  try {\r\n    const res = await fetch(path)\r\n    if (!res.ok) {\r\n      log.error('Failed to fetch', path, ':', res.status, res.statusText)\r\n      return callback.error()\r\n    }\r\n\r\n    const data = await res.text()\r\n    return callback.success(data)\r\n  } catch (err) {\r\n    log.error('Failed to fetch', path, ':', err)\r\n    return callback.error()\r\n  }\r\n}\r\n","export function basicAuthHeaderValue(username: string, password: string): string {\r\n  const base64UserPass = window.btoa(`${username}:${password}`)\r\n  return `Basic ${base64UserPass}`\r\n}\r\n\r\nexport function getCookie(name: string): string | null {\r\n  if (name == null) {\r\n    return null\r\n  }\r\n  const cookies = document.cookie.split(';')\r\n  const cookie = cookies.map(cookie => cookie.split('=')).find(cookie => cookie.length > 1 && cookie[0] === name)\r\n  return cookie?.[1] ?? null\r\n}\r\n","import { userService } from '@hawtiosrc/auth'\r\nimport { ResolveUser } from '@hawtiosrc/auth/user-service'\r\nimport { fetchPath } from '@hawtiosrc/util/fetch'\r\nimport { basicAuthHeaderValue, getCookie } from '@hawtiosrc/util/https'\r\nimport $ from 'jquery'\r\nimport Keycloak, { KeycloakConfig, KeycloakInitOptions, KeycloakPkceMethod, KeycloakProfile } from 'keycloak-js'\r\nimport { UserProfile } from '../types'\r\nimport { PATH_KEYCLOAK_CLIENT_CONFIG, PATH_KEYCLOAK_ENABLED, PATH_KEYCLOAK_VALIDATE, log } from './globals'\r\n\r\nexport type KeycloakUserProfile = UserProfile & KeycloakProfile\r\n\r\nexport type HawtioKeycloakConfig = KeycloakConfig & {\r\n  /**\r\n   * Hawtio custom option to instruct whether to use JAAS authentication or not.\r\n   * Default: true\r\n   */\r\n  jaas?: boolean\r\n\r\n  /**\r\n   * The method for Proof Key Code Exchange (PKCE) to use.\r\n   * Configuring this value enables the PKCE mechanism. Available options:\r\n   * - \"S256\" - The SHA256 based PKCE method\r\n   */\r\n  pkceMethod?: KeycloakPkceMethod\r\n}\r\n\r\nexport const KEYCLOAK_TOKEN_MINIMUM_VALIDITY = 5 // 5 sec.\r\n\r\nexport interface IKeycloakService {\r\n  isKeycloakEnabled(): Promise<boolean>\r\n  registerUserHooks(): void\r\n  validateSubjectMatches(user: string): Promise<boolean>\r\n}\r\n\r\nclass KeycloakService implements IKeycloakService {\r\n  private readonly enabled: Promise<boolean>\r\n  private readonly config: Promise<HawtioKeycloakConfig | null>\r\n  private readonly keycloak: Promise<Keycloak | null>\r\n  private readonly userProfile: Promise<KeycloakUserProfile | null>\r\n\r\n  constructor() {\r\n    log.debug('Initialising Keycloak')\r\n    this.enabled = this.loadKeycloakEnabled()\r\n    this.config = this.loadKeycloakConfig()\r\n    this.keycloak = this.createKeycloak()\r\n    this.userProfile = this.loadUserProfile()\r\n  }\r\n\r\n  private loadKeycloakEnabled(): Promise<boolean> {\r\n    return fetchPath<boolean>(PATH_KEYCLOAK_ENABLED, {\r\n      success: (data: string) => {\r\n        // Enable Keycloak only when explicitly enabled\r\n        const enabled = data.trim() === 'true'\r\n        log.debug('Keycloak enabled:', enabled)\r\n        return enabled\r\n      },\r\n      error: () => false,\r\n    })\r\n  }\r\n\r\n  private async loadKeycloakConfig(): Promise<HawtioKeycloakConfig | null> {\r\n    const enabled = await this.enabled\r\n    if (!enabled) {\r\n      return null\r\n    }\r\n    return fetchPath<HawtioKeycloakConfig | null>(PATH_KEYCLOAK_CLIENT_CONFIG, {\r\n      success: (data: string) => {\r\n        log.debug('Loaded', PATH_KEYCLOAK_CLIENT_CONFIG, ':', data)\r\n        return JSON.parse(data)\r\n      },\r\n      error: () => null,\r\n    })\r\n  }\r\n\r\n  private async createKeycloak(): Promise<Keycloak | null> {\r\n    const enabled = await this.enabled\r\n    const config = await this.config\r\n    if (!enabled || !config) {\r\n      log.debug('Keycloak disabled')\r\n      return null\r\n    }\r\n\r\n    return new Keycloak(config)\r\n  }\r\n\r\n  private async loadUserProfile(): Promise<KeycloakUserProfile | null> {\r\n    const keycloak = await this.keycloak\r\n    if (!keycloak) {\r\n      return null\r\n    }\r\n\r\n    const initOptions = await this.getKeycloakInitOptions()\r\n    try {\r\n      const authenticated = await keycloak.init(initOptions)\r\n      log.debug('Initialised Keycloak: authenticated =', authenticated)\r\n      if (!authenticated) {\r\n        keycloak.login({ redirectUri: window.location.href })\r\n        return null\r\n      }\r\n\r\n      try {\r\n        const profile: KeycloakUserProfile = await keycloak.loadUserProfile()\r\n        log.debug('Loaded Keycloak profile:', profile)\r\n        profile.token = keycloak.token\r\n        return profile\r\n      } catch (error) {\r\n        log.error('Failed to load user profile:', error)\r\n      }\r\n    } catch (error) {\r\n      log.error('Failed to initialise Keycloak:', error)\r\n    }\r\n    return null\r\n  }\r\n\r\n  private async getKeycloakInitOptions(): Promise<KeycloakInitOptions> {\r\n    const config = await this.config\r\n    const pkceMethod = config?.pkceMethod\r\n    const initOptions: KeycloakInitOptions = {\r\n      onLoad: 'login-required',\r\n      pkceMethod,\r\n    }\r\n    return initOptions\r\n  }\r\n\r\n  isKeycloakEnabled(): Promise<boolean> {\r\n    return this.enabled\r\n  }\r\n\r\n  registerUserHooks() {\r\n    const fetchUser = async (resolve: ResolveUser) => {\r\n      const keycloak = await this.keycloak\r\n      const userProfile = await this.userProfile\r\n      if (!keycloak || !userProfile) {\r\n        return false\r\n      }\r\n\r\n      if (userProfile.username && userProfile.token) {\r\n        resolve({ username: userProfile.username, isLogin: true })\r\n        userService.setToken(userProfile.token)\r\n      }\r\n\r\n      this.setupJQueryAjax()\r\n      this.setupFetch()\r\n\r\n      return true\r\n    }\r\n    userService.addFetchUserHook('keycloak', fetchUser)\r\n\r\n    const logout = async () => {\r\n      const keycloak = await this.keycloak\r\n      if (!keycloak) {\r\n        return false\r\n      }\r\n\r\n      log.info('Log out Keycloak')\r\n      try {\r\n        await keycloak.logout()\r\n      } catch (error) {\r\n        log.error('Error logging out Keycloak:', error)\r\n      }\r\n      return true\r\n    }\r\n    userService.addLogoutHook('keycloak', logout)\r\n  }\r\n\r\n  private async setupJQueryAjax() {\r\n    const keycloak = await this.keycloak\r\n    const config = await this.config\r\n    if (!keycloak || !config) {\r\n      return\r\n    }\r\n\r\n    log.debug('Set authorization header to Keycloak token for AJAX requests')\r\n    const beforeSend = (xhr: JQueryXHR, settings: JQueryAjaxSettings) => {\r\n      const logPrefix = 'jQuery -'\r\n      if (!keycloak.authenticated || keycloak.isTokenExpired(KEYCLOAK_TOKEN_MINIMUM_VALIDITY)) {\r\n        log.debug(logPrefix, 'Try to update token for request:', settings.url)\r\n        this.updateToken(\r\n          token => {\r\n            if (token) {\r\n              log.debug(logPrefix, 'Keycloak token refreshed. Set new value to userService')\r\n              userService.setToken(token)\r\n            }\r\n            log.debug(logPrefix, 'Re-sending request after successfully updating Keycloak token:', settings.url)\r\n            $.ajax(settings)\r\n          },\r\n          () => {\r\n            log.debug(logPrefix, 'Logging out due to token update failed')\r\n            userService.logout()\r\n          },\r\n        )\r\n        return false\r\n      }\r\n\r\n      if (config.jaas) {\r\n        // Use BearerTokenLoginModule on server side\r\n        if (keycloak.profile && keycloak.profile.username && keycloak.token) {\r\n          const headerValue = basicAuthHeaderValue(keycloak.profile.username, keycloak.token)\r\n          xhr.setRequestHeader('Authorization', headerValue)\r\n        } else {\r\n          log.error(logPrefix, 'Keycloak username or token not found in JAAS mode:', keycloak.profile, keycloak.token)\r\n        }\r\n      } else {\r\n        // Otherwise, bearer token is used\r\n        xhr.setRequestHeader('Authorization', `Bearer ${keycloak.token}`)\r\n      }\r\n\r\n      // For CSRF protection with Spring Security\r\n      const token = getCookie('XSRF-TOKEN')\r\n      if (token) {\r\n        log.debug(logPrefix, 'Set XSRF token header from cookies')\r\n        xhr.setRequestHeader('X-XSRF-TOKEN', token)\r\n      }\r\n\r\n      return // To suppress ts(7030)\r\n    }\r\n    $.ajaxSetup({ beforeSend })\r\n  }\r\n\r\n  private async setupFetch() {\r\n    const keycloak = await this.keycloak\r\n    const config = await this.config\r\n    if (!keycloak || !config) {\r\n      return\r\n    }\r\n\r\n    log.debug('Intercept Fetch API to attach Keycloak token to authorization header')\r\n    const { fetch: originalFetch } = window\r\n    window.fetch = async (input: RequestInfo | URL, init?: RequestInit): Promise<Response> => {\r\n      const logPrefix = 'Fetch -'\r\n      log.debug(logPrefix, 'Fetch intercepted for Keycloak authentication')\r\n\r\n      if (!keycloak.authenticated || keycloak.isTokenExpired(KEYCLOAK_TOKEN_MINIMUM_VALIDITY)) {\r\n        log.debug(logPrefix, 'Try to update token for request:', input)\r\n        return new Promise((resolve, reject) => {\r\n          this.updateToken(\r\n            token => {\r\n              if (token) {\r\n                log.debug(logPrefix, 'Keycloak token refreshed. Set new value to userService')\r\n                userService.setToken(token)\r\n              }\r\n              log.debug(logPrefix, 'Re-sending request after successfully updating Keycloak token:', input)\r\n              resolve(fetch(input, init))\r\n            },\r\n            () => {\r\n              log.debug(logPrefix, 'Logging out due to token update failed')\r\n              userService.logout()\r\n              reject()\r\n            },\r\n          )\r\n        })\r\n      }\r\n\r\n      init = { ...init }\r\n\r\n      if (config.jaas) {\r\n        // Use BearerTokenLoginModule on server side\r\n        if (keycloak.profile && keycloak.profile.username && keycloak.token) {\r\n          init.headers = {\r\n            ...init.headers,\r\n            Authorization: basicAuthHeaderValue(keycloak.profile.username, keycloak.token),\r\n          }\r\n        } else {\r\n          log.error(logPrefix, 'Keycloak username or token not found in JAAS mode:', keycloak.profile, keycloak.token)\r\n        }\r\n      } else {\r\n        // Otherwise, bearer token is used\r\n        init.headers = {\r\n          ...init.headers,\r\n          Authorization: `Bearer ${keycloak.token}`,\r\n        }\r\n      }\r\n\r\n      // For CSRF protection with Spring Security\r\n      const token = getCookie('XSRF-TOKEN')\r\n      if (token) {\r\n        log.debug(logPrefix, 'Set XSRF token header from cookies')\r\n        init.headers = {\r\n          ...init.headers,\r\n          'X-XSRF-TOKEN': token,\r\n        }\r\n      }\r\n\r\n      return originalFetch(input, init)\r\n    }\r\n  }\r\n\r\n  private async updateToken(successFn: (token: string) => void, errorFn?: () => void) {\r\n    const keycloak = await this.keycloak\r\n    if (!keycloak) {\r\n      return\r\n    }\r\n\r\n    keycloak\r\n      .updateToken(KEYCLOAK_TOKEN_MINIMUM_VALIDITY)\r\n      .then(refreshed => {\r\n        if (refreshed) {\r\n          const token = keycloak.token\r\n          if (token) {\r\n            successFn(token)\r\n          }\r\n        } else {\r\n          log.debug('Token is still valid')\r\n        }\r\n      })\r\n      .catch(reason => {\r\n        log.error(\"Couldn't update token:\", reason)\r\n        errorFn?.()\r\n      })\r\n  }\r\n\r\n  // TODO: validate-subject-matches\r\n  validateSubjectMatches(user: string): Promise<boolean> {\r\n    const url = `${PATH_KEYCLOAK_VALIDATE}?keycloakUser=${encodeURIComponent(user)}`\r\n    return fetchPath<boolean>(url, {\r\n      success: (data: string) => {\r\n        log.debug('Got response for validate subject matches:', data)\r\n        return JSON.parse(data)\r\n      },\r\n      error: () => false,\r\n    })\r\n  }\r\n}\r\n\r\nexport const keycloakService = new KeycloakService()\r\n\r\n// Export non-exported definitions for testing\r\nexport const __testing__ = {\r\n  KeycloakService,\r\n}\r\n","import { Logger } from '@hawtiosrc/core/logging'\r\n\r\nexport const pluginName = 'hawtio-auth-keycloak'\r\n\r\nexport const log = Logger.get(pluginName)\r\n\r\nexport const PATH_KEYCLOAK_ENABLED = 'keycloak/enabled'\r\nexport const PATH_KEYCLOAK_CLIENT_CONFIG = 'keycloak/client-config'\r\nexport const PATH_KEYCLOAK_VALIDATE = 'keycloak/validate-subject-matches'\r\n","import { HawtioPlugin } from '@hawtiosrc/core'\r\nimport { helpRegistry } from '@hawtiosrc/help/registry'\r\nimport help from './help.md'\r\nimport { keycloakService } from './keycloak-service'\r\n\r\nexport const keycloak: HawtioPlugin = () => {\r\n  keycloakService.registerUserHooks()\r\n  helpRegistry.add('keycloak', 'Keycloak', help, 21)\r\n}\r\n","## OpenID Connect\r\n\r\nThe OIDC plugin allows you to integrate Hawtio console with generic OIDC provider.\r\n","import { ResolveUser, userService } from '@hawtiosrc/auth/user-service'\r\nimport { Logger } from '@hawtiosrc/core'\r\nimport { jwtDecode } from 'jwt-decode'\r\nimport * as oidc from 'oauth4webapi'\r\nimport { AuthorizationServer, Client, OAuth2Error } from 'oauth4webapi'\r\nimport { fetchPath } from '@hawtiosrc/util/fetch'\r\nimport $ from 'jquery'\r\nimport { getCookie } from '@hawtiosrc/util/https'\r\n\r\nconst pluginName = 'hawtio-oidc'\r\nconst log = Logger.get(pluginName)\r\n\r\nexport type OidcConfig = {\r\n  /** Provider type. If \"null\", then OIDC is not enabled */\r\n  method: 'oidc' | null\r\n\r\n  /** Provider URL. Should be the URL without \".well-known/openid-configuration\" */\r\n  provider: string\r\n\r\n  /** Unique Client ID for OIDC provider */\r\n  client_id: string\r\n\r\n  /** Response mode according to https://openid.net/specs/oauth-v2-multiple-response-types-1_0.html#ResponseModes */\r\n  response_mode: 'query' | 'fragment'\r\n\r\n  /** Scope used to obtain relevant access token from OIDC provider */\r\n  scope: string\r\n\r\n  /** Redirect URI passed with OIDC authorization request */\r\n  redirect_uri: string\r\n\r\n  /** PKCE method for Authorization grant, according to https://datatracker.ietf.org/doc/html/rfc7636#section-4.3 */\r\n  code_challenge_method: 'S256' | 'plain' | null\r\n\r\n  /** Prompt type according to https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest */\r\n  prompt: 'none' | 'login' | 'consent' | 'select_account' | null\r\n\r\n  'openid-configuration': oidc.AuthorizationServer\r\n}\r\n\r\nexport interface IOidcService {\r\n  registerUserHooks(): void\r\n}\r\n\r\nclass UserInfo {\r\n  user: string | null = null\r\n  access_token: string | null | undefined = null\r\n  refresh_token: string | null | undefined = null\r\n  at_exp: number = 0\r\n}\r\n\r\nexport class OidcService implements IOidcService {\r\n  // promises created during construction - should be already resolved in fetchUser\r\n  private readonly config: Promise<OidcConfig | null>\r\n  private readonly enabled: Promise<boolean>\r\n  private readonly oidcMetadata: Promise<AuthorizationServer | null>\r\n  private userInfo: Promise<UserInfo | null>\r\n  private originalFetch: (input: RequestInfo | URL, init?: RequestInit) => Promise<Response>\r\n\r\n  constructor() {\r\n    this.config = fetchPath<OidcConfig | null>('auth/config', {\r\n      success: (data: string) => {\r\n        try {\r\n          return JSON.parse(data)\r\n        } catch {\r\n          return null\r\n        }\r\n      },\r\n      error: () => null,\r\n    })\r\n\r\n    this.enabled = this.isOidcEnabled()\r\n    this.oidcMetadata = this.fetchOidcMetadata()\r\n    this.userInfo = this.initialize()\r\n    this.originalFetch = fetch\r\n  }\r\n\r\n  private async isOidcEnabled(): Promise<boolean> {\r\n    const cfg = await this.config\r\n    return cfg?.method === 'oidc' && cfg?.provider != null\r\n  }\r\n\r\n  private async fetchOidcMetadata(): Promise<AuthorizationServer | null> {\r\n    let res = null\r\n    const enabled = await this.enabled\r\n    const cfg = await this.config\r\n    if (!enabled || !cfg) {\r\n      log.debug('OpenID authorization is disabled')\r\n      return null\r\n    }\r\n\r\n    if (cfg['openid-configuration']) {\r\n      // no need to contact .well-known/openid-configuration here - we have what we need from auth/config\r\n      log.info('Using pre-fetched openid-configuration')\r\n      return cfg['openid-configuration']\r\n    } else {\r\n      log.info('Fetching openid-configuration')\r\n      const cfgUrl = new URL(cfg!.provider)\r\n      res = await oidc.discoveryRequest(cfgUrl).catch(e => {\r\n        log.error('Failed OIDC discovery request', e)\r\n      })\r\n      if (!res || !res.ok) {\r\n        return null\r\n      }\r\n\r\n      return await oidc.processDiscoveryResponse(cfgUrl, res)\r\n    }\r\n  }\r\n\r\n  private async initialize(): Promise<UserInfo | null> {\r\n    const config = await this.config\r\n    const enabled = await this.enabled\r\n    const as = await this.oidcMetadata\r\n    if (!config || !enabled || !as) {\r\n      return null\r\n    }\r\n\r\n    // we have all the metadata to try to log in to OpenID provider.\r\n\r\n    // have we just been redirected with OAuth2 authirization response in query/fragment?\r\n    let urlParams: URLSearchParams | null = null\r\n\r\n    if (config!.response_mode === 'fragment') {\r\n      if (window.location.hash && window.location.hash.length > 0) {\r\n        urlParams = new URLSearchParams(window.location.hash.substring(1))\r\n      }\r\n    } else if (config!.response_mode === 'query') {\r\n      if (window.location.search || window.location.search.length > 0) {\r\n        urlParams = new URLSearchParams(window.location.search.substring(1))\r\n      }\r\n    }\r\n\r\n    const goodParamsRequired = ['code', 'state']\r\n    const errorParamsRequired = ['error']\r\n\r\n    if (as['authorization_response_iss_parameter_supported']) {\r\n      // https://datatracker.ietf.org/doc/html/rfc9207#section-2.3\r\n      goodParamsRequired.push('iss')\r\n    }\r\n\r\n    let oauthSuccess = urlParams != null\r\n    let oauthError = false\r\n    if (urlParams != null) {\r\n      goodParamsRequired.forEach(p => {\r\n        oauthSuccess &&= urlParams!.get(p) != null\r\n      })\r\n      errorParamsRequired.forEach(p => {\r\n        oauthError ||= urlParams!.get(p) != null\r\n      })\r\n    }\r\n\r\n    if (oauthError) {\r\n      // we are already after redirect, but there was an OAuth2/OpenID problem\r\n      const error: OAuth2Error = {\r\n        error: urlParams?.get('error') as string,\r\n        error_description: urlParams?.get('error_description') as string,\r\n        error_uri: urlParams?.get('error_uri') as string,\r\n      }\r\n      log.error('OpenID Connect error', error)\r\n      return null\r\n    }\r\n\r\n    if (!oauthSuccess) {\r\n      // there are no query/fragment params in the URL, so we're logging for the first time\r\n      const code_challenge_method = config!.code_challenge_method\r\n      const code_verifier = oidc.generateRandomCodeVerifier()\r\n      const code_challenge = await oidc.calculatePKCECodeChallenge(code_verifier)\r\n\r\n      const state = oidc.generateRandomState()\r\n      const nonce = oidc.generateRandomNonce()\r\n\r\n      // put some data to localStorage, so we can verify the OAuth2 response after redirect\r\n      localStorage.removeItem('hawtio-oidc-login')\r\n      localStorage.setItem(\r\n        'hawtio-oidc-login',\r\n        JSON.stringify({\r\n          st: state,\r\n          cv: code_verifier,\r\n          n: nonce,\r\n          h: window.location.href,\r\n        }),\r\n      )\r\n      log.info('Added to local storage', localStorage.getItem('hawtio-oidc-login'))\r\n\r\n      const authorizationUrl = new URL(as!.authorization_endpoint!)\r\n      authorizationUrl.searchParams.set('response_type', 'code')\r\n      authorizationUrl.searchParams.set('response_mode', config.response_mode)\r\n      authorizationUrl.searchParams.set('client_id', config.client_id)\r\n      authorizationUrl.searchParams.set('redirect_uri', config.redirect_uri)\r\n      authorizationUrl.searchParams.set('scope', config.scope)\r\n      if (code_challenge_method) {\r\n        authorizationUrl.searchParams.set('code_challenge_method', code_challenge_method)\r\n        authorizationUrl.searchParams.set('code_challenge', code_challenge)\r\n      }\r\n      authorizationUrl.searchParams.set('state', state)\r\n      authorizationUrl.searchParams.set('nonce', nonce)\r\n      // authorizationUrl.searchParams.set('login_hint', 'hawtio-viewer@fuseqe.onmicrosoft.com')\r\n      // authorizationUrl.searchParams.set('hsu', '1')\r\n      if (config.prompt) {\r\n        authorizationUrl.searchParams.set('prompt', config.prompt)\r\n      }\r\n\r\n      log.info('Redirecting to ', authorizationUrl)\r\n\r\n      // point of no return\r\n      window.location.assign(authorizationUrl)\r\n      // return unresolvable promise to wait for redirect\r\n      return new Promise((resolve, reject) => {\r\n        log.debug('Waiting for redirect')\r\n      })\r\n    }\r\n\r\n    const client: Client = {\r\n      client_id: config.client_id,\r\n      token_endpoint_auth_method: 'none',\r\n    }\r\n\r\n    // there are proper OAuth2/OpenID params, so we can exchange them for access_token, refresh_token and id_token\r\n    const state = urlParams!.get('state')\r\n    const authResponse = oidc.validateAuthResponse(as, client, urlParams!, state!)\r\n\r\n    if (oidc.isOAuth2Error(authResponse)) {\r\n      log.error('OpenID Authorization error', authResponse)\r\n      return null\r\n    }\r\n\r\n    log.info('Getting localStore data, because we have params', urlParams)\r\n    const loginDataString = localStorage.getItem('hawtio-oidc-login')\r\n    // localStorage.removeItem(\"hawtio-oidc-login\")\r\n    if (!loginDataString) {\r\n      log.warn(\"No local data, can't proceed with OpenID authorization grant\")\r\n      return null\r\n    }\r\n    const loginData = JSON.parse(loginDataString)\r\n    if (!loginData.cv || !loginData.st) {\r\n      log.warn(\"Missing local data, can't proceed with OpenID authorization grant\")\r\n      return null\r\n    }\r\n\r\n    const res = await oidc\r\n      .authorizationCodeGrantRequest(as, client, authResponse, config.redirect_uri, loginData.cv, {})\r\n      .catch(e => {\r\n        log.warn('Problem accessing OpenID token endpoint', e)\r\n        return null\r\n      })\r\n    if (!res) {\r\n      return null\r\n    }\r\n\r\n    const tokenResponse = await oidc\r\n      .processAuthorizationCodeOpenIDResponse(as, client, res, loginData.n, oidc.skipAuthTimeCheck)\r\n      .catch(e => {\r\n        log.warn('Problem processing OpenID token response', e)\r\n        return null\r\n      })\r\n    if (!tokenResponse) {\r\n      return null\r\n    }\r\n    if (oidc.isOAuth2Error(tokenResponse)) {\r\n      log.error('OpenID Token error', tokenResponse)\r\n      return null\r\n    }\r\n\r\n    const access_token = tokenResponse['access_token']\r\n    const refresh_token = tokenResponse['refresh_token']\r\n    let at_exp: number = 0\r\n    // const id_token = tokenResponse[\"id_token\"]\r\n\r\n    // we have to parse (though we shouldn't according to MS) access_token to get it's validity\r\n    try {\r\n      const access_token_decoded = jwtDecode(access_token)\r\n      if (access_token_decoded['exp']) {\r\n        at_exp = access_token_decoded['exp']\r\n      } else {\r\n        at_exp = 0\r\n        log.warn('Access token doesn\\'t contain \"exp\" information')\r\n      }\r\n    } catch (e) {\r\n      log.warn('Problem determining access token validity', e)\r\n    }\r\n\r\n    const claims = oidc.getValidatedIdTokenClaims(tokenResponse)\r\n    const user = (claims.preferred_username ?? claims.sub) as string\r\n\r\n    // clear the URL bar\r\n    window.history.replaceState(null, '', loginData.h)\r\n\r\n    this.setupJQueryAjax()\r\n    this.setupFetch()\r\n\r\n    return {\r\n      user,\r\n      access_token,\r\n      refresh_token,\r\n      at_exp,\r\n    }\r\n  }\r\n\r\n  private isTokenExpiring(at_exp: number): boolean {\r\n    const now = Math.floor(Date.now() / 1000)\r\n    if (at_exp - 5 < now) {\r\n      // is expired, or will expire within 5 seconds\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n\r\n  registerUserHooks() {\r\n    const fetchUser = async (resolveUser: ResolveUser, proceed?: () => boolean) => {\r\n      if (proceed && !proceed()) {\r\n        return false\r\n      }\r\n\r\n      const userInfo = await this.userInfo\r\n      if (!userInfo) {\r\n        return false\r\n      }\r\n      resolveUser({ username: userInfo.user!, isLogin: true })\r\n      userService.setToken(userInfo.access_token!)\r\n\r\n      return true\r\n    }\r\n    userService.addFetchUserHook('oidc', fetchUser)\r\n\r\n    const logout = async () => {\r\n      const md = await this.oidcMetadata\r\n      if (md?.end_session_endpoint) {\r\n        window.location.replace(md?.end_session_endpoint)\r\n        return true\r\n      }\r\n      return false\r\n    }\r\n    userService.addLogoutHook('oidc', logout)\r\n  }\r\n\r\n  private async updateToken(success: (userInfo: UserInfo) => void, failure?: () => void) {\r\n    const userInfo = await this.userInfo\r\n    if (!userInfo) {\r\n      return\r\n    }\r\n    if (userInfo.refresh_token) {\r\n      const config = await this.config\r\n      const enabled = await this.enabled\r\n      const as = await this.oidcMetadata\r\n      if (!config || !enabled || !as) {\r\n        return\r\n      }\r\n\r\n      const client: Client = {\r\n        client_id: config.client_id,\r\n        token_endpoint_auth_method: 'none',\r\n      }\r\n\r\n      const options: oidc.TokenEndpointRequestOptions = { [oidc.customFetch]: this.originalFetch }\r\n      const res = await oidc.refreshTokenGrantRequest(as, client, userInfo.refresh_token, options).catch(e => {\r\n        log.error('Problem refreshing token', e)\r\n        if (failure) {\r\n          failure()\r\n        }\r\n      })\r\n      if (!res) {\r\n        return\r\n      }\r\n      const refreshResponse = await oidc.processRefreshTokenResponse(as, client, res).catch(e => {\r\n        log.error('Problem processing refresh token response', e)\r\n      })\r\n      if (!refreshResponse) {\r\n        return\r\n      }\r\n      userInfo.access_token = refreshResponse['access_token'] as string\r\n      userInfo.refresh_token = refreshResponse['refresh_token'] as string\r\n      const access_token_decoded = jwtDecode(userInfo.access_token)\r\n      if (access_token_decoded['exp']) {\r\n        userInfo.at_exp = access_token_decoded['exp']\r\n      } else {\r\n        userInfo.at_exp = 0\r\n        log.warn('Access token doesn\\'t contain \"exp\" information')\r\n      }\r\n\r\n      this.userInfo = Promise.resolve(userInfo)\r\n      success(userInfo)\r\n    } else {\r\n      log.error('No refresh token available')\r\n    }\r\n  }\r\n\r\n  private async setupJQueryAjax() {\r\n    let userInfo = await this.userInfo\r\n    if (!userInfo) {\r\n      return\r\n    }\r\n\r\n    log.debug('Set authorization header to OIDC token for AJAX requests')\r\n    const beforeSend = (xhr: JQueryXHR, settings: JQueryAjaxSettings) => {\r\n      const logPrefix = 'jQuery -'\r\n      if (userInfo && (!userInfo.access_token || this.isTokenExpiring(userInfo.at_exp))) {\r\n        log.debug(logPrefix, 'Try to update token for request:', settings.url)\r\n        this.updateToken(\r\n          _userInfo => {\r\n            if (_userInfo) {\r\n              userInfo = _userInfo\r\n              log.debug(logPrefix, 'OIDC token refreshed. Set new value to userService')\r\n              userService.setToken(userInfo.access_token!)\r\n            }\r\n            log.debug(logPrefix, 'Re-sending request after successfully updating OIDC token:', settings.url)\r\n            $.ajax(settings)\r\n          },\r\n          () => {\r\n            log.debug(logPrefix, 'Logging out due to token update failed')\r\n            userService.logout()\r\n          },\r\n        )\r\n        return false\r\n      }\r\n\r\n      xhr.setRequestHeader('Authorization', `Bearer ${userInfo!.access_token}`)\r\n\r\n      // For CSRF protection with Spring Security\r\n      const token = getCookie('XSRF-TOKEN')\r\n      if (token) {\r\n        log.debug(logPrefix, 'Set XSRF token header from cookies')\r\n        xhr.setRequestHeader('X-XSRF-TOKEN', token)\r\n      }\r\n\r\n      return // To suppress ts(7030)\r\n    }\r\n    $.ajaxSetup({ beforeSend })\r\n  }\r\n\r\n  private async setupFetch() {\r\n    let userInfo = await this.userInfo\r\n    if (!userInfo) {\r\n      return\r\n    }\r\n\r\n    log.debug('Intercept Fetch API to attach OIDC token to authorization header')\r\n    const { fetch: originalFetch } = window\r\n    this.originalFetch = originalFetch\r\n    window.fetch = async (input: RequestInfo | URL, init?: RequestInit): Promise<Response> => {\r\n      const logPrefix = 'Fetch -'\r\n      log.debug(logPrefix, 'Fetch intercepted for OIDC authentication')\r\n\r\n      if (userInfo && (!userInfo.access_token || this.isTokenExpiring(userInfo.at_exp))) {\r\n        log.debug(logPrefix, 'Try to update token for request:', input)\r\n        return new Promise((resolve, reject) => {\r\n          this.updateToken(\r\n            _userInfo => {\r\n              if (_userInfo) {\r\n                userInfo = _userInfo\r\n                log.debug(logPrefix, 'OIDC token refreshed. Set new value to userService')\r\n                userService.setToken(userInfo!.access_token!)\r\n              }\r\n              log.debug(logPrefix, 'Re-sending request after successfully updating OIDC token:', input)\r\n              resolve(fetch(input, init))\r\n            },\r\n            () => {\r\n              log.debug(logPrefix, 'Logging out due to token update failed')\r\n              userService.logout()\r\n              reject()\r\n            },\r\n          )\r\n        })\r\n      }\r\n\r\n      init = { ...init }\r\n\r\n      init.headers = {\r\n        ...init.headers,\r\n        Authorization: `Bearer ${userInfo!.access_token}`,\r\n      }\r\n\r\n      // For CSRF protection with Spring Security\r\n      const token = getCookie('XSRF-TOKEN')\r\n      if (token) {\r\n        log.debug(logPrefix, 'Set XSRF token header from cookies')\r\n        init.headers = {\r\n          ...init.headers,\r\n          'X-XSRF-TOKEN': token,\r\n        }\r\n      }\r\n\r\n      return originalFetch(input, init)\r\n    }\r\n  }\r\n}\r\n\r\nexport const oidcService = new OidcService()\r\n","import { HawtioPlugin } from '@hawtiosrc/core'\r\nimport { helpRegistry } from '@hawtiosrc/help/registry'\r\nimport help from './help.md'\r\nimport { oidcService } from './oidc-service'\r\n\r\nconst oidc: HawtioPlugin = () => {\r\n  oidcService.registerUserHooks()\r\n  helpRegistry.add('oidc', 'OpenID Connect', help, 22)\r\n}\r\n\r\nexport { oidc, oidcService }\r\n","import { Card, CardBody, CardTitle, Text } from '@patternfly/react-core'\r\nimport { InfoCircleIcon } from '@patternfly/react-icons'\r\nimport React from 'react'\r\n\r\nexport const HawtioEmptyCard: React.FunctionComponent<{ title?: string; message: string; testid?: string }> = ({\r\n  title,\r\n  message,\r\n  testid = 'empty',\r\n}) => (\r\n  <Card>\r\n    {title && <CardTitle>{title}</CardTitle>}\r\n    <CardBody>\r\n      <Text data-testid={testid} component='p'>\r\n        <InfoCircleIcon /> {message}\r\n      </Text>\r\n    </CardBody>\r\n  </Card>\r\n)\r\n","import { Card, CardBody, Skeleton } from '@patternfly/react-core'\r\nimport React from 'react'\r\n\r\nexport const HawtioLoadingCard: React.FunctionComponent<{ message?: string; testid?: string }> = ({\r\n  message = 'Loading...',\r\n  testid = 'loading',\r\n}) => (\r\n  <Card>\r\n    <CardBody>\r\n      <Skeleton data-testid={testid} screenreaderText={message} />\r\n    </CardBody>\r\n  </Card>\r\n)\r\n","import { useContext } from 'react'\r\nimport { Card, CardBody, Panel, Text } from '@patternfly/react-core'\r\nimport { InfoCircleIcon } from '@patternfly/react-icons'\r\nimport { OnRowClick, Table, TableBody, TableHeader, TableProps } from '@patternfly/react-table'\r\nimport { PluginNodeSelectionContext } from '@hawtiosrc/plugins/context'\r\nimport './JmxContentMBeans.css'\r\n\r\nexport const JmxContentMBeans: React.FunctionComponent = () => {\r\n  const { selectedNode, setSelectedNode } = useContext(PluginNodeSelectionContext)\r\n\r\n  if (!selectedNode) {\r\n    return null\r\n  }\r\n\r\n  const columns: TableProps['cells'] = ['MBean', 'Object Name']\r\n  const rows: TableProps['rows'] = (selectedNode.children || []).map(child => [child.name, child.objectName || '-'])\r\n\r\n  if (rows.length === 0) {\r\n    return (\r\n      <Card>\r\n        <CardBody>\r\n          <Text component='p'>\r\n            <InfoCircleIcon /> This node has no MBeans.\r\n          </Text>\r\n        </CardBody>\r\n      </Card>\r\n    )\r\n  }\r\n\r\n  const selectChild: OnRowClick = (_event, row) => {\r\n    const clicked = row[0]\r\n    const child = selectedNode.children?.find(c => c.name === clicked)\r\n    if (child) {\r\n      setSelectedNode(child)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Panel>\r\n      <Table aria-label='MBeans' variant='compact' cells={columns} rows={rows}>\r\n        <TableHeader />\r\n        <TableBody onRowClick={selectChild} className={'jmx-table-body'} />\r\n      </Table>\r\n    </Panel>\r\n  )\r\n}\r\n","import { createContext, useState } from 'react'\r\nimport { MBeanNode } from '@hawtiosrc/plugins/shared'\r\n\r\n/**\r\n * Custom React hook for using a selected node from JMX plugin.\r\n */\r\nexport function usePluginNodeSelected() {\r\n  const [selectedNode, setSelectedNode] = useState<MBeanNode | null>(null)\r\n  return { selectedNode, setSelectedNode }\r\n}\r\n\r\ntype PluginNodeSelectionContext = {\r\n  selectedNode: MBeanNode | null\r\n  setSelectedNode: (selectedNode: MBeanNode | null) => void\r\n}\r\n\r\nexport const PluginNodeSelectionContext = createContext<PluginNodeSelectionContext>({\r\n  selectedNode: null,\r\n  setSelectedNode: () => {\r\n    /* no-op */\r\n  },\r\n})\r\n","import React, { ChangeEvent, useState } from 'react'\r\nimport { Button, Toolbar, ToolbarContent, ToolbarGroup, ToolbarItem, TreeViewSearch } from '@patternfly/react-core'\r\n\r\ninterface ToolbarProps {\r\n  onSearch: (event: ChangeEvent<HTMLInputElement>) => void\r\n  onSetExpanded: (newExpanded: boolean) => void\r\n}\r\n\r\nexport const PluginTreeViewToolbar: React.FunctionComponent<ToolbarProps> = (props: ToolbarProps) => {\r\n  const [expanded, setExpanded] = useState(false)\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  const onSearch = (event: ChangeEvent<HTMLInputElement>) => {\r\n    if (props.onSearch) {\r\n      props.onSearch(event)\r\n    }\r\n  }\r\n\r\n  const toggleExpanded = () => {\r\n    const newExpanded = !expanded\r\n    setExpanded(newExpanded)\r\n    if (props.onSetExpanded) {\r\n      props.onSetExpanded(newExpanded)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Toolbar style={{ padding: 0 }}>\r\n      <ToolbarContent style={{ padding: 0 }}>\r\n        <ToolbarGroup variant='filter-group'>\r\n          <ToolbarItem variant='search-filter' widths={{ default: '100%' }}>\r\n            <TreeViewSearch\r\n              onSearch={onSearch}\r\n              id='input-search'\r\n              name='search-input'\r\n              aria-label='Search input example'\r\n            />\r\n          </ToolbarItem>\r\n          <ToolbarItem variant='expand-all'>\r\n            <Button variant='link' aria-label='Expand Collapse' onClick={toggleExpanded}>\r\n              {expanded ? 'Collapse all' : 'Expand all'}\r\n            </Button>\r\n          </ToolbarItem>\r\n        </ToolbarGroup>\r\n      </ToolbarContent>\r\n    </Toolbar>\r\n  )\r\n}\r\n","import { stringSorter } from '@hawtiosrc/util/strings'\r\n\r\nexport function isObject(value: unknown): value is object {\r\n  const type = typeof value\r\n  return value != null && (type === 'object' || type === 'function')\r\n}\r\n\r\nexport function cloneObject<T>(value: T): T {\r\n  return structuredClone(value)\r\n}\r\n\r\nexport function isEmpty(obj: object): boolean {\r\n  return Object.keys(obj).length === 0\r\n}\r\n\r\nexport function isString(value: unknown): value is string {\r\n  return typeof value === 'string' || value instanceof String\r\n}\r\n\r\nexport function isNumber(value: unknown): value is number {\r\n  return typeof value === 'number' && !Number.isNaN(value)\r\n}\r\n\r\nexport function objectSorter(aValue: unknown, bValue: unknown, sortDesc?: boolean) {\r\n  if (isNumber(aValue)) {\r\n    // Numeric sort\r\n    if (!sortDesc) {\r\n      return (aValue as number) - (bValue as number)\r\n    }\r\n    return (bValue as number) - (aValue as number)\r\n  } else {\r\n    // String sort\r\n    return stringSorter(aValue as string, bValue as string, sortDesc)\r\n  }\r\n}\r\n","import { PluginNodeSelectionContext } from '@hawtiosrc/plugins/context'\r\nimport { AttributeValues } from '@hawtiosrc/plugins/shared/jolokia-service'\r\nimport { isObject, objectSorter } from '@hawtiosrc/util/objects'\r\nimport { Drawer, DrawerContent, DrawerContentBody, Panel } from '@patternfly/react-core'\r\nimport { TableComposable, Tbody, Td, Th, Thead, ThProps, Tr } from '@patternfly/react-table'\r\nimport React, { useContext, useEffect, useState } from 'react'\r\nimport { HawtioEmptyCard } from '../HawtioEmptyCard'\r\nimport { HawtioLoadingCard } from '../HawtioLoadingCard'\r\nimport { log } from '../globals'\r\nimport { AttributeModal } from './AttributeModal'\r\nimport { attributeService } from './attribute-service'\r\nimport './AttributeTable.css'\r\n\r\nexport const Attributes: React.FunctionComponent = () => {\r\n  const { selectedNode } = useContext(PluginNodeSelectionContext)\r\n  const [attributes, setAttributes] = useState<AttributeValues>({})\r\n  const [isReading, setIsReading] = useState(true)\r\n  const [isModalOpen, setIsModalOpen] = useState(false)\r\n  const [sortDirection, setSortDirection] = React.useState<'asc' | 'desc'>('asc')\r\n  const [selected, setSelected] = useState({ name: '', value: '' })\r\n  const [reload, setReload] = useState(false)\r\n\r\n  useEffect(() => {\r\n    if (!selectedNode || !selectedNode.mbean || !selectedNode.objectName) {\r\n      return\r\n    }\r\n\r\n    setIsReading(true)\r\n    const { objectName } = selectedNode\r\n    attributeService.readWithCallback(objectName, attrs => {\r\n      setAttributes(attrs)\r\n      setIsReading(false)\r\n    })\r\n\r\n    attributeService.register({ type: 'read', mbean: objectName }, response => {\r\n      log.debug('Scheduler - Attributes:', response.value)\r\n      setAttributes(response.value as AttributeValues)\r\n    })\r\n\r\n    return () => attributeService.unregisterAll()\r\n  }, [selectedNode])\r\n\r\n  useEffect(() => {\r\n    if (!selectedNode || !selectedNode.mbean || !selectedNode.objectName || !reload) {\r\n      return\r\n    }\r\n\r\n    setIsReading(true)\r\n    const { objectName } = selectedNode\r\n    attributeService.readWithCallback(objectName, attrs => {\r\n      setAttributes(attrs)\r\n      setIsReading(false)\r\n    })\r\n\r\n    setReload(false)\r\n  }, [selectedNode, reload])\r\n\r\n  if (!selectedNode || !selectedNode.mbean || !selectedNode.objectName) {\r\n    return null\r\n  }\r\n\r\n  if (isReading) {\r\n    return <HawtioLoadingCard />\r\n  }\r\n\r\n  const rows: { name: string; value: string }[] = Object.entries(attributes).map(([name, value]) => ({\r\n    name: name,\r\n    value: isObject(value) ? JSON.stringify(value) : String(value),\r\n  }))\r\n\r\n  if (rows.length === 0) {\r\n    return <HawtioEmptyCard message='This MBean has no attributes.' />\r\n  }\r\n\r\n  const selectAttribute = (attribute: { name: string; value: string }) => {\r\n    setSelected(attribute)\r\n    if (!isModalOpen) {\r\n      setIsModalOpen(true)\r\n    }\r\n  }\r\n\r\n  const getSortParams = (): ThProps['sort'] => ({\r\n    sortBy: {\r\n      index: 0,\r\n      direction: sortDirection,\r\n      defaultDirection: 'asc', // starting sort direction when first sorting a column. Defaults to 'asc'\r\n    },\r\n    onSort: (_event, _index, direction) => {\r\n      setSortDirection(direction)\r\n    },\r\n    columnIndex: 0,\r\n  })\r\n\r\n  const panelContent = (\r\n    <AttributeModal\r\n      isOpen={isModalOpen}\r\n      onClose={() => setIsModalOpen(false)}\r\n      onUpdate={() => setReload(true)}\r\n      input={selected}\r\n    />\r\n  )\r\n\r\n  const attributesTable = (\r\n    <div id='attribute-table-with-panel'>\r\n      <TableComposable aria-label='Attributes' variant='compact'>\r\n        <Thead>\r\n          <Tr>\r\n            <Th sort={getSortParams()}>Attribute</Th>\r\n            <Th>Value</Th>\r\n          </Tr>\r\n        </Thead>\r\n        <Tbody>\r\n          {rows\r\n            .sort((a, b) => objectSorter(a.name, b.name, sortDirection === 'desc'))\r\n            .map((att, index) => (\r\n              <Tr\r\n                key={att.name + '-' + index}\r\n                isHoverable\r\n                isRowSelected={selected.name === att.name}\r\n                onRowClick={() => selectAttribute(att)}\r\n              >\r\n                <Td>{att.name}</Td>\r\n                <Td>{att.value}</Td>\r\n              </Tr>\r\n            ))}\r\n        </Tbody>\r\n      </TableComposable>\r\n    </div>\r\n  )\r\n  return (\r\n    <Panel>\r\n      <Drawer isExpanded={isModalOpen} className={'pf-m-inline-on-2xl'}>\r\n        <DrawerContent panelContent={panelContent}>\r\n          <DrawerContentBody hasPadding> {attributesTable}</DrawerContentBody>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </Panel>\r\n  )\r\n}\r\n","import { Logger } from '@hawtiosrc/core/logging'\r\n\r\nexport const pluginName = 'hawtio-shared'\r\nexport const log = Logger.get(pluginName)\r\n","import { PluginNodeSelectionContext } from '@hawtiosrc/plugins/context'\r\nimport {\r\n  Button,\r\n  ClipboardCopy,\r\n  DrawerActions,\r\n  DrawerCloseButton,\r\n  DrawerHead,\r\n  DrawerPanelBody,\r\n  DrawerPanelContent,\r\n  Form,\r\n  FormGroup,\r\n  TextArea,\r\n  TextInput,\r\n  Title,\r\n} from '@patternfly/react-core'\r\nimport React, { useContext, useEffect, useState } from 'react'\r\nimport { attributeService } from './attribute-service'\r\nimport { log } from '../globals'\r\nimport { eventService } from '@hawtiosrc/core'\r\n\r\nexport const AttributeModal: React.FunctionComponent<{\r\n  isOpen: boolean\r\n  onClose: () => void\r\n  onUpdate: () => void\r\n  input: { name: string; value: string }\r\n}> = ({ isOpen, onClose, onUpdate, input }) => {\r\n  const { selectedNode } = useContext(PluginNodeSelectionContext)\r\n  const attributeName = input.name\r\n  const [attributeValue, setAttributeValue] = useState('')\r\n  const [jolokiaUrl, setJolokiaUrl] = useState('Loading...')\r\n  const [isWritable, setIsWritable] = useState(false)\r\n\r\n  useEffect(() => {\r\n    if (!selectedNode || !selectedNode.objectName || !selectedNode.mbean) {\r\n      return\r\n    }\r\n\r\n    const { mbean, objectName } = selectedNode\r\n\r\n    const attribute = mbean.attr?.[attributeName]\r\n    if (!attribute) {\r\n      return\r\n    }\r\n\r\n    setAttributeValue(input.value)\r\n\r\n    // Update Jolokia URL\r\n    const buildUrl = async () => {\r\n      const url = await attributeService.buildUrl(objectName, attributeName)\r\n      setJolokiaUrl(url)\r\n    }\r\n    buildUrl()\r\n\r\n    // Check RBAC on the selected attribute\r\n    if (attribute.rw) {\r\n      // For writable attribute, we need to check RBAC\r\n      const canInvoke = async () => {\r\n        const canInvoke = await attributeService.canInvoke(objectName, attributeName, attribute.type)\r\n        log.debug('Attribute', attributeName, 'canInvoke:', canInvoke)\r\n        setIsWritable(canInvoke)\r\n      }\r\n      canInvoke()\r\n    } else {\r\n      setIsWritable(false)\r\n    }\r\n  }, [selectedNode, attributeName, input])\r\n\r\n  if (!selectedNode || !selectedNode.objectName || !selectedNode.mbean) {\r\n    return null\r\n  }\r\n\r\n  const { mbean, objectName } = selectedNode\r\n\r\n  const attribute = mbean.attr?.[attributeName]\r\n  if (!attribute) {\r\n    return null\r\n  }\r\n\r\n  const updateAttribute = async () => {\r\n    if (attributeValue === input.value) {\r\n      eventService.notify({ type: 'info', message: 'The attribute value has not changed' })\r\n    } else {\r\n      await attributeService.update(objectName, attributeName, attributeValue)\r\n      onUpdate()\r\n    }\r\n    onClose()\r\n  }\r\n\r\n  const modalTitle = `Attribute: ${attributeName}`\r\n\r\n  const modalActions = []\r\n\r\n  if (isWritable) {\r\n    modalActions.push(\r\n      <Button key='update' variant='danger' onClick={updateAttribute}>\r\n        Save\r\n      </Button>,\r\n    )\r\n  }\r\n\r\n  return (\r\n    <DrawerPanelContent isResizable>\r\n      <DrawerHead>\r\n        <Title headingLevel='h2' size='xl'>\r\n          {modalTitle}\r\n        </Title>\r\n        <DrawerActions>\r\n          <DrawerCloseButton onClick={onClose} />\r\n        </DrawerActions>\r\n      </DrawerHead>\r\n\r\n      <DrawerPanelBody>\r\n        <Form id='attribute-form' isHorizontal>\r\n          <FormGroup label='Name' fieldId='attribute-form-name'>\r\n            <TextInput\r\n              id='attribute-form-name'\r\n              name='attribute-form-name'\r\n              value={attributeName}\r\n              readOnlyVariant='default'\r\n            />\r\n          </FormGroup>\r\n          <FormGroup label='Description' fieldId='attribute-form-description'>\r\n            <TextArea\r\n              id='attribute-form-description'\r\n              name='attribute-form-description'\r\n              value={attribute.desc}\r\n              readOnlyVariant='default'\r\n            />\r\n          </FormGroup>\r\n          <FormGroup label='Type' fieldId='attribute-form-type'>\r\n            <TextInput\r\n              id='attribute-form-type'\r\n              name='attribute-form-type'\r\n              value={attribute.type}\r\n              readOnlyVariant='default'\r\n            />\r\n          </FormGroup>\r\n          <FormGroup label='Jolokia URL' fieldId='attribute-form-jolokia-url'>\r\n            <ClipboardCopy isReadOnly removeFindDomNode>\r\n              {jolokiaUrl}\r\n            </ClipboardCopy>\r\n          </FormGroup>\r\n          <FormGroup label='Value' fieldId='attribute-form-value'>\r\n            <TextInput\r\n              id='attribute-form-value'\r\n              name='attribute-form-value'\r\n              value={attributeValue}\r\n              onChange={value => setAttributeValue(value)}\r\n              readOnlyVariant={isWritable ? undefined : 'default'}\r\n            />\r\n          </FormGroup>\r\n          <FormGroup>{modalActions}</FormGroup>\r\n        </Form>\r\n      </DrawerPanelBody>\r\n    </DrawerPanelContent>\r\n  )\r\n}\r\n","import { Logger } from '@hawtiosrc/core/logging'\r\nimport {\r\n  AttributeRequestOptions,\r\n  BaseRequestOptions,\r\n  BulkRequestOptions,\r\n  ErrorResponse,\r\n  ExecuteRequestOptions,\r\n  ListRequestOptions,\r\n  MBeanOperationArgument,\r\n  RequestOptions,\r\n  SearchRequestOptions,\r\n  VersionRequestOptions,\r\n} from 'jolokia.js'\r\n\r\nconst log = Logger.get('hawtio-util')\r\n\r\nexport function onSuccessAndError(\r\n  successFn: NonNullable<RequestOptions['success']>,\r\n  errorFn: NonNullable<RequestOptions['error']>,\r\n  options: BaseRequestOptions = {},\r\n): RequestOptions {\r\n  return onGenericSuccessAndError(successFn, errorFn, options)\r\n}\r\n\r\nexport function onAttributeSuccessAndError(\r\n  successFn: NonNullable<AttributeRequestOptions['success']>,\r\n  errorFn: NonNullable<AttributeRequestOptions['error']>,\r\n  options: AttributeRequestOptions = {},\r\n): AttributeRequestOptions {\r\n  return onGenericSuccessAndError(successFn, errorFn, options)\r\n}\r\n\r\nexport function onExecuteSuccessAndError(\r\n  successFn: NonNullable<ExecuteRequestOptions['success']>,\r\n  errorFn: NonNullable<ExecuteRequestOptions['error']>,\r\n  options: ExecuteRequestOptions = {},\r\n): ExecuteRequestOptions {\r\n  return onGenericSuccessAndError(successFn, errorFn, options)\r\n}\r\n\r\nexport function onSearchSuccessAndError(\r\n  successFn: NonNullable<SearchRequestOptions['success']>,\r\n  errorFn: NonNullable<SearchRequestOptions['error']>,\r\n  options: SearchRequestOptions = {},\r\n): SearchRequestOptions {\r\n  return onGenericSuccessAndError(successFn, errorFn, options)\r\n}\r\n\r\nexport function onListSuccessAndError(\r\n  successFn: NonNullable<ListRequestOptions['success']>,\r\n  errorFn: NonNullable<ListRequestOptions['error']>,\r\n  options: ListRequestOptions = {},\r\n): ListRequestOptions {\r\n  return onGenericSuccessAndError(successFn, errorFn, options)\r\n}\r\n\r\nexport function onVersionSuccessAndError(\r\n  successFn: NonNullable<VersionRequestOptions['success']>,\r\n  errorFn: NonNullable<VersionRequestOptions['error']>,\r\n  options: VersionRequestOptions = {},\r\n): VersionRequestOptions {\r\n  return onGenericSuccessAndError(successFn, errorFn, options)\r\n}\r\n\r\nexport function onBulkSuccessAndError(\r\n  successFn: NonNullable<BulkRequestOptions['success']>,\r\n  errorFn: NonNullable<BulkRequestOptions['error']>,\r\n  options: BulkRequestOptions = {},\r\n): BulkRequestOptions {\r\n  return onGenericSuccessAndError(successFn, errorFn, options)\r\n}\r\n\r\nexport function onGenericSuccess<S, O extends BaseRequestOptions>(successFn: S, options?: O): O {\r\n  return onGenericSuccessAndError(successFn, defaultErrorHandler(), options)\r\n}\r\n\r\nexport function onGenericSuccessAndError<S, E, O extends BaseRequestOptions>(successFn: S, errorFn: E, options?: O): O {\r\n  const defaultOptions: BaseRequestOptions = {\r\n    method: 'post',\r\n    mimeType: 'application/json',\r\n    // the default (unsorted) order is important for Karaf runtime\r\n    canonicalNaming: false,\r\n  }\r\n  return Object.assign({}, defaultOptions, options, {\r\n    success: successFn,\r\n    error: errorFn,\r\n  })\r\n}\r\n\r\n/**\r\n * The default error handler which logs errors either using debug or log level logging\r\n * based on the silent setting.\r\n */\r\nfunction defaultErrorHandler(): NonNullable<RequestOptions['error']> {\r\n  return (response: ErrorResponse) => {\r\n    if (!response.error) {\r\n      return\r\n    }\r\n\r\n    const req = response.request\r\n    const operation = req?.type === 'exec' ? req.operation : 'unknown'\r\n    if (isIgnorableException(response)) {\r\n      log.debug('Operation', operation, 'failed due to:', response.error)\r\n    } else {\r\n      log.warn('Operation', operation, 'failed due to:', response.error)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Checks if it's an error that can happen on timing issues such as being removed\r\n * or if we run against older containers.\r\n *\r\n * @param response the error response from a Jolokia request\r\n */\r\nfunction isIgnorableException(response: ErrorResponse): boolean {\r\n  const ignorables = [\r\n    'InstanceNotFoundException',\r\n    'AttributeNotFoundException',\r\n    'IllegalArgumentException: No operation',\r\n  ]\r\n  const test = (e: string) => ignorables.some(i => e.indexOf(i) >= 0)\r\n  return (response.stacktrace != null && test(response.stacktrace)) || (response.error != null && test(response.error))\r\n}\r\n\r\n/**\r\n * Escapes the mbean for Jolokia GET requests.\r\n *\r\n * @param mbean the MBean\r\n */\r\nexport function escapeMBean(mbean: string): string {\r\n  return encodeURI(applyJolokiaEscapeRules(mbean))\r\n}\r\n\r\n/**\r\n * Escapes the MBean as a path for Jolokia POST \"list\" requests.\r\n * See: https://jolokia.org/reference/html/protocol.html#list\r\n *\r\n * @param mbean the MBean\r\n */\r\nexport function escapeMBeanPath(mbean: string): string {\r\n  return applyJolokiaEscapeRules(mbean).replace(':', '/')\r\n}\r\n\r\n/**\r\n * Applies the Jolokia escaping rules to the MBean name.\r\n * See: http://www.jolokia.org/reference/html/protocol.html#escape-rules\r\n *\r\n * @param mbean the MBean\r\n */\r\nfunction applyJolokiaEscapeRules(mbean: string): string {\r\n  return mbean.replace(/!/g, '!!').replace(/\\//g, '!/').replace(/\"/g, '!\"')\r\n}\r\n\r\nexport function operationToString(operation: string, args: MBeanOperationArgument[]): string {\r\n  const argsStr = args.map(arg => arg.type).join(',')\r\n  return `${operation}(${argsStr})`\r\n}\r\n","import { userService } from '@hawtiosrc/auth'\r\nimport { eventService, hawtio } from '@hawtiosrc/core'\r\nimport { basicAuthHeaderValue, getCookie } from '@hawtiosrc/util/https'\r\nimport {\r\n  escapeMBeanPath,\r\n  onBulkSuccessAndError,\r\n  onExecuteSuccessAndError,\r\n  onListSuccessAndError,\r\n  onSearchSuccessAndError,\r\n  onSuccessAndError,\r\n  onVersionSuccessAndError,\r\n} from '@hawtiosrc/util/jolokia'\r\nimport { isObject, isString } from '@hawtiosrc/util/objects'\r\nimport { parseBoolean } from '@hawtiosrc/util/strings'\r\nimport Jolokia, {\r\n  AttributeRequestOptions,\r\n  BaseRequestOptions,\r\n  ErrorResponse,\r\n  ListRequestOptions,\r\n  ListResponse,\r\n  NotificationMode,\r\n  NotificationOptions,\r\n  Request,\r\n  RequestOptions,\r\n  Response,\r\n  SearchRequestOptions,\r\n  VersionRequestOptions,\r\n  VersionResponse,\r\n} from 'jolokia.js'\r\nimport 'jolokia.js/simple'\r\nimport $ from 'jquery'\r\nimport { func, is, object, type } from 'superstruct'\r\nimport {\r\n  PARAM_KEY_CONNECTION,\r\n  PARAM_KEY_REDIRECT,\r\n  connectService,\r\n  SESSION_KEY_CURRENT_CONNECTION,\r\n} from '../shared/connect-service'\r\nimport { log } from './globals'\r\nimport { OptimisedJmxDomains, OptimisedMBeanInfo, isJmxDomain, isJmxDomains, isMBeanInfo } from './tree'\r\n\r\nexport const DEFAULT_MAX_DEPTH = 7\r\nexport const DEFAULT_MAX_COLLECTION_SIZE = 50000\r\nconst DEFAULT_JOLOKIA_OPTIONS: RequestOptions = {\r\n  method: 'post',\r\n  mimeType: 'application/json',\r\n  maxCollectionSize: DEFAULT_MAX_COLLECTION_SIZE,\r\n  maxDepth: DEFAULT_MAX_DEPTH,\r\n  canonicalNaming: false,\r\n  ignoreErrors: true,\r\n} as const\r\n\r\nexport const DEFAULT_UPDATE_RATE = 5000\r\nexport const DEFAULT_AUTO_REFRESH = false\r\n\r\nconst JOLOKIA_PATHS = ['jolokia', '/hawtio/jolokia', '/jolokia'] as const\r\n\r\nexport enum JolokiaListMethod {\r\n  /** The default LIST+EXEC Jolokia operations. */\r\n  DEFAULT,\r\n  /** The optimised list operations provided by Hawtio RBACRegistry MBean. */\r\n  OPTIMISED,\r\n  /** Not determined. */\r\n  UNDETERMINED,\r\n}\r\n\r\n/**\r\n * This is really a MBean that provides an optimised Jolokia list operation,\r\n * with optionally decorated RBAC info on the result.\r\n */\r\nconst OPTIMISED_JOLOKIA_LIST_MBEAN = 'hawtio:type=security,name=RBACRegistry'\r\n\r\nconst JOLOKIA_LIST_MAX_DEPTH = 9\r\n\r\nexport type OptimisedListResponse = {\r\n  cache: OptimisedMBeanInfoCache\r\n  domains: CacheableOptimisedJmxDomains\r\n}\r\nfunction isOptimisedListResponse(value: unknown): value is OptimisedListResponse {\r\n  return is(value, object({ cache: object(), domains: object() }))\r\n}\r\nexport type OptimisedMBeanInfoCache = Record<string, OptimisedMBeanInfo>\r\nexport type CacheableOptimisedJmxDomains = Record<string, CacheableOptimisedJmxDomain>\r\nexport type CacheableOptimisedJmxDomain = Record<string, OptimisedMBeanInfo | string>\r\n\r\nexport type JolokiaConfig = {\r\n  method: JolokiaListMethod\r\n  mbean: string\r\n}\r\n\r\nexport type JolokiaStoredOptions = {\r\n  maxDepth: number\r\n  maxCollectionSize: number\r\n}\r\n\r\nexport const STORAGE_KEY_JOLOKIA_OPTIONS = 'connect.jolokia.options'\r\nexport const STORAGE_KEY_UPDATE_RATE = 'connect.jolokia.updateRate'\r\nexport const STORAGE_KEY_AUTO_REFRESH = 'connect.jolokia.autoRefresh'\r\n\r\ntype JQueryBeforeSend = (this: unknown, jqXHR: JQueryXHR, settings: unknown) => false | void\r\ntype JQueryAjaxError = (xhr: JQueryXHR, text: string, error: string) => void\r\ntype AjaxErrorResolver = () => void\r\n\r\nexport type AttributeValues = Record<string, unknown>\r\n\r\nexport interface IJolokiaService {\r\n  reset(): void\r\n  getJolokiaUrl(): Promise<string | null>\r\n  getJolokia(): Promise<Jolokia>\r\n  getListMethod(): Promise<JolokiaListMethod>\r\n  getFullJolokiaUrl(): Promise<string>\r\n  list(options?: ListRequestOptions): Promise<OptimisedJmxDomains>\r\n  sublist(paths: string | string[], options?: ListRequestOptions): Promise<OptimisedJmxDomains>\r\n  readAttributes(mbean: string): Promise<AttributeValues>\r\n  readAttribute(mbean: string, attribute: string): Promise<unknown>\r\n  execute(mbean: string, operation: string, args?: unknown[]): Promise<unknown>\r\n  search(mbeanPattern: string): Promise<string[]>\r\n  bulkRequest(requests: Request[]): Promise<Response[]>\r\n  register(request: Request, callback: (response: Response | ErrorResponse) => void): Promise<number>\r\n  unregister(handle: number): void\r\n  loadUpdateRate(): number\r\n  saveUpdateRate(value: number): void\r\n  loadAutoRefresh(): boolean\r\n  saveAutoRefresh(value: boolean): void\r\n  loadJolokiaStoredOptions(): JolokiaStoredOptions\r\n  saveJolokiaStoredOptions(options: JolokiaStoredOptions): void\r\n}\r\n\r\nclass JolokiaService implements IJolokiaService {\r\n  private jolokiaUrl?: Promise<string | null>\r\n  private jolokia?: Promise<Jolokia>\r\n  private config: JolokiaConfig = {\r\n    method: JolokiaListMethod.DEFAULT,\r\n    mbean: OPTIMISED_JOLOKIA_LIST_MBEAN,\r\n  }\r\n\r\n  reset() {\r\n    this.jolokiaUrl = undefined\r\n    this.jolokia = undefined\r\n    this.config = {\r\n      method: JolokiaListMethod.DEFAULT,\r\n      mbean: OPTIMISED_JOLOKIA_LIST_MBEAN,\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the Jolokia URL that the service is connected to.\r\n   *\r\n   * The URL may not be a full URL including origin (`http(s)://host:port`).\r\n   * It can be a path relative to the root (`/hawtio/jolokia`) or to the current\r\n   * path (`jolokia`).\r\n   *\r\n   * @see Use {@link getFullJolokiaUrl} for getting the full URL.\r\n   */\r\n  getJolokiaUrl(): Promise<string | null> {\r\n    if (this.jolokiaUrl) {\r\n      return this.jolokiaUrl\r\n    }\r\n\r\n    this.jolokiaUrl = this.initJolokiaUrl()\r\n    return this.jolokiaUrl\r\n  }\r\n\r\n  getJolokia(): Promise<Jolokia> {\r\n    if (this.jolokia) {\r\n      return this.jolokia\r\n    }\r\n\r\n    // Initialising Jolokia instance\r\n    this.jolokia = this.createJolokia(jolokia => {\r\n      // Checking versions\r\n      jolokia.version(\r\n        onVersionSuccessAndError(\r\n          version => {\r\n            log.info('Jolokia version:', { client: jolokia.CLIENT_VERSION, agent: version.agent })\r\n          },\r\n          error => log.error('Failed to fetch Jolokia version:', error),\r\n        ),\r\n      )\r\n      // Start Jolokia\r\n      const updateRate = this.loadUpdateRate()\r\n      jolokia.start(updateRate)\r\n      log.info('Jolokia started with update rate =', updateRate)\r\n    })\r\n    return this.jolokia\r\n  }\r\n\r\n  private async initJolokiaUrl(): Promise<string | null> {\r\n    // Wait for resolving user as it may attach credentials to http request headers\r\n    if (!(await userService.isLogin())) {\r\n      throw new Error('User needs to have logged in to use Jolokia service')\r\n    }\r\n\r\n    // Check remote connection\r\n    const conn = connectService.getCurrentConnectionId()\r\n    if (conn) {\r\n      log.debug('Connection provided, not discovering Jolokia: con =', conn)\r\n      return connectService.getJolokiaUrlFromName(conn)\r\n    }\r\n\r\n    // Discover Jolokia\r\n    for (const path of JOLOKIA_PATHS) {\r\n      log.debug('Checking Jolokia path:', path)\r\n      try {\r\n        return await this.tryProbeJolokiaPath(path)\r\n      } catch (e) {\r\n        // ignore\r\n      }\r\n    }\r\n\r\n    log.debug('No available Jolokia path found')\r\n    return null\r\n  }\r\n\r\n  private async tryProbeJolokiaPath(path: string): Promise<string> {\r\n    // in normal scenario, when user is authenticated, there should be server-side session created.\r\n    // thus there's no need to attach \"Authorization\" header to xhr request (both manually or via native\r\n    // browser popup)\r\n    // TOCHECK: scenarios when there's no server side session (Keycloak, OIDC)\r\n    return new Promise<string>((resolve, reject) => {\r\n      $.ajax(path)\r\n        .done((data: string, textStatus: string, xhr: JQueryXHR) => {\r\n          if (xhr.status !== 200) {\r\n            reject()\r\n            return\r\n          }\r\n\r\n          try {\r\n            const resp = JSON.parse(data)\r\n            if ('value' in resp && 'agent' in resp.value) {\r\n              log.debug('Found jolokia agent at:', path, ', version:', resp.value.agent)\r\n              resolve(path)\r\n              return\r\n            }\r\n          } catch (e) {\r\n            // Parse error should mean redirect to html\r\n            reject(e)\r\n            return\r\n          }\r\n          reject()\r\n        })\r\n        .fail((xhr: JQueryXHR) => {\r\n          if (xhr.status === 401 || xhr.status === 403) {\r\n            // I guess this could be it...\r\n            log.debug('Using URL:', path, 'assuming it could be an agent but got return code:', xhr.status)\r\n            resolve(path)\r\n            return\r\n          }\r\n          reject(`${xhr.status} ${xhr.statusText}`)\r\n        })\r\n    })\r\n  }\r\n\r\n  private async createJolokia(postCreate?: (jolokia: Jolokia) => void): Promise<Jolokia> {\r\n    const jolokiaUrl = await this.getJolokiaUrl()\r\n    if (!jolokiaUrl) {\r\n      log.debug('Use dummy Jolokia')\r\n      return new DummyJolokia()\r\n    }\r\n\r\n    // An auth plugin such as Keycloak may have already set up jQuery beforeSend\r\n    if (!$.ajaxSettings.beforeSend) {\r\n      log.debug('Set up jQuery beforeSend')\r\n      const beforeSend = await this.beforeSend()\r\n      $.ajaxSetup({ beforeSend })\r\n    }\r\n\r\n    const options = await this.loadJolokiaOptions()\r\n    if (!options.ajaxError) {\r\n      // Default ajax error handler\r\n      options.ajaxError = this.ajaxError()\r\n    }\r\n\r\n    const jolokia = new Jolokia(options)\r\n    jolokia.stop()\r\n\r\n    // https://github.com/hawtio/hawtio-next/issues/832\r\n    // at this stage we didn't call Jolokia yet and first attempt, when the server returns 401/403, we may\r\n    // get native browser popup to enter Basic Auth credentials.\r\n    // ideally we should prevent this dialog, but it's not possible with xhr. only with Fetch API with\r\n    // \"credentials:'omit'\". for now let's leave as is\r\n\r\n    // let's check if we can call faster jolokia.list()\r\n    await this.checkListOptimisation(jolokia)\r\n\r\n    // Run any post-create processing that should be done before the resolved\r\n    // Jolokia is returned\r\n    postCreate?.(jolokia)\r\n\r\n    return jolokia\r\n  }\r\n\r\n  private async beforeSend(): Promise<JQueryBeforeSend> {\r\n    const connection = await connectService.getCurrentConnection()\r\n    // Just set Authorization for now...\r\n    const header = 'Authorization'\r\n    if ((await userService.isLogin()) && userService.getToken()) {\r\n      log.debug('Set authorization header to token')\r\n      return (xhr: JQueryXHR) => {\r\n        if (userService.getToken()) {\r\n          xhr.setRequestHeader(header, `Bearer ${userService.getToken()}`)\r\n        }\r\n      }\r\n    } else if (connection && connection.token) {\r\n      // TODO: when?\r\n      return (xhr: JQueryXHR) => xhr.setRequestHeader(header, `Bearer ${connection.token}`)\r\n    } else if (connection && connection.username && connection.password) {\r\n      log.debug('Set authorization header to username/password')\r\n      const headerValue = basicAuthHeaderValue(connection.username, connection.password)\r\n      return (xhr: JQueryXHR) => xhr.setRequestHeader(header, headerValue)\r\n    } else {\r\n      const token = getCookie('XSRF-TOKEN')\r\n      if (token) {\r\n        // For CSRF protection with Spring Security\r\n        log.debug('Set XSRF token header from cookies')\r\n        return (xhr: JQueryXHR) => xhr.setRequestHeader('X-XSRF-TOKEN', token)\r\n      } else {\r\n        log.debug('Not set any authorization header')\r\n        return () => {\r\n          /* no-op */\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private ajaxError(resolve?: AjaxErrorResolver): JQueryAjaxError {\r\n    const errorThreshold = 2\r\n    let errorCount = 0\r\n    let errorToastDisplayed = false\r\n    return (xhr: JQueryXHR) => {\r\n      switch (xhr.status) {\r\n        case 401:\r\n        case 403: {\r\n          const url = new URL(window.location.href)\r\n          // If window was opened to connect to remote Jolokia endpoint\r\n          if (url.searchParams.has(PARAM_KEY_CONNECTION) || sessionStorage.getItem(SESSION_KEY_CURRENT_CONNECTION)) {\r\n            // we're in connected tab/window and Jolokia access attempt ended with 401/403\r\n            // because xhr was used we _should_ have seen native browser popup to enter credentials and later\r\n            // to store them in browser's password manager. If user closes this dialog and doesn't enter any valid\r\n            // credentials we should display connect/login page with React dialog which accepts and stores the\r\n            // credentials in sessionStorage using encryption.\r\n            // but this is NOT possible in insecure context where we can't use window.crypto.subtle object\r\n            if (!window.isSecureContext) {\r\n              // this won't work if user manually browses to URL with con=connection-id.\r\n              // there will be \"Scripts may not close windows that were not opened by script.\" warning in console\r\n              window.close()\r\n              return\r\n            }\r\n            const loginPath = connectService.getLoginPath()\r\n            if (url.pathname !== loginPath) {\r\n              // ... and not showing the login modal\r\n              this.jolokia?.then(jolokia => jolokia.stop())\r\n              const redirectUrl = window.location.href\r\n              url.pathname = loginPath\r\n              url.searchParams.append(PARAM_KEY_REDIRECT, redirectUrl)\r\n              // full browser refresh\r\n              window.location.href = url.href\r\n            }\r\n          } else {\r\n            // just logout\r\n            userService.isLogin().then(login => {\r\n              log.debug('Logging out due to jQuery ajax error: status =', xhr.status)\r\n              login && userService.logout()\r\n            })\r\n          }\r\n          break\r\n        }\r\n        default: {\r\n          errorCount++\r\n          const updateRate = this.loadUpdateRate()\r\n          const validityPeriod = updateRate * (errorThreshold + 1)\r\n          setTimeout(() => {\r\n            errorCount--\r\n            if (errorCount == 0) {\r\n              errorToastDisplayed = false\r\n            }\r\n            return errorCount\r\n          }, validityPeriod)\r\n          if (errorCount > errorThreshold && !errorToastDisplayed) {\r\n            eventService.notify({\r\n              type: 'danger',\r\n              message: 'Connection lost. Will attempt reconnection...',\r\n              // -100ms is to not overlap between update and notification\r\n              duration: updateRate - 100,\r\n            })\r\n            errorToastDisplayed = true\r\n          }\r\n        }\r\n      }\r\n\r\n      // Resolve any waiting promise that might be blocked by the error\r\n      resolve?.()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Queries available server-side MBean to check if we can call optimised `jolokia.list()`\r\n   * operation.\r\n   *\r\n   * @param jolokia Jolokia instance to use\r\n   */\r\n  protected async checkListOptimisation(jolokia: Jolokia): Promise<void> {\r\n    log.debug('Check if we can call optimised jolokia.list() operation')\r\n    return new Promise<void>(resolve => {\r\n      const successFn: NonNullable<ListRequestOptions['success']> = (value: ListResponse) => {\r\n        // check if the MBean exists by testing whether the returned value has\r\n        // the 'op' property\r\n        if (isMBeanInfo(value) && isObject(value.op)) {\r\n          this.config.method = JolokiaListMethod.OPTIMISED\r\n        } else {\r\n          // we could get 403 error, mark the method as special case,\r\n          // which equals LIST=GENERAL in practice\r\n          this.config.method = JolokiaListMethod.UNDETERMINED\r\n        }\r\n        log.debug('Jolokia list method:', JolokiaListMethod[this.config.method])\r\n        resolve()\r\n      }\r\n\r\n      const errorFn: NonNullable<ListRequestOptions['error']> = (response: ErrorResponse) => {\r\n        log.debug('Operation \"list\" failed due to:', response.error)\r\n        log.debug('Optimisation on jolokia.list() not available')\r\n        resolve() // optimisation not happening\r\n      }\r\n\r\n      jolokia.list(\r\n        escapeMBeanPath(this.config.mbean),\r\n        onListSuccessAndError(successFn, errorFn, { ajaxError: this.ajaxError(resolve) }),\r\n      )\r\n    })\r\n  }\r\n\r\n  private async loadJolokiaOptions(): Promise<BaseRequestOptions> {\r\n    const opts = { ...DEFAULT_JOLOKIA_OPTIONS, ...this.loadJolokiaStoredOptions() }\r\n\r\n    const jolokiaUrl = await this.getJolokiaUrl()\r\n    if (jolokiaUrl) {\r\n      opts.url = jolokiaUrl\r\n    }\r\n    return opts\r\n  }\r\n\r\n  /**\r\n   * Get the full Jolokia URL that the service is connected to.\r\n   *\r\n   * The origin part (`http(s)://host:port`) is resolved based on `window.location`.\r\n   *\r\n   * @see {@link getJolokiaUrl}\r\n   */\r\n  async getFullJolokiaUrl(): Promise<string> {\r\n    const jolokiaUrl = (await this.getJolokiaUrl()) ?? ''\r\n    if (jolokiaUrl.match(/^https?:\\/\\//)) {\r\n      return jolokiaUrl\r\n    }\r\n\r\n    const { origin } = window.location\r\n    if (jolokiaUrl.startsWith('/')) {\r\n      return `${origin}${jolokiaUrl}`\r\n    }\r\n\r\n    const basePath = hawtio.getBasePath() ?? ''\r\n    return `${origin}${basePath}/${jolokiaUrl}`\r\n  }\r\n\r\n  async getListMethod(): Promise<JolokiaListMethod> {\r\n    // Need to wait for Jolokia instance as it might update the list method\r\n    await this.getJolokia()\r\n    return this.config.method\r\n  }\r\n\r\n  list(options?: ListRequestOptions): Promise<OptimisedJmxDomains> {\r\n    return this.doList([], options)\r\n  }\r\n\r\n  sublist(paths: string | string[], options?: ListRequestOptions): Promise<OptimisedJmxDomains> {\r\n    return this.doList(Array.isArray(paths) ? paths : [paths], options)\r\n  }\r\n\r\n  private async doList(paths: string[], options: ListRequestOptions = {}): Promise<OptimisedJmxDomains> {\r\n    // Granularity of the return value is MBean info and cannot be smaller\r\n    paths.forEach(path => {\r\n      if (path.split('/').length > 2) {\r\n        throw new Error('Path cannot specify children of MBean (attr, op, etc.): ' + path)\r\n      }\r\n    })\r\n\r\n    const jolokia = await this.getJolokia()\r\n    if (jolokia.CLIENT_VERSION === 'DUMMY') {\r\n      // For dummy Jolokia client, it's too difficult to properly resolve the promise\r\n      // of complex bulk list request, so shortcut here.\r\n      return {}\r\n    }\r\n\r\n    const { method, mbean } = this.config\r\n\r\n    const { success, error: errorFn, ajaxError } = options\r\n\r\n    return new Promise((resolve, reject) => {\r\n      // Override ajaxError to make sure it terminates in case of ajax error\r\n      options.ajaxError = (xhr, text, error) => {\r\n        ajaxError?.(xhr, text, error)\r\n        reject(error)\r\n      }\r\n      // Overwrite max depth as listing MBeans requires some constant depth to work\r\n      // See: https://github.com/hawtio/hawtio-next/issues/670\r\n      const { maxDepth } = this.loadJolokiaStoredOptions()\r\n      if (maxDepth < JOLOKIA_LIST_MAX_DEPTH) {\r\n        options.maxDepth = JOLOKIA_LIST_MAX_DEPTH\r\n      }\r\n      switch (method) {\r\n        case JolokiaListMethod.OPTIMISED: {\r\n          log.debug('Invoke Jolokia list MBean in optimised mode:', paths)\r\n          const execOptions = onExecuteSuccessAndError(\r\n            value => {\r\n              // For empty or single list, the first path should be enough\r\n              const path = paths?.[0]?.split('/')\r\n              const domains = this.unwindListResponse(value, path)\r\n              success?.(domains)\r\n              resolve(domains)\r\n            },\r\n            error => {\r\n              errorFn?.(error)\r\n              reject(error)\r\n            },\r\n            options as BaseRequestOptions,\r\n          )\r\n          if (paths.length === 0) {\r\n            jolokia.execute(mbean, 'list()', execOptions)\r\n          } else if (paths.length === 1) {\r\n            jolokia.execute(mbean, 'list(java.lang.String)', paths[0], execOptions)\r\n          } else {\r\n            // Bulk request and merge the result\r\n            const requests: Request[] = paths.map(path => ({\r\n              type: 'exec',\r\n              mbean,\r\n              operation: 'list(java.lang.String)',\r\n              arguments: [path],\r\n              config: execOptions,\r\n            }))\r\n            this.bulkList(jolokia, requests, execOptions)\r\n          }\r\n          break\r\n        }\r\n        case JolokiaListMethod.DEFAULT:\r\n        case JolokiaListMethod.UNDETERMINED:\r\n        default: {\r\n          log.debug('Invoke Jolokia list MBean in default mode:', paths)\r\n          const listOptions = onListSuccessAndError(\r\n            value => {\r\n              // For empty or single list, the first path should be enough\r\n              const path = paths?.[0]?.split('/')\r\n              const domains = this.unwindListResponse(value, path)\r\n              success?.(domains)\r\n              resolve(domains)\r\n            },\r\n            error => {\r\n              errorFn?.(error)\r\n              reject(error)\r\n            },\r\n            options,\r\n          )\r\n          if (paths.length === 0) {\r\n            jolokia.list(listOptions)\r\n          } else if (paths.length === 1) {\r\n            jolokia.list(paths[0] ?? '', listOptions)\r\n          } else {\r\n            // Bulk request and merge the result\r\n            const requests: Request[] = paths.map(path => ({ type: 'list', path, config: listOptions }))\r\n            this.bulkList(jolokia, requests, listOptions)\r\n          }\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Detects whether the given response comes from optimised or default list and\r\n   * restores its shape to the standard list response of type {@link OptimisedJmxDomains}.\r\n   *\r\n   * @param response response value from Jolokia LIST\r\n   * @param path optional path information to restore the response to {@link OptimisedJmxDomains}\r\n   */\r\n  unwindListResponse(response: unknown, path?: string[]): OptimisedJmxDomains {\r\n    if (isOptimisedListResponse(response)) {\r\n      // Post process cached MBean info\r\n      const { cache, domains } = response\r\n      Object.entries(domains).forEach(([_, domain]) => {\r\n        Object.entries(domain).forEach(([mbeanName, mbeanOrCache]) => {\r\n          if (isString(mbeanOrCache)) {\r\n            domain[mbeanName] = cache[mbeanOrCache] as OptimisedMBeanInfo\r\n          }\r\n        })\r\n      })\r\n      return domains as OptimisedJmxDomains\r\n    }\r\n\r\n    if (isJmxDomains(response)) {\r\n      return response\r\n    }\r\n\r\n    if (isJmxDomain(response)) {\r\n      const domain = path?.[0]\r\n      if (!domain) {\r\n        throw new Error('Domain must be provided: ' + path)\r\n      }\r\n      return { [domain]: response }\r\n    }\r\n\r\n    if (isMBeanInfo(response)) {\r\n      const domain = path?.[0]\r\n      const mbean = path?.[1]\r\n      if (!domain || !mbean) {\r\n        throw new Error('Domain/property list must be provided: ' + path)\r\n      }\r\n      return { [domain]: { [mbean]: response } }\r\n    }\r\n\r\n    throw new Error('Unexpected Jolokia list response: ' + JSON.stringify(response))\r\n  }\r\n\r\n  private bulkList(jolokia: Jolokia, requests: Request[], listOptions: ListRequestOptions) {\r\n    const bulkResponse: Response[] = []\r\n    const mergeResponses = () => {\r\n      const domains = bulkResponse\r\n        .filter(response => {\r\n          if (response.status === 200) {\r\n            return true\r\n          } else {\r\n            const error = response as ErrorResponse\r\n            log.warn('Bulk list response error:', error.error)\r\n            return false\r\n          }\r\n        })\r\n        .map(response => {\r\n          switch (response.request.type) {\r\n            case 'list': {\r\n              const path = response.request.path?.split('/')\r\n              return this.unwindListResponse(response.value, path)\r\n            }\r\n            case 'exec': {\r\n              const path = response.request.arguments as string[]\r\n              return this.unwindListResponse(response.value, path)\r\n            }\r\n            default:\r\n              return this.unwindListResponse(response.value)\r\n          }\r\n        })\r\n        .reduce((merged, response) => this.mergeDomains(response, merged), {})\r\n      listOptions.success?.(domains)\r\n    }\r\n    jolokia.request(\r\n      requests,\r\n      onBulkSuccessAndError(\r\n        response => {\r\n          bulkResponse.push(response)\r\n          // Resolve only when all the responses from the bulk request are collected\r\n          if (bulkResponse.length === requests.length) {\r\n            mergeResponses()\r\n          }\r\n        },\r\n        error => {\r\n          log.error('Error during bulk list:', error)\r\n          bulkResponse.push(error)\r\n          // Resolve only when all the responses from the bulk request are collected\r\n          if (bulkResponse.length === requests.length) {\r\n            mergeResponses()\r\n          }\r\n        },\r\n        // Reuse the list options other than success and error functions\r\n        listOptions as BaseRequestOptions,\r\n      ),\r\n    )\r\n  }\r\n\r\n  private mergeDomains(source: OptimisedJmxDomains, target: OptimisedJmxDomains): OptimisedJmxDomains {\r\n    Object.entries(source).forEach(([domainName, domain]) => {\r\n      const targetDomain = target[domainName]\r\n      if (targetDomain) {\r\n        Object.entries(domain).forEach(([mbeanName, mbean]) => {\r\n          // Latter always overrides former\r\n          targetDomain[mbeanName] = mbean\r\n        })\r\n      } else {\r\n        target[domainName] = domain\r\n      }\r\n    })\r\n    return target\r\n  }\r\n\r\n  async readAttributes(mbean: string): Promise<AttributeValues> {\r\n    const jolokia = await this.getJolokia()\r\n    return new Promise(resolve => {\r\n      jolokia.request(\r\n        { type: 'read', mbean },\r\n        onSuccessAndError(\r\n          response => resolve(response.value as AttributeValues),\r\n          error => {\r\n            log.error('Error during readAttributes:', error)\r\n            resolve({})\r\n          },\r\n        ),\r\n      )\r\n    })\r\n  }\r\n\r\n  async readAttribute(mbean: string, attribute: string): Promise<unknown> {\r\n    const jolokia = await this.getJolokia()\r\n    return new Promise(resolve => {\r\n      jolokia.request(\r\n        { type: 'read', mbean, attribute },\r\n        onSuccessAndError(\r\n          response => resolve(response.value as unknown),\r\n          error => {\r\n            log.error('Error during readAttribute:', error)\r\n            resolve(null)\r\n          },\r\n        ),\r\n      )\r\n    })\r\n  }\r\n\r\n  async writeAttribute(mbean: string, attribute: string, value: unknown): Promise<unknown> {\r\n    const jolokia = await this.getJolokia()\r\n    return new Promise(resolve => {\r\n      jolokia.request(\r\n        { type: 'write', mbean, attribute, value },\r\n        onSuccessAndError(\r\n          response => resolve(response.value as unknown),\r\n          error => {\r\n            log.error('Error during writeAttribute:', error)\r\n            resolve(null)\r\n          },\r\n        ),\r\n      )\r\n    })\r\n  }\r\n\r\n  async execute(mbean: string, operation: string, args: unknown[] = []): Promise<unknown> {\r\n    const jolokia = await this.getJolokia()\r\n    return new Promise((resolve, reject) => {\r\n      jolokia.execute(\r\n        mbean,\r\n        operation,\r\n        ...args,\r\n        onExecuteSuccessAndError(\r\n          response => resolve(response),\r\n          error => reject(error.stacktrace || error.error),\r\n        ),\r\n      )\r\n    })\r\n  }\r\n\r\n  async search(mbeanPattern: string): Promise<string[]> {\r\n    const jolokia = await this.getJolokia()\r\n    return new Promise(resolve => {\r\n      jolokia.search(\r\n        mbeanPattern,\r\n        onSearchSuccessAndError(\r\n          response => resolve(response as string[]),\r\n          error => {\r\n            log.error('Error during search:', error)\r\n            resolve([])\r\n          },\r\n        ),\r\n      )\r\n    })\r\n  }\r\n\r\n  async bulkRequest(requests: Request[]): Promise<Response[]> {\r\n    const jolokia = await this.getJolokia()\r\n    return new Promise(resolve => {\r\n      const bulkResponse: Response[] = []\r\n      jolokia.request(\r\n        requests,\r\n        onBulkSuccessAndError(\r\n          response => {\r\n            bulkResponse.push(response)\r\n            // Resolve only when all the responses from the bulk request are collected\r\n            if (bulkResponse.length === requests.length) {\r\n              resolve(bulkResponse)\r\n            }\r\n          },\r\n          error => {\r\n            log.error('Error during bulkRequest:', error)\r\n            bulkResponse.push(error)\r\n            // Resolve only when all the responses from the bulk request are collected\r\n            if (bulkResponse.length === requests.length) {\r\n              resolve(bulkResponse)\r\n            }\r\n          },\r\n        ),\r\n      )\r\n    })\r\n  }\r\n\r\n  async register(request: Request, callback: (response: Response) => void): Promise<number> {\r\n    const jolokia = await this.getJolokia()\r\n    return jolokia.register(callback, request)\r\n  }\r\n\r\n  async unregister(handle: number) {\r\n    const jolokia = await this.getJolokia()\r\n    jolokia.unregister(handle)\r\n  }\r\n\r\n  loadUpdateRate(): number {\r\n    const value = localStorage.getItem(STORAGE_KEY_UPDATE_RATE)\r\n    return value ? parseInt(JSON.parse(value)) : DEFAULT_UPDATE_RATE\r\n  }\r\n\r\n  saveUpdateRate(value: number): void {\r\n    localStorage.setItem(STORAGE_KEY_UPDATE_RATE, JSON.stringify(value))\r\n  }\r\n\r\n  loadAutoRefresh(): boolean {\r\n    const value = localStorage.getItem(STORAGE_KEY_AUTO_REFRESH)\r\n    return value ? parseBoolean(value) : DEFAULT_AUTO_REFRESH\r\n  }\r\n\r\n  saveAutoRefresh(value: boolean): void {\r\n    localStorage.setItem(STORAGE_KEY_AUTO_REFRESH, JSON.stringify(value))\r\n  }\r\n\r\n  loadJolokiaStoredOptions(): JolokiaStoredOptions {\r\n    const item = localStorage.getItem(STORAGE_KEY_JOLOKIA_OPTIONS)\r\n    const options: JolokiaStoredOptions = item ? JSON.parse(item) : {}\r\n    const maxDepth = options.maxDepth ?? DEFAULT_MAX_DEPTH\r\n    const maxCollectionSize = options.maxCollectionSize ?? DEFAULT_MAX_COLLECTION_SIZE\r\n    return { maxDepth, maxCollectionSize }\r\n  }\r\n\r\n  saveJolokiaStoredOptions(options: JolokiaStoredOptions) {\r\n    localStorage.setItem(STORAGE_KEY_JOLOKIA_OPTIONS, JSON.stringify(options))\r\n  }\r\n}\r\n\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\n/**\r\n * Dummy Jolokia implementation that does nothing.\r\n */\r\nclass DummyJolokia implements Jolokia {\r\n  CLIENT_VERSION = 'DUMMY'\r\n  isDummy = true\r\n  private running = false\r\n\r\n  request(...args: unknown[]) {\r\n    return null\r\n  }\r\n\r\n  getAttribute(\r\n    mbean: string,\r\n    attribute: string,\r\n    path?: string | AttributeRequestOptions,\r\n    opts?: AttributeRequestOptions,\r\n  ) {\r\n    if (typeof path !== 'string') {\r\n      path?.success?.({})\r\n    }\r\n    opts?.success?.({})\r\n    return null\r\n  }\r\n  setAttribute(\r\n    mbean: string,\r\n    attribute: string,\r\n    value: unknown,\r\n    path?: string | AttributeRequestOptions,\r\n    opts?: AttributeRequestOptions,\r\n  ) {\r\n    if (typeof path !== 'string') {\r\n      path?.success?.({})\r\n    }\r\n    opts?.success?.({})\r\n  }\r\n\r\n  execute(mbean: string, operation: string, ...args: unknown[]) {\r\n    args?.forEach(arg => is(arg, type({ success: func() })) && arg.success(null))\r\n    return null\r\n  }\r\n  search(mbeanPattern: string, opts?: SearchRequestOptions) {\r\n    opts?.success?.([])\r\n    return null\r\n  }\r\n  list(path?: string | string[] | ListRequestOptions, opts?: ListRequestOptions) {\r\n    if (typeof path !== 'string' && !Array.isArray(path)) {\r\n      path?.success?.({})\r\n    }\r\n    opts?.success?.({})\r\n    return null\r\n  }\r\n  version(opts?: VersionRequestOptions) {\r\n    opts?.success?.({} as VersionResponse)\r\n    return {} as VersionResponse\r\n  }\r\n\r\n  register(params: unknown, ...request: unknown[]) {\r\n    return 0\r\n  }\r\n  unregister(handle: number) {\r\n    // no-op\r\n  }\r\n  jobs() {\r\n    return []\r\n  }\r\n  start(period: number) {\r\n    this.running = true\r\n  }\r\n  stop() {\r\n    this.running = false\r\n  }\r\n  isRunning() {\r\n    return this.running\r\n  }\r\n\r\n  addNotificationListener(opts: NotificationOptions) {\r\n    // no-op\r\n  }\r\n  removeNotificationListener(handle: { id: string; mode: NotificationMode }) {\r\n    // no-op\r\n  }\r\n  unregisterNotificationClient() {\r\n    // no-op\r\n  }\r\n}\r\n/* eslint-enable @typescript-eslint/no-unused-vars */\r\n\r\nexport const jolokiaService = new JolokiaService()\r\n","import { getFingerprint } from '@thumbmarkjs/thumbmarkjs'\r\n\r\nexport async function generateKey(salt: ArrayBufferView): Promise<CryptoKey> {\r\n  const fingerprint = await getFingerprint()\r\n  const data = new TextEncoder().encode(fingerprint as string)\r\n  const key = await window.crypto.subtle.importKey('raw', data, { name: 'PBKDF2' }, false, ['deriveKey'])\r\n  const algorithm = {\r\n    name: 'PBKDF2',\r\n    salt,\r\n    iterations: 100000,\r\n    hash: 'SHA-256',\r\n  }\r\n  const keyType = {\r\n    name: 'AES-GCM',\r\n    length: 256,\r\n  }\r\n  return window.crypto.subtle.deriveKey(algorithm, key, keyType, true, ['encrypt', 'decrypt'])\r\n}\r\n\r\nexport function toBase64(data: Uint8Array): string {\r\n  return window.btoa(String.fromCharCode(...Array.from(data)))\r\n}\r\n\r\nexport function toByteArray(data: string): Uint8Array {\r\n  return new Uint8Array(Array.from(window.atob(data)).map(c => c.charCodeAt(0)))\r\n}\r\n\r\nexport async function encrypt(key: CryptoKey, data: string): Promise<string> {\r\n  const iv = window.crypto.getRandomValues(new Uint8Array(12))\r\n  const encodedData = new TextEncoder().encode(data)\r\n  const encrypted = await window.crypto.subtle.encrypt({ name: 'AES-GCM', iv }, key, encodedData)\r\n  return toBase64(iv) + '.' + toBase64(new Uint8Array(encrypted))\r\n}\r\n\r\nexport async function decrypt(key: CryptoKey, data: string): Promise<string> {\r\n  const iv = toByteArray(data.split('.')[0] ?? '')\r\n  const encrypted = toByteArray(data.split('.')[1] ?? '')\r\n  const decrypted = await window.crypto.subtle.decrypt({ name: 'AES-GCM', iv }, key, encrypted)\r\n  return new TextDecoder('utf-8').decode(new Uint8Array(decrypted))\r\n}\r\n","import { isBlank } from './strings'\r\n\r\n/**\r\n * Join the supplied strings together using '/', stripping any leading/ending '/'\r\n * from the supplied strings if needed, except the first and last string.\r\n */\r\nexport function joinPaths(...paths: string[]): string {\r\n  const tmp: string[] = []\r\n  paths.forEach((path, index) => {\r\n    if (isBlank(path)) {\r\n      return\r\n    }\r\n    if (path === '/') {\r\n      tmp.push('')\r\n      return\r\n    }\r\n    if (index !== 0 && path.match(/^\\//)) {\r\n      path = path.slice(1)\r\n    }\r\n    if (index < paths.length - 1 && path.match(/\\/$/)) {\r\n      path = path.slice(0, path.length - 1)\r\n    }\r\n    if (!isBlank(path)) {\r\n      tmp.push(path)\r\n    }\r\n  })\r\n  return tmp.join('/')\r\n}\r\n\r\n/**\r\n * Gets a query value from the given URL.\r\n *\r\n * @param url URL\r\n * @param parameterName the URI parameter value to get\r\n * @returns the URI-decoded parameter value\r\n */\r\nexport function getQueryParameterValue(url: string, parameterName: string): string | null {\r\n  const query = url.split('?')[1] ?? ''\r\n  const params = query.split('&') ?? []\r\n  const value = params\r\n    .map(param => param.split('='))\r\n    .find(([key, _]) => key && decodeURIComponent(key) === parameterName)?.[1]\r\n  return value ? decodeURIComponent(value) : null\r\n}\r\n","import { eventService, hawtio } from '@hawtiosrc/core'\r\nimport { decrypt, encrypt, generateKey, toBase64, toByteArray } from '@hawtiosrc/util/crypto'\r\nimport { toString } from '@hawtiosrc/util/strings'\r\nimport { joinPaths } from '@hawtiosrc/util/urls'\r\nimport Jolokia from 'jolokia.js'\r\nimport { log } from './globals'\r\n\r\nexport type Connections = {\r\n  // key is ID, not name, so we can alter the name\r\n  [key: string]: Connection\r\n}\r\n\r\nexport type Connection = {\r\n  id: string\r\n  name: string\r\n  scheme: 'http' | 'https'\r\n  host: string\r\n  port: number\r\n  path: string\r\n\r\n  jolokiaUrl?: string\r\n  username?: string\r\n  password?: string\r\n\r\n  // TODO: check if it is used\r\n  token?: string\r\n}\r\n\r\nexport const INITIAL_CONNECTION: Connection = {\r\n  id: '',\r\n  name: '',\r\n  scheme: 'https',\r\n  host: 'localhost',\r\n  port: 8080,\r\n  path: '/hawtio/jolokia',\r\n} as const\r\n\r\nexport type ConnectionTestResult = {\r\n  status: ConnectStatus\r\n  message: string\r\n}\r\n\r\nexport type ConnectionCredentials = {\r\n  username: string\r\n  password: string\r\n}\r\n\r\nexport type LoginResult =\r\n  | { type: 'success' }\r\n  | { type: 'failure' }\r\n  | { type: 'throttled'; retryAfter: number }\r\n  | { type: 'session-expired' }\r\n\r\n/**\r\n * Remote connection status. \"not-reachable-securely\" is for connections that can't be used in insecure contexts.\r\n */\r\nexport type ConnectStatus = 'not-reachable' | 'reachable' | 'not-reachable-securely'\r\n\r\nconst STORAGE_KEY_CONNECTIONS = 'connect.connections'\r\n\r\nconst SESSION_KEY_SALT = 'connect.salt'\r\nconst SESSION_KEY_CREDENTIALS = 'connect.credentials' // Encrypted\r\n\r\nexport const SESSION_KEY_CURRENT_CONNECTION = 'connect.currentConnection'\r\nexport const PARAM_KEY_CONNECTION = 'con'\r\nexport const PARAM_KEY_REDIRECT = 'redirect'\r\n\r\nconst LOGIN_PATH = '/connect/login'\r\n\r\nexport interface IConnectService {\r\n  getCurrentConnectionName(): string | null\r\n  getCurrentConnection(): Promise<Connection | null>\r\n  getCurrentCredentials(): Promise<ConnectionCredentials | null>\r\n  loadConnections(): Connections\r\n  saveConnections(connections: Connections): void\r\n  getConnection(name: string): Connection | null\r\n  connectionToUrl(connection: Connection): string\r\n  checkReachable(connection: Connection): Promise<ConnectStatus>\r\n  testConnection(connection: Connection): Promise<ConnectionTestResult>\r\n  connect(connection: Connection): void\r\n  login(username: string, password: string): Promise<LoginResult>\r\n  redirect(): void\r\n  createJolokia(connection: Connection, checkCredentials?: boolean): Jolokia\r\n  getJolokiaUrl(connection: Connection): string\r\n  getJolokiaUrlFromName(name: string): string | null\r\n  getLoginPath(): string\r\n  export(connections: Connections): void\r\n}\r\n\r\nclass ConnectService implements IConnectService {\r\n  private readonly currentConnection: string | null\r\n\r\n  constructor() {\r\n    this.currentConnection = this.initCurrentConnection()\r\n  }\r\n\r\n  private initCurrentConnection(): string | null {\r\n    // Check remote connection from URL query param\r\n    const url = new URL(window.location.href)\r\n    const searchParams = url.searchParams\r\n    log.debug('Checking search params:', searchParams.toString())\r\n    let conn = searchParams.get(PARAM_KEY_CONNECTION)\r\n    if (conn) {\r\n      searchParams.delete(PARAM_KEY_CONNECTION, conn)\r\n      sessionStorage.setItem(SESSION_KEY_CURRENT_CONNECTION, JSON.stringify(conn))\r\n      // clear \"con\" parameter - will be available in session storage only\r\n      url.search = searchParams.toString()\r\n      window.history.replaceState(null, '', url)\r\n\r\n      return conn\r\n    }\r\n\r\n    // Case when user may refresh the page after \"con\" parameter has already been cleared\r\n    // Check remote connection from session storage\r\n    conn = sessionStorage.getItem(SESSION_KEY_CURRENT_CONNECTION)\r\n    return conn ? JSON.parse(conn) : null\r\n  }\r\n\r\n  getCurrentConnectionId(): string | null {\r\n    return this.currentConnection\r\n  }\r\n\r\n  getCurrentConnectionName(): string | null {\r\n    const id = this.currentConnection\r\n    const connections = this.loadConnections()\r\n    if (!id || !connections[id!]) {\r\n      return null\r\n    }\r\n    return connections[id!]!.name ?? null\r\n  }\r\n\r\n  async getCurrentConnection(): Promise<Connection | null> {\r\n    const conn = this.currentConnection ? this.getConnection(this.currentConnection) : null\r\n    if (!conn) {\r\n      return null\r\n    }\r\n\r\n    // Apply credentials if it exists\r\n    const credentials = await this.getCurrentCredentials()\r\n    if (!credentials) {\r\n      return conn\r\n    }\r\n    conn.username = credentials.username\r\n    conn.password = credentials.password\r\n    this.clearCredentialsOnLogout()\r\n\r\n    return conn\r\n  }\r\n\r\n  private clearCredentialsOnLogout() {\r\n    eventService.onLogout(() => sessionStorage.clear())\r\n  }\r\n\r\n  async getCurrentCredentials(): Promise<ConnectionCredentials | null> {\r\n    if (!window.isSecureContext) {\r\n      return null\r\n    }\r\n    const saltItem = sessionStorage.getItem(SESSION_KEY_SALT)\r\n    if (!saltItem) {\r\n      return null\r\n    }\r\n    const salt = toByteArray(saltItem)\r\n\r\n    const credItem = sessionStorage.getItem(SESSION_KEY_CREDENTIALS)\r\n    if (!credItem) {\r\n      return null\r\n    }\r\n    const key = await generateKey(salt)\r\n    return JSON.parse(await decrypt(key, credItem))\r\n  }\r\n\r\n  private async setCurrentCredentials(credentials: ConnectionCredentials) {\r\n    const salt = window.crypto.getRandomValues(new Uint8Array(16))\r\n    sessionStorage.setItem(SESSION_KEY_SALT, toBase64(salt))\r\n    const key = await generateKey(salt)\r\n    const encrypted = await encrypt(key, JSON.stringify(credentials))\r\n    sessionStorage.setItem(SESSION_KEY_CREDENTIALS, encrypted)\r\n  }\r\n\r\n  loadConnections(): Connections {\r\n    const item = localStorage.getItem(STORAGE_KEY_CONNECTIONS)\r\n    if (!item) {\r\n      return {}\r\n    }\r\n    const conns: Connections = JSON.parse(item)\r\n\r\n    Object.values(conns).forEach(conn => {\r\n      // Make sure scheme is not compromised for each connection\r\n      if (conn.scheme !== 'http' && conn.scheme !== 'https') {\r\n        log.warn('Invalid scheme for connection:', conn)\r\n        // Force resetting to 'http' for any invalid scheme\r\n        conn.scheme = 'http'\r\n      }\r\n      // Make sure there's an ID for each connection\r\n      if (!conn.id) {\r\n        this.generateId(conn, conns)\r\n      }\r\n    })\r\n\r\n    return conns\r\n  }\r\n\r\n  saveConnections(connections: Connections) {\r\n    localStorage.setItem(STORAGE_KEY_CONNECTIONS, JSON.stringify(connections))\r\n  }\r\n\r\n  generateId(connection: Connection, connections: Connections) {\r\n    for (;;) {\r\n      if (!connection.id) {\r\n        // first, generate only for new connection and keep for imported connection\r\n        connection.id = '' + Math.floor(Math.random() * 1000000)\r\n        connection.id = 'c' + connection.id.padStart(6, '0') + '-' + Date.now()\r\n      }\r\n      let exists = false\r\n      for (const c in connections) {\r\n        if (c === connection.id) {\r\n          exists = true\r\n        }\r\n        if (exists) {\r\n          // we've imported a connection and there's already a connection with given ID\r\n          // so we have to re-generate id for the imported connection\r\n          connection.id = ''\r\n        }\r\n      }\r\n      if (!exists) {\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  getConnection(name: string): Connection | null {\r\n    const connections = this.loadConnections()\r\n    return connections[name] ?? null\r\n  }\r\n\r\n  connectionToUrl(connection: Connection): string {\r\n    let url = `${connection.scheme}://${connection.host}:${connection.port}`\r\n    if (!connection.path.startsWith('/')) {\r\n      url += '/'\r\n    }\r\n    url += connection.path\r\n    return url\r\n  }\r\n\r\n  async checkReachable(connection: Connection): Promise<ConnectStatus> {\r\n    try {\r\n      const result = await this.testConnection(connection)\r\n      return result.status\r\n    } catch (error) {\r\n      return 'not-reachable'\r\n    }\r\n  }\r\n\r\n  testConnection(connection: Connection): Promise<ConnectionTestResult> {\r\n    log.debug('Testing connection:', toString(connection))\r\n    // test the connection without credentials, so 401 or 403 are treated as \"reachable\", but actual\r\n    // connection will require authentication\r\n    // When server returns \"WWW-Authenticate: Basic xxx\", we can't prevent showing native popup dialog with xhr,\r\n    // but we can do that with fetch + \"credentials:'omit'\"\r\n    // However we have to include the credentials, because it's not only about \"Authorization\" header (which may\r\n    // be created using data stored in browser's password manager) - it's also about cookies. When testing\r\n    // reachability of remote Jolokia agent, we have to send JSESSIONID, because /proxy/* is protected. However\r\n    // we prevent native browser dialog because Hawtio proxy translates \"WWW-Authenticate: Basic xxx\", so it\r\n    // doesn't include \"Basic\" scheme. This is enough for the browser to skip the dialog. Even with xhr.\r\n    return new Promise<ConnectionTestResult>((resolve, reject) => {\r\n      try {\r\n        fetch(this.getJolokiaUrl(connection), {\r\n          method: 'post',\r\n          // with application/json, I'm getting \"CanceledError: Request stream has been aborted\" when running\r\n          // via hawtioMiddleware...\r\n          headers: { 'Content-Type': 'text/json' },\r\n          credentials: 'same-origin',\r\n          body: JSON.stringify({ type: 'version' }),\r\n        })\r\n          .then(response => {\r\n            if (response.ok) {\r\n              // 200-299\r\n              resolve({ status: 'reachable', message: 'Connection successful' })\r\n            } else if (response.status === 401) {\r\n              resolve({\r\n                status: window.isSecureContext ? 'reachable' : 'not-reachable-securely',\r\n                message: window.isSecureContext\r\n                  ? 'Connection successful (auth needed)'\r\n                  : 'Connection failed (insecure context)',\r\n              })\r\n            } else if (response.status === 403) {\r\n              this.forbiddenReasonMatches(response, 'HOST_NOT_ALLOWED').then(matches => {\r\n                if (matches) {\r\n                  resolve({ status: 'not-reachable', message: 'Host not allowlisted' })\r\n                } else {\r\n                  resolve({\r\n                    status: window.isSecureContext ? 'reachable' : 'not-reachable-securely',\r\n                    message: window.isSecureContext\r\n                      ? 'Connection successful (auth failed)'\r\n                      : 'Connection failed (insecure context)',\r\n                  })\r\n                }\r\n              })\r\n            } else {\r\n              resolve({ status: 'not-reachable', message: 'Connection failed' })\r\n            }\r\n          })\r\n          .catch(error => {\r\n            log.error('Exception', error)\r\n            reject(error)\r\n          })\r\n      } catch (error) {\r\n        log.error(error)\r\n        reject(error)\r\n      }\r\n    })\r\n  }\r\n\r\n  private async forbiddenReasonMatches(response: Response, reason: string): Promise<boolean> {\r\n    // Preserve compatibility with versions of Hawtio 2.x that return JSON on 403 responses\r\n    return response\r\n      .text()\r\n      .then(txt => {\r\n        const json = JSON.parse(txt)\r\n        // exception will propagate to .catch()\r\n        return json['reason'] === reason\r\n      })\r\n      .catch(_ => {\r\n        // Otherwise expect a response header containing a forbidden reason\r\n        return response.headers.get('Hawtio-Forbidden-Reason') === reason\r\n      })\r\n  }\r\n\r\n  connect(connection: Connection) {\r\n    log.debug('Connecting with options:', toString(connection))\r\n    const basepath = hawtio.getBasePath() ?? ''\r\n    const url = `${basepath}/?${PARAM_KEY_CONNECTION}=${connection.id}`\r\n    log.debug('Opening URL:', url)\r\n    // let's open the same connection in the same tab (2nd parameter)\r\n    window.open(url, connection.id)\r\n  }\r\n\r\n  /**\r\n   * Log in to the current connection.\r\n   */\r\n  async login(username: string, password: string): Promise<LoginResult> {\r\n    const connection = await this.getCurrentConnection()\r\n    if (!connection) {\r\n      return { type: 'failure' }\r\n    }\r\n\r\n    // Check credentials\r\n    const result = await new Promise<LoginResult>(resolve => {\r\n      connection.username = username\r\n      connection.password = password\r\n      this.createJolokia(connection, true).request(\r\n        { type: 'version' },\r\n        {\r\n          success: () => resolve({ type: 'success' }),\r\n          error: () => resolve({ type: 'failure' }),\r\n          ajaxError: (xhr: JQueryXHR) => {\r\n            log.debug('Login error:', xhr.status, xhr.statusText)\r\n            if (xhr.status === 429) {\r\n              // Login throttled\r\n              const retryAfter = parseInt(xhr.getResponseHeader('Retry-After') ?? '0')\r\n              resolve({ type: 'throttled', retryAfter })\r\n              return\r\n            }\r\n            if (xhr.status === 403 && 'SESSION_EXPIRED' === xhr.getResponseHeader('Hawtio-Forbidden-Reason')) {\r\n              resolve({ type: 'session-expired' })\r\n              return\r\n            }\r\n            resolve({ type: 'failure' })\r\n          },\r\n        },\r\n      )\r\n    })\r\n    if (result.type !== 'success') {\r\n      return result\r\n    }\r\n\r\n    // Persist credentials to session storage\r\n    if (window.isSecureContext) {\r\n      await this.setCurrentCredentials({ username, password })\r\n    }\r\n    this.clearCredentialsOnLogout()\r\n\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * Redirect to the URL specified in the query parameter {@link PARAM_KEY_REDIRECT}.\r\n   */\r\n  redirect() {\r\n    const url = new URL(window.location.href)\r\n    let redirect = url.searchParams.get(PARAM_KEY_REDIRECT) ?? '/'\r\n    let safeRedirect: boolean = false\r\n\r\n    try {\r\n      const { hostname, port, protocol, searchParams } = new URL(redirect)\r\n      let connectionKey = searchParams.get(PARAM_KEY_CONNECTION) ?? ''\r\n      if (connectionKey === '') {\r\n        connectionKey = sessionStorage.getItem(SESSION_KEY_CURRENT_CONNECTION) ?? ''\r\n      }\r\n      safeRedirect =\r\n        hostname === url.hostname &&\r\n        port === url.port &&\r\n        ['http:', 'https:'].includes(protocol) &&\r\n        connectionKey !== '' &&\r\n        connectionKey === this.currentConnection\r\n    } catch (_e) {\r\n      log.error('Invalid URL')\r\n      eventService.notify({\r\n        type: 'danger',\r\n        message: 'Redirect parameter was modified',\r\n      })\r\n    }\r\n\r\n    if (!safeRedirect) {\r\n      redirect = hawtio.getBasePath() ?? '/'\r\n    }\r\n\r\n    log.debug('Redirect to:', redirect)\r\n    window.location.href = encodeURI(redirect)\r\n  }\r\n\r\n  /**\r\n   * Create a Jolokia instance with the given connection.\r\n   */\r\n  createJolokia(connection: Connection, checkCredentials = false): Jolokia {\r\n    if (checkCredentials) {\r\n      return new Jolokia({\r\n        url: this.getJolokiaUrl(connection),\r\n        method: 'post',\r\n        mimeType: 'application/json',\r\n        username: connection.username,\r\n        password: connection.password,\r\n      })\r\n    }\r\n\r\n    return new Jolokia({\r\n      url: this.getJolokiaUrl(connection),\r\n      method: 'post',\r\n      mimeType: 'application/json',\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Get the Jolokia URL for the given connection.\r\n   */\r\n  getJolokiaUrl(connection: Connection): string {\r\n    log.debug('Connect to server with connection:', toString(connection))\r\n    if (connection.jolokiaUrl) {\r\n      log.debug('Using provided URL:', connection.jolokiaUrl)\r\n      return connection.jolokiaUrl\r\n    }\r\n\r\n    const url = joinPaths(\r\n      hawtio.getBasePath() ?? '',\r\n      '/proxy',\r\n      connection.scheme ?? 'http',\r\n      connection.host ?? 'localhost',\r\n      String(connection.port ?? 80),\r\n      connection.path,\r\n    )\r\n    log.debug('Using URL:', url)\r\n    return url\r\n  }\r\n\r\n  /**\r\n   * Get the Jolokia URL for the given connection name.\r\n   */\r\n  getJolokiaUrlFromName(name: string): string | null {\r\n    const connection = this.getConnection(name)\r\n    return connection ? this.getJolokiaUrl(connection) : null\r\n  }\r\n\r\n  getLoginPath(): string {\r\n    const basePath = hawtio.getBasePath()\r\n    return `${basePath}${LOGIN_PATH}`\r\n  }\r\n\r\n  export(connections: Connections) {\r\n    const content = JSON.stringify(Object.values(connections), null, '  ')\r\n    const url = URL.createObjectURL(new Blob([content], { type: 'application/json' }))\r\n    const link = document.createElement('a')\r\n    link.href = url\r\n    link.download = `hawtio-connections-${Date.now()}.json`\r\n    document.body.appendChild(link)\r\n    link.click()\r\n    document.body.removeChild(link)\r\n    URL.revokeObjectURL(url)\r\n  }\r\n}\r\n\r\nexport const connectService = new ConnectService()\r\n","/**\r\n * Escapes only tags ('<' and '>') as opposed to typical URL encodings.\r\n *\r\n * @param text string to be escaped\r\n */\r\nexport function escapeTags(text: string): string {\r\n  return text.replace('<', '&lt;').replace('>', '&gt;')\r\n}\r\n\r\n/**\r\n * Escapes characters that cannot be used as HTML `id` attribute.\r\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id\r\n *\r\n * Space characters are escaped to ''.\r\n *\r\n * @param text string to be escaped\r\n */\r\nexport function escapeHtmlId(text: string): string {\r\n  return text.replace(/\\s/g, '')\r\n}\r\n","import { escapeHtmlId, escapeTags } from '@hawtiosrc/util/htmls'\r\nimport { isEmpty } from '@hawtiosrc/util/objects'\r\nimport { matchWithWildcard, stringSorter, trimQuotes } from '@hawtiosrc/util/strings'\r\nimport { TreeViewDataItem } from '@patternfly/react-core'\r\nimport { CubeIcon, FolderIcon, FolderOpenIcon, LockIcon } from '@patternfly/react-icons'\r\nimport { MBeanAttribute, MBeanInfo, MBeanInfoError, MBeanOperation } from 'jolokia.js'\r\nimport React from 'react'\r\nimport { define, is, object, optional, record, string, type } from 'superstruct'\r\nimport { log } from './globals'\r\n\r\nexport const Icons = {\r\n  folder: React.createElement(FolderIcon),\r\n  folderOpen: React.createElement(FolderOpenIcon),\r\n  mbean: React.createElement(CubeIcon),\r\n  locked: React.createElement(LockIcon),\r\n} as const\r\n\r\nexport type OptimisedJmxDomains = Record<string, OptimisedJmxDomain>\r\n\r\nexport function isJmxDomains(value: unknown): value is OptimisedJmxDomains {\r\n  return is(value, record(string(), define('JmxDomain', isJmxDomain)))\r\n}\r\n\r\nexport type OptimisedJmxDomain = Record<string, OptimisedMBeanInfo>\r\n\r\nexport function isJmxDomain(value: unknown): value is OptimisedJmxDomain {\r\n  const isMBeanInfoOrError = (value: unknown) => isMBeanInfo(value) || isMBeanInfoError(value)\r\n  return is(value, record(string(), define('MBeanInfo', isMBeanInfoOrError)))\r\n}\r\n\r\nexport interface OptimisedMBeanInfo extends Omit<MBeanInfo, 'attr' | 'op'> {\r\n  attr?: Record<string, OptimisedMBeanAttribute>\r\n  op?: OptimisedMBeanOperations\r\n  opByString?: Record<string, OptimisedMBeanOperation>\r\n  canInvoke?: boolean\r\n}\r\n\r\nexport function isMBeanInfo(value: unknown): value is OptimisedMBeanInfo {\r\n  return is(\r\n    value,\r\n    type({\r\n      desc: string(),\r\n      class: optional(string()),\r\n      attr: optional(record(string(), object())),\r\n      op: optional(record(string(), object())),\r\n      notif: optional(record(string(), object())),\r\n    }),\r\n  )\r\n}\r\n\r\nexport function isMBeanInfoError(value: unknown): value is MBeanInfoError {\r\n  return is(value, type({ error: string() }))\r\n}\r\n\r\nexport interface OptimisedMBeanAttribute extends MBeanAttribute {\r\n  canInvoke?: boolean\r\n}\r\n\r\nexport type OptimisedMBeanOperations = Record<string, OptimisedMBeanOperation | OptimisedMBeanOperation[]>\r\n\r\nexport interface OptimisedMBeanOperation extends MBeanOperation {\r\n  canInvoke?: boolean\r\n}\r\n\r\nexport type MBeanNodeFilterFn = (node: MBeanNode) => boolean\r\n\r\nexport const MBEAN_NODE_ID_SEPARATOR = '-'\r\n\r\nexport class MBeanNode implements TreeViewDataItem {\r\n  /**\r\n   * ID of the tree view item in HTML.\r\n   */\r\n  id: string\r\n\r\n  icon: React.ReactNode\r\n  expandedIcon?: React.ReactNode\r\n  children?: MBeanNode[]\r\n\r\n  /**\r\n   * Various metadata that can be attached to the node for processing it in the MBean tree.\r\n   */\r\n  private metadata: Record<string, string> = {}\r\n\r\n  // MBean info\r\n  objectName?: string\r\n  mbean?: OptimisedMBeanInfo\r\n  propertyList?: PropertyList\r\n\r\n  // TreeViewDataItem properties\r\n  defaultExpanded?: boolean\r\n\r\n  /**\r\n   * A new node\r\n   * @constructor\r\n   * @param {MBeanNode|null} parent - The parent of the new node. Otherwise, for a singleton node use null.\r\n   * @param {string} name - The name of the new node.\r\n   * @param {boolean} folder - Whether this new node is a folder, ie. has children\r\n   */\r\n  constructor(\r\n    public parent: MBeanNode | null,\r\n    readonly name: string,\r\n    private readonly folder: boolean,\r\n  ) {\r\n    if (this === parent) throw new Error('Node cannot be its own parent')\r\n\r\n    if (folder) {\r\n      this.icon = Icons.folder\r\n      this.expandedIcon = Icons.folderOpen\r\n      this.children = []\r\n    } else {\r\n      this.icon = Icons.mbean\r\n    }\r\n\r\n    this.id = this.generateId(folder)\r\n  }\r\n\r\n  private generateId(folder: boolean): string {\r\n    const idPrefix = this.parent ? this.parent.id + MBEAN_NODE_ID_SEPARATOR : ''\r\n    const idPostfix = folder ? '-folder' : ''\r\n    let id = idPrefix + escapeHtmlId(this.name) + idPostfix\r\n\r\n    // Check id is unique against current siblings\r\n    if (this.parent) {\r\n      this.parent.getChildren().forEach(child => {\r\n        if (child === this) return\r\n\r\n        // id could still end up the same as another\r\n        // but pretty unlikely and not really worth doing more\r\n        if (child.id === id) id = id + '-' + Math.floor(Math.random() * 100)\r\n      })\r\n    }\r\n\r\n    return id\r\n  }\r\n\r\n  initId(recursive: boolean) {\r\n    this.id = this.generateId(this.children !== undefined)\r\n    if (recursive) {\r\n      this.children?.forEach(c => c.initId(recursive))\r\n    }\r\n  }\r\n\r\n  populateMBean(propList: string, mbean: OptimisedMBeanInfo) {\r\n    log.debug('  JMX tree mbean:', propList)\r\n    const props = new PropertyList(this, propList)\r\n    this.createMBeanNode(props.getPaths(), props, mbean)\r\n  }\r\n\r\n  private createMBeanNode(paths: string[], props: PropertyList, mbean: OptimisedMBeanInfo) {\r\n    log.debug('    JMX tree property:', paths[0])\r\n    if (paths.length === 1) {\r\n      // final mbean node\r\n      const path = paths[0]\r\n      if (!path) {\r\n        log.error('Failed to process MBean. Malformed ObjectName:', `\"${props.objectName()}\"`)\r\n        return\r\n      }\r\n      const mbeanNode = this.create(path, false)\r\n      mbeanNode.configureMBean(props, mbean)\r\n      return\r\n    }\r\n\r\n    const path = paths.shift()\r\n    if (path === undefined) {\r\n      log.error('Failed to process MBean. Malformed ObjectName:', `\"${props.objectName()}\"`)\r\n      return\r\n    }\r\n    const child = this.getOrCreate(path, true)\r\n    child.createMBeanNode(paths, props, mbean)\r\n  }\r\n\r\n  private configureMBean(propList: PropertyList, mbean: OptimisedMBeanInfo) {\r\n    this.objectName = propList.objectName()\r\n    this.mbean = mbean\r\n    this.propertyList = propList\r\n\r\n    // Also update icon based on canInvoke here\r\n    this.applyCanInvoke()\r\n  }\r\n\r\n  private applyCanInvoke() {\r\n    if (!this.mbean) {\r\n      return\r\n    }\r\n\r\n    // Update icon to locked if it cannot be invoked\r\n    if (this.mbean.canInvoke !== undefined && !this.mbean.canInvoke) {\r\n      this.icon = Icons.locked\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Copy the node to a new node with the given name, transferring the icons, children,\r\n   * metadata, and MBean info.\r\n   */\r\n  copyTo(name: string): MBeanNode {\r\n    const copy = new MBeanNode(null, name, this.folder)\r\n    copy.icon = this.icon\r\n    copy.expandedIcon = this.expandedIcon\r\n    copy.children = this.children\r\n    copy.metadata = this.metadata\r\n    copy.objectName = this.objectName\r\n    copy.mbean = this.mbean\r\n    copy.propertyList = this.propertyList\r\n    return copy\r\n  }\r\n\r\n  /**\r\n   * Find children with the given name. There can be at most two nodes with the\r\n   * same name, one as an MBean and the other as a folder.\r\n   *\r\n   * Think about the following case:\r\n   * - MBean1: 'com.example:type=Example,name=App'\r\n   * - MBean2: 'com.example:type=Example,name=App,sub=Part1'\r\n   * - MBean3: 'com.example:type=Example,name=App,sub=Part2'\r\n   * In this case, there can be two nodes with the same name 'App', one is MBean1,\r\n   * and the other is the folder that contains MBean2 and MBean3.\r\n   */\r\n  findChildren(name: string): MBeanNode[] {\r\n    return this.children?.filter(node => node.name === name) ?? []\r\n  }\r\n\r\n  /**\r\n   * Return a child node with the given name or null. The 'folder' parameter is\r\n   * required to identify a single node, as there can be at most two nodes with\r\n   * the same name, one as an MBean and the other as a folder.\r\n   *\r\n   * See the JSDoc comment for the findChildren(name: string) method for more detail.\r\n   */\r\n  get(name: string, folder: boolean): MBeanNode | null {\r\n    const candidates = this.findChildren(name)\r\n    return candidates.find(node => node.folder === folder) ?? null\r\n  }\r\n\r\n  getIndex(index: number): MBeanNode | null {\r\n    return this.children?.[index] ?? null\r\n  }\r\n\r\n  getChildren(): MBeanNode[] {\r\n    return this.children ?? []\r\n  }\r\n\r\n  create(name: string, folder: boolean): MBeanNode {\r\n    // this method should be invoked on a folder node\r\n    if (this.children === undefined) {\r\n      // re-init as folder\r\n      this.icon = Icons.folder\r\n      this.expandedIcon = Icons.folderOpen\r\n      this.children = []\r\n    }\r\n\r\n    const newChild = new MBeanNode(this, name, folder)\r\n    this.children.push(newChild)\r\n    return newChild\r\n  }\r\n\r\n  getOrCreate(name: string, folder: boolean): MBeanNode {\r\n    const node = this.get(name, folder)\r\n    if (node) {\r\n      return node\r\n    }\r\n    return this.create(name, folder)\r\n  }\r\n\r\n  removeChildren(): MBeanNode[] {\r\n    if (!this.children) return []\r\n\r\n    const remove: MBeanNode[] = this.children\r\n    this.children = []\r\n\r\n    for (const r of remove) {\r\n      r.parent = null\r\n    }\r\n\r\n    return remove\r\n  }\r\n\r\n  removeChild(child: MBeanNode): MBeanNode | null {\r\n    if (!this.children || !child) return null\r\n\r\n    const index = this.children.indexOf(child)\r\n    if (index === -1) return null\r\n\r\n    const removed = this.children.splice(index, 1)[0] ?? null\r\n    if (removed) {\r\n      removed.parent = null\r\n    }\r\n\r\n    return removed\r\n  }\r\n\r\n  childCount(): number {\r\n    return this.children ? this.children.length : 0\r\n  }\r\n\r\n  getType(): string | undefined {\r\n    return this.getMetadata('type')\r\n  }\r\n\r\n  setType(type: string) {\r\n    this.addMetadata('type', type)\r\n  }\r\n\r\n  getMetadata(key: string): string | undefined {\r\n    return this.metadata[key]\r\n  }\r\n\r\n  addMetadata(key: string, value: string) {\r\n    this.metadata[key] = value\r\n  }\r\n\r\n  getProperty(key: string): string | undefined {\r\n    return this.propertyList?.get(key)\r\n  }\r\n\r\n  static sorter(a: MBeanNode, b: MBeanNode): number {\r\n    const res = stringSorter(a.name, b.name)\r\n    if (res !== 0) {\r\n      return res\r\n    }\r\n\r\n    // folder precedes mbean node\r\n    return Number(b.folder) - Number(a.folder)\r\n  }\r\n\r\n  sort(recursive: boolean) {\r\n    if (!this.children) return\r\n\r\n    this.children?.sort(MBeanNode.sorter)\r\n    if (recursive) {\r\n      this.children?.forEach(child => child.sort(recursive))\r\n    }\r\n  }\r\n\r\n  path(): string[] {\r\n    const path = [this.name]\r\n    let p = this.parent\r\n    while (p) {\r\n      path.unshift(p.name)\r\n      p = p.parent\r\n    }\r\n\r\n    return path\r\n  }\r\n\r\n  navigate(...namePath: string[]): MBeanNode | null {\r\n    if (namePath.length === 0) return this // path is empty so return this node\r\n\r\n    const name = namePath[0]\r\n    if (!name) return null\r\n\r\n    const child = this.findByNamePattern(name)\r\n    return child?.navigate(...namePath.slice(1)) ?? null\r\n  }\r\n\r\n  /**\r\n   * Perform a function on each node in the given path\r\n   * where the namePath drills down to descendants from\r\n   * this node\r\n   */\r\n  forEach(namePath: string[], eachFn: (node: MBeanNode) => void) {\r\n    if (namePath.length === 0) return // path empty so nothing to do\r\n\r\n    const name = namePath[0]\r\n    if (!name) return\r\n\r\n    const child = this.findByNamePattern(name)\r\n    if (!child) return\r\n\r\n    eachFn(child)\r\n    child.forEach(namePath.slice(1), eachFn)\r\n  }\r\n\r\n  /**\r\n   * Searches this node and all its descendants for the first node to match the filter.\r\n   */\r\n  find(filter: MBeanNodeFilterFn): MBeanNode | null {\r\n    if (filter(this)) {\r\n      return this\r\n    }\r\n\r\n    return this.children?.map(child => child.find(filter)).find(node => node !== null) ?? null\r\n  }\r\n\r\n  private findByNamePattern(name: string): MBeanNode | null {\r\n    return this.find(node => matchWithWildcard(node.name, name))\r\n  }\r\n\r\n  /**\r\n   * Finds MBeans in this node and all its descendants based on the properties.\r\n   */\r\n  findMBeans(properties: Record<string, string>): MBeanNode[] {\r\n    const mbeans: MBeanNode[] = this.match(properties) ? [this] : []\r\n    this.children?.forEach(child => mbeans.push(...child.findMBeans(properties)))\r\n    return mbeans\r\n  }\r\n\r\n  /**\r\n   * Matches the node with the given MBean properties.\r\n   * Since only MBean node holds the properties, this method always returns false\r\n   * when invoked on a folder node.\r\n   */\r\n  match(properties: Record<string, string>): boolean {\r\n    return this.propertyList?.match(properties) ?? false\r\n  }\r\n\r\n  /**\r\n   * Returns the chain of nodes forming the tree branch of ancestors\r\n   * @method findAncestors\r\n   * @for Node\r\n   * @return {MBeanNode[]}\r\n   */\r\n  findAncestors(): MBeanNode[] {\r\n    const chain: MBeanNode[] = []\r\n    let ancestor: MBeanNode | null = this.parent\r\n    while (ancestor !== null) {\r\n      chain.unshift(ancestor)\r\n      ancestor = ancestor.parent\r\n    }\r\n\r\n    return chain\r\n  }\r\n\r\n  /**\r\n   * Returns the first node in the tree branch of ancestors that satisfies the given filter\r\n   * @method findAncestor\r\n   * @for Node\r\n   * @return {MBeanNode}\r\n   */\r\n  findAncestor(filter: MBeanNodeFilterFn): MBeanNode | null {\r\n    let ancestor: MBeanNode | null = this.parent\r\n    while (ancestor !== null) {\r\n      if (filter(ancestor)) return ancestor\r\n\r\n      ancestor = ancestor.parent\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  filterClone(filter: MBeanNodeFilterFn): MBeanNode | null {\r\n    const copyChildren: MBeanNode[] = []\r\n    if (this.children) {\r\n      this.children.forEach(child => {\r\n        const childCopy = child.filterClone(filter)\r\n        if (childCopy) {\r\n          copyChildren.push(childCopy)\r\n        }\r\n      })\r\n    }\r\n\r\n    if (copyChildren.length === 0 && !filter(this)) {\r\n      //\r\n      // this has no children and does not conform to filter\r\n      //\r\n      return null\r\n    }\r\n\r\n    const copy = new MBeanNode(this, this.name, copyChildren.length > 0)\r\n    if (copyChildren.length > 0) {\r\n      copy.children = copyChildren\r\n    }\r\n    copy.icon = this.icon\r\n    copy.expandedIcon = this.expandedIcon\r\n    return copy\r\n  }\r\n\r\n  adopt(child: MBeanNode) {\r\n    if (!this.children) {\r\n      this.children = []\r\n    }\r\n\r\n    if (this === child) throw new Error('Node cannot be its own child')\r\n\r\n    if (child.parent) child.parent.removeChild(child)\r\n\r\n    child.parent = this\r\n    this.children.push(child)\r\n  }\r\n\r\n  /**\r\n   * Recursive method to flatten MBeans.\r\n   */\r\n  flatten(mbeans: Record<string, MBeanNode>) {\r\n    if (this.objectName) {\r\n      mbeans[this.objectName] = this\r\n    }\r\n    this.children?.forEach(child => child.flatten(mbeans))\r\n  }\r\n\r\n  /**\r\n   * Returns true if RBACDecorator has been already applied to this node at server side.\r\n   * If the node doesn't have mbean or mbean.op, it always returns true.\r\n   * https://github.com/hawtio/hawtio/blob/main/platforms/hawtio-osgi-jmx/src/main/java/io/hawt/osgi/jmx/RBACDecorator.java\r\n   */\r\n  isRBACDecorated(): boolean {\r\n    if (!this.mbean || !this.mbean.op || isEmpty(this.mbean.op)) {\r\n      return true\r\n    }\r\n\r\n    // RBACDecorator is considered as applied when mbean has both op and opByString fields\r\n    return this.mbean.opByString !== undefined && !isEmpty(this.mbean.opByString)\r\n  }\r\n\r\n  updateCanInvoke(canInvoke: boolean) {\r\n    if (!this.mbean) {\r\n      return\r\n    }\r\n\r\n    this.mbean.canInvoke = canInvoke\r\n    this.applyCanInvoke()\r\n  }\r\n\r\n  setIcons(icon: React.ReactNode, expandedIcon: React.ReactNode = icon) {\r\n    this.icon = icon\r\n    this.expandedIcon = expandedIcon\r\n  }\r\n\r\n  /**\r\n   * Returns true only if all the given operations exist in this MBean node.\r\n   */\r\n  hasOperations(...names: string[]): boolean {\r\n    if (!this.mbean || !this.mbean.op) {\r\n      return false\r\n    }\r\n\r\n    const operations = this.mbean.op\r\n    return names.every(name => operations[name] !== undefined)\r\n  }\r\n\r\n  /**\r\n   * Returns true only if all the given methods can be invoked.\r\n   */\r\n  hasInvokeRights(...methods: string[]): boolean {\r\n    const mbean = this.mbean\r\n    if (!mbean) return true\r\n\r\n    let canInvoke = mbean.canInvoke ?? true\r\n    if (canInvoke && methods && methods.length > 0) {\r\n      const opsByString = mbean.opByString\r\n      const ops = mbean.op\r\n      if (opsByString && ops) {\r\n        canInvoke = this.resolveCanInvokeInOps(ops, opsByString, methods)\r\n      }\r\n    }\r\n    return canInvoke\r\n  }\r\n\r\n  /**\r\n   * Returns true only if all relevant operations can be invoked.\r\n   */\r\n  private resolveCanInvokeInOps(\r\n    ops: OptimisedMBeanOperations,\r\n    opsByString: Record<string, OptimisedMBeanOperation>,\r\n    methods: string[],\r\n  ): boolean {\r\n    let canInvoke = true\r\n    methods.forEach(method => {\r\n      if (!canInvoke) {\r\n        return\r\n      }\r\n      let op = null\r\n      if (method.endsWith(')')) {\r\n        op = opsByString[method]\r\n      } else {\r\n        op = ops[method]\r\n      }\r\n      if (!op) {\r\n        log.debug('Could not find method:', method, 'to check permissions, skipping')\r\n        return\r\n      }\r\n      canInvoke = this.resolveCanInvoke(op)\r\n    })\r\n    return canInvoke\r\n  }\r\n\r\n  private resolveCanInvoke(op: OptimisedMBeanOperation | OptimisedMBeanOperation[]): boolean {\r\n    // for single method\r\n    if (!Array.isArray(op)) {\r\n      return op.canInvoke ?? true\r\n    }\r\n\r\n    // for overloaded methods\r\n    // returns true only if all overloaded methods can be invoked (i.e. canInvoke=true)\r\n    const cantInvoke = op.find(o => o.canInvoke !== undefined && !o.canInvoke)\r\n    return cantInvoke === undefined\r\n  }\r\n}\r\n\r\nexport class PropertyList {\r\n  private properties: Record<string, string> = {}\r\n  private paths: { key: string; value: string }[] = []\r\n  // TODO: typeName needed?\r\n  typeName?: string\r\n  // TODO: serviceName needed?\r\n  serviceName?: string\r\n\r\n  private readonly propRegex = new RegExp(\r\n    '(([^=,]+)=(\\\\\\\\\"[^\"]+\\\\\\\\\"|\\\\\\\\\\'[^\\']+\\\\\\\\\\'|\"[^\"]+\"|\\'[^\\']+\\'|[^,]+))|([^=,]+)',\r\n    'g',\r\n  )\r\n\r\n  constructor(\r\n    private domain: MBeanNode,\r\n    private propList: string,\r\n  ) {\r\n    this.parse(propList)\r\n  }\r\n\r\n  private parse(propList: string) {\r\n    let match\r\n    while ((match = this.propRegex.exec(propList))) {\r\n      const [propKey, propValue] = this.parseProperty(match[0])\r\n      this.properties[propKey] = propValue\r\n      let index = -1\r\n      const lowerKey = propKey.toLowerCase()\r\n      const path = { key: lowerKey, value: propValue }\r\n      switch (lowerKey) {\r\n        case 'type':\r\n          this.typeName = propValue\r\n          if (this.domain.findChildren(propValue).length > 0) {\r\n            // if the type name value already exists in the root node\r\n            // of the domain then let's move this property around too\r\n            index = 0\r\n          } else if (this.properties['name']) {\r\n            // else if the name key already exists, insert the type key before it\r\n            index = this.paths.findIndex(p => p.key === 'name')\r\n          }\r\n          break\r\n        case 'service':\r\n          this.serviceName = propValue\r\n          break\r\n      }\r\n      if (index >= 0) {\r\n        this.paths.splice(index, 0, path)\r\n      } else {\r\n        this.paths.push(path)\r\n      }\r\n    }\r\n\r\n    this.maybeReorderPaths()\r\n  }\r\n\r\n  private parseProperty(property: string): [string, string] {\r\n    let key = property\r\n    let value = property\r\n    // do not use split('=') as it splits wrong when there is a space in the mbean name\r\n    const pos = property.indexOf('=')\r\n    if (pos > 0) {\r\n      key = property.substring(0, pos)\r\n      value = property.substring(pos + 1)\r\n    }\r\n    // mbean property value is displayed in the tree, so let's escape it here\r\n    value = escapeTags(trimQuotes(value || key))\r\n    return [key, value]\r\n  }\r\n\r\n  /**\r\n   * Reorders paths when they aren't in the correct order.\r\n   */\r\n  private maybeReorderPaths() {\r\n    switch (this.domain.name) {\r\n      case 'osgi.compendium':\r\n        reorderObjects(this.paths, 'key', ['service', 'version', 'framework'])\r\n        break\r\n      case 'osgi.core':\r\n        reorderObjects(this.paths, 'key', ['type', 'version', 'framework'])\r\n        break\r\n    }\r\n  }\r\n\r\n  get(key: string): string | undefined {\r\n    return this.properties[key]\r\n  }\r\n\r\n  match(properties: Record<string, string>): boolean {\r\n    return Object.entries(properties).every(([key, value]) => {\r\n      const thisValue = this.properties[key]\r\n      return thisValue && matchWithWildcard(thisValue, value)\r\n    })\r\n  }\r\n\r\n  getPaths(): string[] {\r\n    return this.paths.map(p => p.value)\r\n  }\r\n\r\n  objectName(): string {\r\n    return `${this.domain.name}:${this.propList}`\r\n  }\r\n}\r\n\r\n/**\r\n * Reorders objects by the given key according to the given order of values.\r\n */\r\nfunction reorderObjects(objs: object[], key: string, order: string[]) {\r\n  if (!checkReorderNeeded(objs, key, order)) {\r\n    return\r\n  }\r\n\r\n  const objKey = key as keyof (typeof objs)[0]\r\n  order.reverse().forEach(value => {\r\n    const index = objs.findIndex(o => o[objKey] === value)\r\n    if (index >= 0) {\r\n      const obj = objs.splice(index, 1)[0]\r\n      if (obj) {\r\n        objs.unshift(obj)\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Checks whether the given objects need to be reordered.\r\n */\r\nfunction checkReorderNeeded(objs: object[], key: string, order: string[]): boolean {\r\n  if (objs.length === 0 || order.length === 0) {\r\n    return false\r\n  }\r\n\r\n  const objKey = key as keyof (typeof objs)[0]\r\n  if (objs.length < order.length) {\r\n    return objs.some((o, i) => o[objKey] !== order[i])\r\n  }\r\n  return order.some((v, i) => v !== objs[i]?.[objKey])\r\n}\r\n","import { Logger } from '@hawtiosrc/core/logging'\r\nimport { pluginName } from '../globals'\r\n\r\nexport const log = Logger.get(`${pluginName}-tree`)\r\n","import { log } from './globals'\r\nimport { MBeanTree } from './tree'\r\n\r\nexport type TreeProcessor = (tree: MBeanTree) => Promise<void>\r\n\r\nexport type TreeProcessors = {\r\n  [name: string]: TreeProcessor\r\n}\r\n\r\nexport interface ITreeProcessorRegistry {\r\n  add(name: string, processor: TreeProcessor): void\r\n  process(tree: MBeanTree): Promise<void>\r\n  getProcessors(): TreeProcessors\r\n  reset(): void\r\n}\r\n\r\nclass TreeProcessorRegistry implements ITreeProcessorRegistry {\r\n  private processors: TreeProcessors = {}\r\n\r\n  add(name: string, processor: TreeProcessor) {\r\n    this.processors[name] = processor\r\n  }\r\n\r\n  async process(tree: MBeanTree) {\r\n    log.debug('Apply processors to tree:', this.processors)\r\n    // Apply processors in sequence to ensure consistency in the processed tree\r\n    for (const [name, processor] of Object.entries(this.processors)) {\r\n      log.debug('Apply processor:', name)\r\n      await processor(tree)\r\n    }\r\n  }\r\n\r\n  getProcessors(): TreeProcessors {\r\n    return this.processors\r\n  }\r\n\r\n  reset() {\r\n    this.processors = {}\r\n  }\r\n}\r\n\r\nexport const treeProcessorRegistry = new TreeProcessorRegistry()\r\n","import { escapeTags } from '@hawtiosrc/util/htmls'\r\nimport { matchWithWildcard } from '@hawtiosrc/util/strings'\r\nimport { log } from '../globals'\r\nimport { MBeanNode, MBeanNodeFilterFn, OptimisedJmxDomain, OptimisedJmxDomains } from './node'\r\nimport { treeProcessorRegistry } from './processor-registry'\r\n\r\n/**\r\n * The object representation of MBean tree.\r\n * Internally, it is constructed of MBeanNode[].\r\n */\r\nexport class MBeanTree {\r\n  private tree: MBeanNode[] = []\r\n\r\n  static createEmpty(id: string): MBeanTree {\r\n    return new MBeanTree(id)\r\n  }\r\n\r\n  static async createFromDomains(id: string, domains: OptimisedJmxDomains): Promise<MBeanTree> {\r\n    const mBeanTree = new MBeanTree(id)\r\n    await mBeanTree.populate(domains)\r\n    return mBeanTree\r\n  }\r\n\r\n  static createFromNodes(id: string, nodes: MBeanNode[]): MBeanTree {\r\n    const mBeanTree = new MBeanTree(id)\r\n    mBeanTree.tree = nodes\r\n    return mBeanTree\r\n  }\r\n\r\n  static filter(originalTree: MBeanNode[], filter: MBeanNodeFilterFn): MBeanNode[] {\r\n    //Filter behaviour is the following:\r\n    // 1) If there is a hit in a parent bean, bring everything under the parent\r\n    // 2) If there is no hit in the parent, but there is in a sub bean\r\n    //    2.1) Bring beans from the hit to the highest parent\r\n    //    2.2) Bring beans in the hit and all sub beans\r\n    // 3) Else, it wont return anything.\r\n\r\n    if (!originalTree || originalTree?.length === 0) return []\r\n\r\n    let results: MBeanNode[] = []\r\n\r\n    for (const parentNode of originalTree) {\r\n      if (filter(parentNode)) {\r\n        results = results.concat(parentNode)\r\n      } else {\r\n        const resultsInSubtree = MBeanTree.filter(parentNode.children || [], filter)\r\n\r\n        if (resultsInSubtree.length !== 0) {\r\n          const parentNodeCloned = Object.assign({}, parentNode)\r\n          parentNodeCloned.children = resultsInSubtree\r\n\r\n          results = results.concat(parentNodeCloned)\r\n        }\r\n      }\r\n    }\r\n\r\n    return results\r\n  }\r\n\r\n  private constructor(private id: string) {}\r\n\r\n  private async populate(domains: OptimisedJmxDomains) {\r\n    Object.entries(domains).forEach(([name, domain]) => {\r\n      // Domain name is displayed in the tree, so let's escape it here.\r\n      // Use a custom escaping method here as escaping '\"' breaks Camel tree.\r\n      const escapedName = escapeTags(name)\r\n      this.populateDomain(escapedName, domain)\r\n    })\r\n\r\n    this.sortTree()\r\n\r\n    // Post-process loaded tree\r\n    await treeProcessorRegistry.process(this)\r\n\r\n    log.debug('Populated JMX tree:', this.tree)\r\n  }\r\n\r\n  private populateDomain(name: string, domain: OptimisedJmxDomain) {\r\n    log.debug('JMX tree domain:', name)\r\n    const domainNode = this.getOrCreateNode(name)\r\n    Object.entries(domain).forEach(([propList, mbean]) => {\r\n      domainNode.populateMBean(propList, mbean)\r\n    })\r\n  }\r\n\r\n  private getOrCreateNode(name: string): MBeanNode {\r\n    const node = this.tree.find(node => node.name === name)\r\n    if (node) {\r\n      return node\r\n    }\r\n\r\n    const newNode = new MBeanNode(null, name, true)\r\n    this.tree.push(newNode)\r\n    return newNode\r\n  }\r\n\r\n  private sortTree() {\r\n    this.tree.sort(MBeanNode.sorter)\r\n    this.tree.forEach(node => node.sort(true))\r\n  }\r\n\r\n  getTree(): MBeanNode[] {\r\n    return this.tree\r\n  }\r\n\r\n  get(name: string): MBeanNode | null {\r\n    return this.tree.find(node => node.name === name) ?? null\r\n  }\r\n\r\n  isEmpty(): boolean {\r\n    return this.tree.length === 0\r\n  }\r\n\r\n  /**\r\n   * Searches the entire tree for the first MBean node to match the filter.\r\n   */\r\n  find(filter: MBeanNodeFilterFn): MBeanNode | null {\r\n    return this.tree.map(domain => domain.find(filter)).find(node => node !== null) ?? null\r\n  }\r\n\r\n  /**\r\n   * Finds MBeans in the tree based on the domain name and properties.\r\n   */\r\n  findMBeans(domainName: string, properties: Record<string, string>): MBeanNode[] {\r\n    return this.get(domainName)?.findMBeans(properties) ?? []\r\n  }\r\n\r\n  private descendByPathEntry(pathEntry: string): MBeanNode | null {\r\n    return this.find(node => matchWithWildcard(node.name, pathEntry))\r\n  }\r\n\r\n  navigate(...namePath: string[]): MBeanNode | null {\r\n    if (namePath.length === 0) return null // path is empty so return nothing\r\n\r\n    const name = namePath[0]\r\n    if (!name) return null\r\n\r\n    const child = this.descendByPathEntry(name)\r\n    return child?.navigate(...namePath.slice(1)) ?? null\r\n  }\r\n\r\n  /**\r\n   * Perform a function on each node in the given path\r\n   * where the namePath drills down to descendants of this tree\r\n   */\r\n  forEach(namePath: string[], eachFn: (node: MBeanNode) => void) {\r\n    if (namePath.length === 0) return // path empty so nothing to do\r\n\r\n    const name = namePath[0]\r\n    if (!name) return\r\n\r\n    const child = this.descendByPathEntry(name)\r\n    if (!child) return\r\n\r\n    eachFn(child)\r\n    child.forEach(namePath.slice(1), eachFn)\r\n  }\r\n\r\n  /**\r\n   * Flattens the tree of nested folder and MBean nodes into a map of object names and MBeans.\r\n   */\r\n  flatten(): Record<string, MBeanNode> {\r\n    const mbeans: Record<string, MBeanNode> = {}\r\n    this.tree.forEach(node => node.flatten(mbeans))\r\n    return mbeans\r\n  }\r\n}\r\n","import { Logger } from '@hawtiosrc/core/logging'\r\n\r\nexport const pluginName = 'hawtio-rbac'\r\nexport const log = Logger.get(pluginName)\r\n","import { userService } from '@hawtiosrc/auth'\r\nimport { jolokiaService } from '@hawtiosrc/plugins/shared'\r\nimport { isBlank } from '@hawtiosrc/util/strings'\r\nimport { log } from './globals'\r\n\r\nconst ACL_MBEAN_PATTERN = '*:type=security,area=jmx,*'\r\n\r\ninterface IRBACService {\r\n  reset(): void\r\n  getACLMBean(): Promise<string | null>\r\n}\r\n\r\nclass RBACService implements IRBACService {\r\n  private aclMBean?: Promise<string | null>\r\n\r\n  reset() {\r\n    this.aclMBean = undefined\r\n  }\r\n\r\n  getACLMBean(): Promise<string | null> {\r\n    if (this.aclMBean) {\r\n      return this.aclMBean\r\n    }\r\n\r\n    // Initialise ACL MBean\r\n    this.aclMBean = this.fetchACLMBean()\r\n    return this.aclMBean\r\n  }\r\n\r\n  private async fetchACLMBean(): Promise<string | null> {\r\n    if (!(await userService.isLogin())) {\r\n      throw new Error('User needs to have logged in to run RBAC plugin')\r\n    }\r\n\r\n    const mbeans = await jolokiaService.search(ACL_MBEAN_PATTERN)\r\n    log.debug('Fetching ACL MBeans:', mbeans)\r\n\r\n    if (mbeans.length === 0) {\r\n      log.info(\"Didn't discover any ACL MBeans; client-side RBAC is disabled\")\r\n      return null\r\n    }\r\n\r\n    const mbean = mbeans[0]\r\n    if (mbean && mbeans.length === 1) {\r\n      log.info('Use MBean', mbean, 'for client-side RBAC')\r\n      return mbean\r\n    }\r\n\r\n    // mbeans > 1\r\n    const chosen = mbeans.find(mbean => !mbean.includes('HawtioDummy'))\r\n    if (!chosen || isBlank(chosen)) {\r\n      log.info(\"Didn't discover any effective ACL MBeans; client-side RBAC is disabled\")\r\n      return null\r\n    }\r\n    log.info('Use MBean', chosen, 'for client-side RBAC')\r\n    return chosen\r\n  }\r\n}\r\n\r\nexport const rbacService = new RBACService()\r\n","import { AttributeValues, jolokiaService } from '@hawtiosrc/plugins/shared/jolokia-service'\r\nimport { escapeMBean } from '@hawtiosrc/util/jolokia'\r\nimport { Request, Response } from 'jolokia.js'\r\nimport { log } from '../globals'\r\nimport { rbacService } from '@hawtiosrc/plugins/rbac/rbac-service'\r\nimport { eventService } from '@hawtiosrc/core'\r\n\r\nclass AttributeService {\r\n  private handles: number[] = []\r\n\r\n  async read(mbean: string): Promise<AttributeValues> {\r\n    return await jolokiaService.readAttributes(mbean)\r\n  }\r\n\r\n  async readWithCallback(mbean: string, callback: (attrs: AttributeValues) => void): Promise<void> {\r\n    const attrs = await jolokiaService.readAttributes(mbean)\r\n    callback(attrs)\r\n  }\r\n\r\n  async register(request: Request, callback: (response: Response) => void) {\r\n    const handle = await jolokiaService.register(request, callback)\r\n    log.debug('Register handle:', handle)\r\n    this.handles.push(handle)\r\n  }\r\n\r\n  unregisterAll() {\r\n    log.debug('Unregister all handles:', this.handles)\r\n    this.handles.forEach(handle => jolokiaService.unregister(handle))\r\n    this.handles = []\r\n  }\r\n\r\n  async buildUrl(mbean: string, attribute: string): Promise<string> {\r\n    const jolokiaUrl = await jolokiaService.getFullJolokiaUrl()\r\n    return `${jolokiaUrl}/read/${escapeMBean(mbean)}/${attribute}`\r\n  }\r\n\r\n  async canInvoke(mbean: string, attribute: string, type: string): Promise<boolean> {\r\n    const aclMBean = await rbacService.getACLMBean()\r\n    if (!aclMBean) {\r\n      // Always allow invocation when client-side RBAC is not available\r\n      return true\r\n    }\r\n\r\n    const operation = 'canInvoke(java.lang.String,java.lang.String,[Ljava.lang.String;)'\r\n    const args = [mbean, `set${attribute}`, [type]]\r\n    return jolokiaService.execute(aclMBean, operation, args) as Promise<boolean>\r\n  }\r\n\r\n  async update(mbeanName: string, attribute: string, value: unknown) {\r\n    await jolokiaService.writeAttribute(mbeanName, attribute, value)\r\n    eventService.notify({ type: 'success', message: `Updated attribute: ${attribute}` })\r\n  }\r\n\r\n  async bulkRequest(requests: Request[]) {\r\n    return jolokiaService.bulkRequest(requests)\r\n  }\r\n}\r\n\r\nexport const attributeService = new AttributeService()\r\n","import { PluginNodeSelectionContext } from '@hawtiosrc/plugins/context'\r\nimport { JmxContentMBeans } from '@hawtiosrc/plugins/shared/JmxContentMBeans'\r\nimport { AttributeValues } from '@hawtiosrc/plugins/shared/jolokia-service'\r\nimport { humanizeLabels } from '@hawtiosrc/util/strings'\r\nimport { Panel } from '@patternfly/react-core'\r\nimport { TableComposable, Tbody, Td, Th, Thead, Tr } from '@patternfly/react-table'\r\nimport { Response } from 'jolokia.js'\r\nimport React, { useContext, useEffect, useState } from 'react'\r\nimport { HawtioEmptyCard } from '../HawtioEmptyCard'\r\nimport { HawtioLoadingCard } from '../HawtioLoadingCard'\r\nimport { MBeanNode } from '../tree'\r\nimport './AttributeTable.css'\r\nimport { attributeService } from './attribute-service'\r\n\r\nexport const AttributeTable: React.FunctionComponent = () => {\r\n  const { selectedNode } = useContext(PluginNodeSelectionContext)\r\n  const [attributesList, setAttributesList] = useState<{ [name: string]: AttributeValues }>({})\r\n  const [isReading, setIsReading] = useState(false)\r\n\r\n  const attributesEntries = Object.values(attributesList) ?? []\r\n\r\n  function checkIfAllMBeansHaveSameAttributes(attributesEntries: AttributeValues[]): boolean {\r\n    if (attributesEntries.length <= 1) {\r\n      return true\r\n    }\r\n\r\n    const firstEntry = attributesEntries[0]\r\n    if (!firstEntry) {\r\n      return false\r\n    }\r\n\r\n    const firstAttrsLength = Object.keys(firstEntry).length\r\n    if (attributesEntries.some(attrs => Object.keys(attrs).length !== firstAttrsLength)) {\r\n      return false\r\n    }\r\n\r\n    const labelSet = Object.keys(firstEntry).reduce((set, label) => set.add(label), new Set<string>())\r\n    return attributesEntries.every(attrs => Object.keys(attrs).every(label => labelSet.has(label)))\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!selectedNode) {\r\n      return\r\n    }\r\n\r\n    const readAttributes = async (currentSelection: MBeanNode) => {\r\n      if (!currentSelection) return\r\n\r\n      const childrenMbeansAttributes: { [name: string]: AttributeValues } = {}\r\n\r\n      setIsReading(true)\r\n\r\n      for (const node of currentSelection.getChildren()) {\r\n        if (!node || !node?.objectName) continue\r\n        childrenMbeansAttributes[node.objectName] = await attributeService.read(node.objectName)\r\n      }\r\n\r\n      setAttributesList({ ...childrenMbeansAttributes })\r\n\r\n      setIsReading(false)\r\n    }\r\n\r\n    const setJobForSpecificNode = async (node: MBeanNode | null): Promise<void> => {\r\n      if (!node || !node?.objectName) return\r\n\r\n      const mbean = node.objectName\r\n      attributeService.register({ type: 'read', mbean }, (response: Response) => {\r\n        setAttributesList(attributesList => {\r\n          attributesList[mbean] = response.value as AttributeValues\r\n          return { ...attributesList }\r\n        })\r\n      })\r\n    }\r\n\r\n    const setReadingJobs = async (currentSelection: MBeanNode): Promise<void> => {\r\n      if (!currentSelection) return\r\n\r\n      currentSelection.getChildren().forEach(async node => await setJobForSpecificNode(node))\r\n    }\r\n\r\n    readAttributes(selectedNode)\r\n    setReadingJobs(selectedNode)\r\n\r\n    return () => attributeService.unregisterAll()\r\n  }, [selectedNode])\r\n\r\n  if (!selectedNode) {\r\n    return null\r\n  }\r\n\r\n  if (isReading) {\r\n    return <HawtioLoadingCard />\r\n  }\r\n\r\n  if (attributesEntries.length === 0) {\r\n    return <HawtioEmptyCard message='This node has no MBeans.' />\r\n  }\r\n\r\n  if (\r\n    attributesEntries.some(attribute => Object.entries(attribute).length === 0) ||\r\n    !checkIfAllMBeansHaveSameAttributes(attributesEntries)\r\n  ) {\r\n    return <JmxContentMBeans />\r\n  }\r\n\r\n  const labels = Object.keys(attributesEntries[0] ?? {})\r\n\r\n  return (\r\n    <Panel>\r\n      <TableComposable aria-label='MBeans' variant='compact'>\r\n        <Thead>\r\n          <Tr>\r\n            {labels.map(label => (\r\n              <Th key={'header-' + label}>{humanizeLabels(label)}</Th>\r\n            ))}\r\n          </Tr>\r\n        </Thead>\r\n        <Tbody>\r\n          {attributesEntries.map((attribute, index) => (\r\n            <Tr key={'attribute-' + index}>\r\n              {labels.map((label, index) => (\r\n                <Td key={'data-' + label + index}>{JSON.stringify(attribute[label])}</Td>\r\n              ))}\r\n            </Tr>\r\n          ))}\r\n        </Tbody>\r\n      </TableComposable>\r\n    </Panel>\r\n  )\r\n}\r\n","import { PluginNodeSelectionContext } from '@hawtiosrc/plugins/context'\r\nimport { AttributeValues } from '@hawtiosrc/plugins/shared/jolokia-service'\r\nimport { MBeanNode } from '@hawtiosrc/plugins/shared/tree'\r\nimport { isNumber } from '@hawtiosrc/util/objects'\r\nimport {\r\n  ChartArea,\r\n  ChartAxis,\r\n  Chart as ChartDraw,\r\n  ChartVoronoiContainer,\r\n  getResizeObserver,\r\n} from '@patternfly/react-charts'\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardActions,\r\n  CardBody,\r\n  CardHeader,\r\n  Grid,\r\n  GridItem,\r\n  PageSection,\r\n  PageSectionVariants,\r\n  Switch,\r\n  Text,\r\n  Title,\r\n} from '@patternfly/react-core'\r\nimport { InfoCircleIcon } from '@patternfly/react-icons'\r\nimport { Request, Response } from 'jolokia.js'\r\nimport React, { useContext, useEffect, useRef, useState } from 'react'\r\nimport { HawtioEmptyCard } from '../HawtioEmptyCard'\r\nimport { HawtioLoadingCard } from '../HawtioLoadingCard'\r\nimport { attributeService } from '../attributes/attribute-service'\r\nimport { WatchableAttributesForm } from './WatchableAttributesForm'\r\nimport { TableComposable, Tbody, Td, Tr } from '@patternfly/react-table'\r\n\r\ntype MBeanChartData = {\r\n  [name: string]: { attributes: AttributeChartEntries }\r\n}\r\n\r\ntype AttributeChartEntries = {\r\n  [name: string]: {\r\n    data: {\r\n      time: number\r\n      value: number\r\n    }[]\r\n    min: number\r\n    hasConstantValue: boolean\r\n  }\r\n}\r\ntype AttributesEntry = { [attName: string]: { time: number; value: number } }\r\n\r\nexport type AttributesToWatch = {\r\n  [name: string]: { [attributeName: string]: boolean }\r\n}\r\nconst AttributeChart = ({\r\n  name,\r\n  data,\r\n  min,\r\n}: {\r\n  name: string\r\n  data: { name: string; x: number; y: number }[]\r\n  min?: number\r\n}) => {\r\n  const containerRef = useRef<HTMLDivElement>(null)\r\n  const [width, setWidth] = useState<number>(0)\r\n  const handleResize = () => {\r\n    if (containerRef.current && containerRef.current.clientWidth) {\r\n      setWidth(containerRef.current.clientWidth)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const observer = getResizeObserver(containerRef.current!, handleResize)\r\n    handleResize()\r\n    return () => observer()\r\n  }, [])\r\n\r\n  return (\r\n    <div ref={containerRef} style={{ width: '100%', height: '220px' }}>\r\n      <ChartDraw\r\n        ariaTitle={name}\r\n        containerComponent={\r\n          <ChartVoronoiContainer labels={({ datum }) => `${datum.name}: ${datum.y}`} constrainToVisibleArea />\r\n        }\r\n        name={name}\r\n        key={name}\r\n        height={220}\r\n        width={width}\r\n        padding={{ left: 160, top: 30, bottom: 30, right: 20 }}\r\n        minDomain={{ y: min }}\r\n      >\r\n        <ChartArea data={data} />\r\n        <ChartAxis\r\n          fixLabelOverlap\r\n          orientation='bottom'\r\n          tickFormat={time => {\r\n            const date = new Date(time * 1000)\r\n            return `${date.getHours() >= 10 ? date.getHours() : '0' + date.getHours()}:${\r\n              date.getMinutes() >= 10 ? date.getMinutes() : '0' + date.getMinutes()\r\n            }:${date.getSeconds() >= 10 ? date.getSeconds() : '0' + date.getSeconds()}`\r\n          }}\r\n        />\r\n        <ChartAxis dependentAxis showGrid />\r\n      </ChartDraw>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const Chart: React.FunctionComponent = () => {\r\n  const { selectedNode } = useContext(PluginNodeSelectionContext)\r\n  const [chartData, setChartData] = useState<MBeanChartData>({})\r\n  const attributesToWatch = useRef<AttributesToWatch>({})\r\n  const [initialTime, setInitialTime] = useState<number>(-1)\r\n  const [showConstants, setShowConstants] = useState<boolean>(true)\r\n  const [isWatchableAttributesModalOpen, setIsWatchableAttributesModalOpen] = useState<boolean>(false)\r\n\r\n  function updateNumericAttributesToWatch(\r\n    currentWatchedAttributes: { [attributeName: string]: boolean },\r\n    newData: AttributesEntry,\r\n  ) {\r\n    //Now we set it if it's not already set\r\n    Object.entries(newData).forEach(([name, _value]) => {\r\n      if (currentWatchedAttributes[name] === undefined) {\r\n        currentWatchedAttributes[name] = true\r\n      }\r\n    })\r\n  }\r\n\r\n  function updateNode(mbeanObjectName: string, data: AttributesEntry): void {\r\n    if (!chartData[mbeanObjectName]) {\r\n      chartData[mbeanObjectName] = {\r\n        attributes: {},\r\n      }\r\n    }\r\n\r\n    const objectChartData = chartData[mbeanObjectName]!\r\n    //for every attribute\r\n    Object.entries(data).forEach(([attributeName, data]) => {\r\n      if (!objectChartData.attributes[attributeName]) {\r\n        objectChartData.attributes[attributeName] = {\r\n          data: [],\r\n          min: Number.MAX_SAFE_INTEGER,\r\n          hasConstantValue: true,\r\n        }\r\n      }\r\n\r\n      const attributeChartData = objectChartData.attributes[attributeName]!\r\n      // Don't add repeated responses to avoid duplicate points\r\n      if (!attributeChartData.data.find(entry => entry.time === data.time)) {\r\n        attributeChartData.data.push(data)\r\n\r\n        //track the min value for setting the min domain\r\n        if (data.value < attributeChartData.min) {\r\n          attributeChartData.min = data.value\r\n        }\r\n\r\n        if (\r\n          attributeChartData.data.length > 1 &&\r\n          attributeChartData.data[0]!.value !== data.value &&\r\n          attributeChartData.hasConstantValue\r\n        ) {\r\n          attributeChartData.hasConstantValue = false\r\n        }\r\n      }\r\n    })\r\n\r\n    if (!attributesToWatch.current[mbeanObjectName]) {\r\n      attributesToWatch.current[mbeanObjectName] = {}\r\n    }\r\n\r\n    const current = attributesToWatch.current[mbeanObjectName] ?? {}\r\n    updateNumericAttributesToWatch(current, data)\r\n\r\n    setChartData({ ...chartData })\r\n    attributesToWatch.current = { ...attributesToWatch.current }\r\n  }\r\n\r\n  function updateChartData(mbeanObjectName: string, data: AttributesEntry): void {\r\n    if (!selectedNode) return\r\n    else updateNode(mbeanObjectName, data)\r\n  }\r\n\r\n  function extractChartDataFromResponse(response: Response, nodeName: string) {\r\n    const time = response.timestamp\r\n    const attr = response.value as AttributeValues\r\n\r\n    const attributesEntry: AttributesEntry = {}\r\n    Object.entries(attr)\r\n      .filter(value => isNumber(value[1]))\r\n      .forEach(([attrName, value]) => {\r\n        attributesEntry[attrName] = {\r\n          time: time,\r\n          value: value as number,\r\n        }\r\n      })\r\n    updateChartData(nodeName, attributesEntry)\r\n  }\r\n\r\n  async function setJobsForNode(node: MBeanNode): Promise<void> {\r\n    if (!node) return\r\n    ;[node, ...node.getChildren()]\r\n      .filter(node => node && node.objectName)\r\n      .forEach(node => {\r\n        attributeService.register({ type: 'read', mbean: node.objectName! }, (response: Response) =>\r\n          extractChartDataFromResponse(response, node.name),\r\n        )\r\n      })\r\n  }\r\n\r\n  async function fetchChartData(node: MBeanNode) {\r\n    if (!node) return\r\n    const requests: Request[] = []\r\n    ;[node, ...node.getChildren()].forEach(node => {\r\n      if (node.objectName) requests.push({ type: 'read', mbean: node.objectName })\r\n    })\r\n\r\n    const responses = await attributeService.bulkRequest(requests)\r\n    responses.forEach(resp => {\r\n      const req = resp.request as unknown as { mbean: string }\r\n      let name = req.mbean.match(/name=\"([^\"]+)\"/)\r\n      if (!name) {\r\n        name = req.mbean.match(/type=\"([^\"]+)\"/)\r\n      }\r\n      if (name && name.length > 1) extractChartDataFromResponse(resp, name![1] as string)\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!selectedNode) {\r\n      return\r\n    }\r\n\r\n    if (initialTime === -1) {\r\n      setInitialTime(new Date().getTime())\r\n    }\r\n    fetchChartData(selectedNode)\r\n    setJobsForNode(selectedNode)\r\n\r\n    return () => {\r\n      attributeService.unregisterAll()\r\n      setChartData({})\r\n      attributesToWatch.current = {}\r\n      setInitialTime(-1)\r\n    }\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [selectedNode])\r\n\r\n  if (\r\n    !selectedNode ||\r\n    !(selectedNode.mbean || (selectedNode.getChildren() && selectedNode.getChildren().some(child => child.mbean)))\r\n  ) {\r\n    return null\r\n  }\r\n\r\n  if (Object.values(chartData).length === 0) {\r\n    // Data is still loading\r\n    return <HawtioLoadingCard />\r\n  }\r\n\r\n  if (Object.values(attributesToWatch.current).flatMap(node => Object.values(node)).length === 0) {\r\n    // Data has been loaded but there are no numeric attributes.\r\n    return <HawtioEmptyCard message='There are no chartable data in the MBean or its children.' />\r\n  }\r\n\r\n  if (\r\n    !Object.values(attributesToWatch.current)\r\n      .flatMap(node => Object.values(node))\r\n      .some(isWatched => isWatched)\r\n  ) {\r\n    // No currently watched attributes.\r\n    return (\r\n      <PageSection variant={PageSectionVariants.light} isFilled>\r\n        <WatchableAttributesForm\r\n          isOpen={isWatchableAttributesModalOpen}\r\n          onClose={(isClosed: boolean) => {\r\n            setIsWatchableAttributesModalOpen(isClosed)\r\n          }}\r\n          attributesToWatch={attributesToWatch.current}\r\n          onAttributesToWatchUpdate={newAttributes => (attributesToWatch.current = newAttributes)}\r\n        />\r\n        <Card>\r\n          <CardHeader>\r\n            <CardActions>\r\n              <Button onClick={() => setIsWatchableAttributesModalOpen(true)}>Edit watches</Button>\r\n            </CardActions>\r\n          </CardHeader>\r\n          <CardBody>\r\n            <Text component='p'>\r\n              <InfoCircleIcon /> There are currently no watches. Please click on the button to select any Chart\r\n            </Text>\r\n          </CardBody>\r\n        </Card>\r\n      </PageSection>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <WatchableAttributesForm\r\n        isOpen={isWatchableAttributesModalOpen}\r\n        onClose={(isClosed: boolean) => {\r\n          setIsWatchableAttributesModalOpen(isClosed)\r\n        }}\r\n        attributesToWatch={attributesToWatch.current}\r\n        onAttributesToWatchUpdate={newAttributes => (attributesToWatch.current = newAttributes)}\r\n      />\r\n      <Grid hasGutter span={12} xl2={6}>\r\n        <GridItem span={12}>\r\n          <Card>\r\n            <CardHeader>\r\n              <Switch\r\n                id='showConstants'\r\n                label='Show attributes with the constant value as a chart'\r\n                isChecked={showConstants}\r\n                onChange={checked => setShowConstants(checked)}\r\n              />\r\n              <CardActions>\r\n                <Button onClick={() => setIsWatchableAttributesModalOpen(true)}>Edit watches</Button>\r\n              </CardActions>\r\n            </CardHeader>\r\n          </Card>\r\n        </GridItem>\r\n        {Object.entries(chartData).map(([name, attributes]) =>\r\n          Object.entries(attributes.attributes)\r\n            .filter(([_, data]) => (showConstants ? true : !data.hasConstantValue))\r\n            .map(\r\n              ([attributeName, chartEntries]) =>\r\n                attributesToWatch.current[name]![attributeName] && (\r\n                  <GridItem key={attributeName}>\r\n                    <Card key={attributeName}>\r\n                      <CardHeader>\r\n                        <Title headingLevel='h3'>\r\n                          {name}: {attributeName}: {chartEntries.data[chartEntries.data.length - 1]!.value}\r\n                        </Title>\r\n                      </CardHeader>\r\n                      <CardBody>\r\n                        <AttributeChart\r\n                          key={`${name}-${attributeName}`}\r\n                          name={`${name}-${attributeName}`}\r\n                          min={chartEntries.hasConstantValue ? 0 : chartEntries.min}\r\n                          data={[\r\n                            ...chartEntries.data.map(data => ({\r\n                              name: new Date(data.time * 1000).toLocaleTimeString(),\r\n                              x: data.time,\r\n                              y: data.value,\r\n                            })),\r\n                          ]}\r\n                        />\r\n                      </CardBody>\r\n                    </Card>\r\n                  </GridItem>\r\n                ),\r\n            ),\r\n        )}\r\n\r\n        {!showConstants && (\r\n          <GridItem>\r\n            <Card>\r\n              <CardHeader>Attributes with the constant value:</CardHeader>\r\n              <CardBody>\r\n                <TableComposable variant={'compact'}>\r\n                  <Tbody>\r\n                    {Object.entries(chartData).map(([name, attributes]) =>\r\n                      Object.entries(attributes.attributes).map(\r\n                        ([attributeName, chartEntries]) =>\r\n                          attributesToWatch.current[name]![attributeName] &&\r\n                          chartEntries.hasConstantValue && (\r\n                            <Tr key={'obj-' + name + '-' + attributeName}>\r\n                              <Td>{attributeName}</Td>\r\n                              <Td>{chartEntries.data[0]!.value}</Td>\r\n                            </Tr>\r\n                          ),\r\n                      ),\r\n                    )}\r\n                  </Tbody>\r\n                </TableComposable>\r\n              </CardBody>\r\n            </Card>\r\n          </GridItem>\r\n        )}\r\n      </Grid>\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import { Button, DualListSelector, DualListSelectorTreeItemData, Modal, ModalVariant } from '@patternfly/react-core'\r\nimport { AttributesToWatch } from './Chart'\r\nimport { ReactNode, useState } from 'react'\r\n\r\nexport const WatchableAttributesForm = ({\r\n  isOpen,\r\n  onClose,\r\n  attributesToWatch,\r\n  onAttributesToWatchUpdate,\r\n}: {\r\n  isOpen: boolean\r\n  onClose: (isClosed: boolean) => void\r\n  attributesToWatch: AttributesToWatch\r\n  onAttributesToWatchUpdate: (newAttributes: AttributesToWatch) => void\r\n}) => {\r\n  const [modalAttributesToWatch, setModalAttributesToWatch] = useState<AttributesToWatch>(attributesToWatch)\r\n  // Take care when switching the text prop. As right now it's used to identify the key in attributes to watch prop.\r\n  // Because the key needs to be unique across all trees (or else there is a bug where the check selection applies to\r\n  // any element in any tree with the same key), I had to change the keys and no longer can use that prop for storing the key\r\n  // to the original attributes to watch.\r\n  // There is a way around this building a dictionary storing attribute names - keys, but it seemed too overengineered\r\n  // when the text is currently the same attribute name as the key in attributes to watch\r\n\r\n  return (\r\n    <Modal\r\n      variant={ModalVariant.large}\r\n      title='Modify watches'\r\n      isOpen={isOpen}\r\n      onClose={() => onClose(false)}\r\n      actions={[\r\n        <Button key='close' variant='primary' onClick={() => onClose(false)}>\r\n          Close\r\n        </Button>,\r\n      ]}\r\n    >\r\n      <DualListSelector\r\n        isSearchable\r\n        isTree\r\n        availableOptionsTitle='Watched attributes'\r\n        chosenOptionsTitle='Unwatched attributes'\r\n        availableOptions={Object.entries(modalAttributesToWatch)\r\n          .filter(([_, attributes]) => Object.values(attributes).some(isWatched => isWatched))\r\n          .map(([node, attributes]) => ({\r\n            id: node,\r\n            text: node,\r\n            isChecked: false,\r\n            children: Object.entries(attributes)\r\n              .filter(([_, isWatched]) => isWatched)\r\n              .map(([attributeName, _]) => ({\r\n                id: `${node} ${attributeName}`,\r\n                text: attributeName,\r\n                isChecked: false,\r\n              })),\r\n          }))}\r\n        chosenOptions={Object.entries(modalAttributesToWatch)\r\n          .filter(([_, attributes]) => Object.values(attributes).some(isWatched => !isWatched))\r\n          .map(([node, attributes]) => ({\r\n            id: node,\r\n            text: node,\r\n            isChecked: false,\r\n            children: Object.entries(attributes)\r\n              .filter(([_, isWatched]) => !isWatched)\r\n              .map(([attributeName, _]) => ({\r\n                id: `${node} ${attributeName}`,\r\n                text: attributeName,\r\n                isChecked: false,\r\n              })),\r\n          }))}\r\n        onListChange={\r\n          ((\r\n            newWatchedAttributes: DualListSelectorTreeItemData[],\r\n            newUnwatchedAttributes: DualListSelectorTreeItemData[],\r\n          ) => {\r\n            const newWatches: AttributesToWatch = {}\r\n            newWatchedAttributes.forEach(newWatchedAttribute => {\r\n              newWatches[newWatchedAttribute.text] = {\r\n                ...Object.fromEntries(newWatchedAttribute.children?.map(({ text }) => [text, true]) || []),\r\n              }\r\n            })\r\n            newUnwatchedAttributes.forEach(newUnwatchedAttribute => {\r\n              newWatches[newUnwatchedAttribute.text] = {\r\n                ...(newWatches[newUnwatchedAttribute.text] || {}),\r\n                ...Object.fromEntries(newUnwatchedAttribute.children?.map(({ text }) => [text, false]) || []),\r\n              }\r\n            })\r\n\r\n            onAttributesToWatchUpdate(newWatches)\r\n            setModalAttributesToWatch({ ...newWatches })\r\n          }) as unknown as (newAvailableOptions: ReactNode[], newChosenOptions: ReactNode[]) => void\r\n        }\r\n      />\r\n    </Modal>\r\n  )\r\n}\r\n","import { PluginNodeSelectionContext } from '@hawtiosrc/plugins/context'\r\nimport { isEmpty } from '@hawtiosrc/util/objects'\r\nimport { DataList, Panel, PanelHeader, PanelMain, PanelMainBody, Text } from '@patternfly/react-core'\r\nimport React, { useContext } from 'react'\r\nimport { HawtioEmptyCard } from '../HawtioEmptyCard'\r\nimport { OperationForm } from './OperationForm'\r\nimport './Operations.css'\r\nimport { createOperations } from './operation'\r\n\r\nexport const Operations: React.FunctionComponent = () => {\r\n  const { selectedNode } = useContext(PluginNodeSelectionContext)\r\n\r\n  if (!selectedNode || !selectedNode.mbean) {\r\n    return null\r\n  }\r\n\r\n  const { mbean } = selectedNode\r\n\r\n  if (!mbean.op || isEmpty(mbean.op)) {\r\n    return <HawtioEmptyCard message='This MBean has no JMX operations.' />\r\n  }\r\n\r\n  const operations = createOperations(mbean.op)\r\n\r\n  const OperationList = () => (\r\n    <DataList id='jmx-operation-list' aria-label='operation list' isCompact>\r\n      {operations.map(op => (\r\n        <OperationForm key={op.name} name={op.name} operation={op} />\r\n      ))}\r\n    </DataList>\r\n  )\r\n\r\n  return (\r\n    <Panel>\r\n      <PanelHeader>\r\n        <Text component='p'>\r\n          This MBean supports the following JMX operations. Expand an item in the list to invoke that operation.\r\n        </Text>\r\n      </PanelHeader>\r\n      <PanelMain>\r\n        <PanelMainBody>\r\n          <OperationList />\r\n        </PanelMainBody>\r\n      </PanelMain>\r\n    </Panel>\r\n  )\r\n}\r\n","import { eventService } from '@hawtiosrc/core'\r\nimport { PluginNodeSelectionContext } from '@hawtiosrc/plugins/context'\r\nimport {\r\n  ActionGroup,\r\n  Button,\r\n  Checkbox,\r\n  ClipboardCopy,\r\n  ClipboardCopyVariant,\r\n  DataListAction,\r\n  DataListCell,\r\n  DataListContent,\r\n  DataListItem,\r\n  DataListItemCells,\r\n  DataListItemRow,\r\n  DataListToggle,\r\n  Dropdown,\r\n  DropdownItem,\r\n  DropdownPosition,\r\n  Form,\r\n  FormGroup,\r\n  KebabToggle,\r\n  Text,\r\n  TextInput,\r\n  Title,\r\n} from '@patternfly/react-core'\r\nimport { LockIcon } from '@patternfly/react-icons'\r\nimport React, { createContext, useContext, useState } from 'react'\r\nimport './OperationForm.css'\r\nimport { Operation, OperationArgument } from './operation'\r\nimport { operationService } from './operation-service'\r\n\r\nexport const OperationContext = createContext<{\r\n  name: string\r\n  operation: Operation\r\n  objectName: string\r\n}>({\r\n  name: '',\r\n  operation: new Operation('', [], '', ''),\r\n  objectName: '',\r\n})\r\n\r\nexport const OperationForm: React.FunctionComponent<{\r\n  name: string\r\n  operation: Operation\r\n}> = ({ name, operation }) => {\r\n  const { selectedNode } = useContext(PluginNodeSelectionContext)\r\n  const [isExpanded, setIsExpanded] = useState(false)\r\n\r\n  if (!selectedNode || !selectedNode.objectName || !selectedNode.mbean) {\r\n    return null\r\n  }\r\n\r\n  const { objectName } = selectedNode\r\n\r\n  const handleToggle = () => {\r\n    setIsExpanded(!isExpanded)\r\n  }\r\n\r\n  const operationCells = [\r\n    <DataListCell key={`operation-cell-name-${name}`} isFilled={false}>\r\n      <code className='operation-datatype'>{operation.readableReturnType}</code>\r\n      <b>{operation.readableName}</b>\r\n    </DataListCell>,\r\n    <DataListCell key={`operation-cell-desc-${name}`} isFilled={false}>\r\n      {operation.description}\r\n    </DataListCell>,\r\n  ]\r\n  // Lock if it's not invocable\r\n  if (!operation.canInvoke) {\r\n    operationCells.unshift(\r\n      <DataListCell key={`operation-cell-icon-${name}`} isIcon isFilled={false}>\r\n        <LockIcon />\r\n      </DataListCell>,\r\n    )\r\n  }\r\n\r\n  return (\r\n    <OperationContext.Provider value={{ name, operation, objectName }}>\r\n      <DataListItem key={`operation-${name}`} aria-labelledby={`operation ${name}`} isExpanded={isExpanded}>\r\n        <DataListItemRow>\r\n          <DataListToggle onClick={handleToggle} isExpanded={isExpanded} id='ex-toggle1' aria-controls='ex-expand1' />\r\n          <DataListItemCells dataListCells={operationCells} />\r\n          <OperationActions />\r\n        </DataListItemRow>\r\n        <OperationFormContents isExpanded={isExpanded} />\r\n      </DataListItem>\r\n    </OperationContext.Provider>\r\n  )\r\n}\r\n\r\nconst OperationActions: React.FunctionComponent = () => {\r\n  const { name, operation, objectName } = useContext(OperationContext)\r\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false)\r\n\r\n  const handleDropdownToggle = () => {\r\n    setIsDropdownOpen(!isDropdownOpen)\r\n  }\r\n\r\n  const notifySuccessfulCopy = () => {\r\n    eventService.notify({\r\n      type: 'success',\r\n      message: 'Copied to clipboard',\r\n    })\r\n  }\r\n\r\n  const copyToClipboard = (text: string) => {\r\n    navigator.clipboard.writeText(text)\r\n    notifySuccessfulCopy()\r\n  }\r\n\r\n  const copyMethodName = () => {\r\n    copyToClipboard(operation.readableName)\r\n  }\r\n\r\n  const copyJolokiaURL = async () => {\r\n    copyToClipboard(await operationService.getJolokiaUrl(objectName, name))\r\n  }\r\n\r\n  return (\r\n    <DataListAction\r\n      id={`operation-actions-${name}`}\r\n      aria-label={`operation actions ${name}`}\r\n      aria-labelledby={`${name} operation-actions-${name}`}\r\n    >\r\n      <Dropdown\r\n        key={`operation-action-dropdown-${name}`}\r\n        isPlain\r\n        position={DropdownPosition.right}\r\n        isOpen={isDropdownOpen}\r\n        toggle={<KebabToggle onToggle={handleDropdownToggle} />}\r\n        dropdownItems={[\r\n          <DropdownItem key={`operation-action-copy-method-name-${name}`} onClick={copyMethodName}>\r\n            Copy method name\r\n          </DropdownItem>,\r\n          <DropdownItem key={`operation-action-copy-jolokia-url-${name}`} onClick={copyJolokiaURL}>\r\n            Copy Jolokia URL\r\n          </DropdownItem>,\r\n        ]}\r\n      />\r\n    </DataListAction>\r\n  )\r\n}\r\n\r\nconst OperationFormContents: React.FunctionComponent<{ isExpanded: boolean }> = ({ isExpanded }) => {\r\n  const { name } = useContext(OperationContext)\r\n  const [isFailed, setIsFailed] = useState(false)\r\n  const [result, setResult] = useState<string | null>(null)\r\n\r\n  // TODO: impl HTML escaping\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  const isResultHtml = () => {\r\n    if (!result) {\r\n      return false\r\n    }\r\n    return result.startsWith('<!DOCTYPE html>') || /^<table[^>]*>/.test(result) || /^<ul[^>]*>/.test(result)\r\n  }\r\n\r\n  const OperationExecuteResult = () => (\r\n    <React.Fragment>\r\n      <Title headingLevel='h4'>Result</Title>\r\n      <ClipboardCopy\r\n        variant={ClipboardCopyVariant.expansion}\r\n        isExpanded\r\n        isCode\r\n        isReadOnly\r\n        removeFindDomNode\r\n        className={isFailed ? 'jmx-operation-error' : ''}\r\n      >\r\n        {result}\r\n      </ClipboardCopy>\r\n    </React.Fragment>\r\n  )\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <DataListContent id={`operation-execute-${name}`} aria-label={`operation execute ${name}`} isHidden={!isExpanded}>\r\n        <OperationExecuteForm setResult={setResult} setIsFailed={setIsFailed} />\r\n      </DataListContent>\r\n      {result && (\r\n        <DataListContent id={`operation-result-${name}`} aria-label={`operation result ${name}`} isHidden={!isExpanded}>\r\n          <OperationExecuteResult />\r\n        </DataListContent>\r\n      )}\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nfunction defaultValue(javaType: string): unknown {\r\n  switch (javaType) {\r\n    case 'boolean':\r\n    case 'java.lang.Boolean':\r\n      return false\r\n    case 'int':\r\n    case 'long':\r\n    case 'java.lang.Integer':\r\n    case 'java.lang.Long':\r\n      return 0\r\n    default:\r\n      return ''\r\n  }\r\n}\r\n\r\nconst OperationExecuteForm: React.FunctionComponent<{\r\n  setResult: (result: string) => void\r\n  setIsFailed: (failed: boolean) => void\r\n}> = ({ setResult, setIsFailed }) => {\r\n  const { name, operation, objectName } = useContext(OperationContext)\r\n  const [isExecuting, setIsExecuting] = useState(false)\r\n\r\n  const [argValues, setArgValues] = useState<unknown[]>(operation.args.map(arg => defaultValue(arg.type)))\r\n\r\n  const updateArgValues = (index: number) => (value: boolean | string) => {\r\n    const values = [...argValues]\r\n    values[index] = value\r\n    setArgValues(values)\r\n  }\r\n\r\n  const processResult = (result: unknown) => {\r\n    if (operation.returnType === 'void' && (!result || result === 'null')) {\r\n      return 'Operation successful'\r\n    }\r\n    switch (typeof result) {\r\n      case 'boolean':\r\n        return result.toString()\r\n      case 'string': {\r\n        const trimmed = result.trim()\r\n        if (trimmed === '') {\r\n          return 'Empty string'\r\n        }\r\n        return trimmed\r\n      }\r\n      default:\r\n        return JSON.stringify(result, null, 2)\r\n    }\r\n  }\r\n\r\n  const execute = async () => {\r\n    setIsExecuting(true)\r\n    try {\r\n      const result = await operationService.execute(objectName, name, argValues)\r\n      setIsFailed(false)\r\n      setResult(processResult(result))\r\n    } catch (err) {\r\n      setIsFailed(true)\r\n      setResult(String(err))\r\n    } finally {\r\n      setIsExecuting(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Form isHorizontal={operation.args.length > 0}>\r\n      {operation.args.length === 0 && (\r\n        <Text component='p'>\r\n          This JMX operation requires no arguments. Click the <code>Execute</code> button to invoke the operation.\r\n        </Text>\r\n      )}\r\n      {operation.args.length > 0 && (\r\n        <Text component='p'>\r\n          This JMX operation requires some parameters. Fill in the fields below and click the <code>Execute</code>{' '}\r\n          button to invoke the operation.\r\n        </Text>\r\n      )}\r\n      {operation.args.map((arg, index) => (\r\n        <FormGroup\r\n          key={`operation-${name}-form-${arg.name}-${index}`}\r\n          label={arg.name}\r\n          fieldId={`operation-${name}-form-${arg.name}-${index}`}\r\n          helperText={arg.helpText()}\r\n        >\r\n          <ArgFormInput\r\n            key={`operation-${name}-arg-form-${arg.name}-${index}`}\r\n            opName={name}\r\n            arg={arg}\r\n            index={index}\r\n            canInvoke={operation.canInvoke}\r\n            argValues={argValues}\r\n            updateArgValues={updateArgValues}\r\n          />\r\n        </FormGroup>\r\n      ))}\r\n      <ActionGroup>\r\n        <Button\r\n          key={`operation-action-execute-${name}`}\r\n          variant='danger'\r\n          onClick={execute}\r\n          isSmall\r\n          isDisabled={!operation.canInvoke || isExecuting}\r\n        >\r\n          Execute\r\n        </Button>\r\n      </ActionGroup>\r\n    </Form>\r\n  )\r\n}\r\n\r\nconst ArgFormInput: React.FunctionComponent<{\r\n  opName: string\r\n  arg: OperationArgument\r\n  index: number\r\n  canInvoke: boolean\r\n  argValues: unknown[]\r\n  updateArgValues: (index: number) => (value: boolean | string) => void\r\n}> = ({ opName, arg, index, canInvoke, argValues, updateArgValues }) => {\r\n  const id = `operation-${opName}-arg-form-input-${arg.name}-${index}`\r\n  const value = argValues[index]\r\n  switch (arg.type) {\r\n    case 'boolean':\r\n    case 'java.lang.Boolean':\r\n      return <Checkbox id={id} isChecked={Boolean(value)} onChange={updateArgValues(index)} isDisabled={!canInvoke} />\r\n    case 'int':\r\n    case 'long':\r\n    case 'java.lang.Integer':\r\n    case 'java.lang.Long':\r\n      return (\r\n        <TextInput\r\n          id={id}\r\n          type='number'\r\n          value={Number(value)}\r\n          onChange={updateArgValues(index)}\r\n          isDisabled={!canInvoke}\r\n        />\r\n      )\r\n\r\n    default:\r\n      return (\r\n        <TextInput\r\n          id={id}\r\n          type='text'\r\n          value={String(value)}\r\n          onChange={updateArgValues(index)}\r\n          isDisabled={!canInvoke}\r\n        />\r\n      )\r\n  }\r\n}\r\n","import { eventService } from '@hawtiosrc/core'\r\nimport { stringSorter } from '@hawtiosrc/util/strings'\r\nimport { log } from '../globals'\r\nimport { OptimisedMBeanOperation, OptimisedMBeanOperations } from '../tree'\r\n\r\n/**\r\n * Factory function for Operation objects.\r\n */\r\nexport function createOperations(jmxOperations: OptimisedMBeanOperations): Operation[] {\r\n  const operations: Operation[] = []\r\n  const errors: string[] = []\r\n  Object.entries(jmxOperations).forEach(([name, op]) => {\r\n    if (Array.isArray(op)) {\r\n      op.forEach(op => addOperation(operations, name, op, errors))\r\n    } else {\r\n      addOperation(operations, name, op, errors)\r\n    }\r\n  })\r\n  if (errors.length > 0) {\r\n    eventService.notify({\r\n      type: 'danger',\r\n      message: `Please try increasing max depth for Jolokia in the Connect preferences. Failed to load operations: ${errors.join(\r\n        ', ',\r\n      )}.`,\r\n      duration: 30 * 1000, // 30 sec.\r\n    })\r\n  }\r\n  return operations.sort((a, b) => stringSorter(a.readableName, b.readableName))\r\n}\r\n\r\nfunction addOperation(operations: Operation[], name: string, op: OptimisedMBeanOperation, errors: string[]) {\r\n  try {\r\n    const operation = new Operation(\r\n      name,\r\n      op.args.map(arg => new OperationArgument(arg.name, arg.type, arg.desc)),\r\n      op.desc,\r\n      op.ret,\r\n      op.canInvoke,\r\n    )\r\n    operations.push(operation)\r\n  } catch (error) {\r\n    // Error can happen when max depth for Jolokia LIST is too small and part of\r\n    // the returned MBeans are compressed in a string form. In that case, the user\r\n    // needs to increase max depth for Jolokia requests in Connect preferences.\r\n    log.error('Operations - Error creating operation:', name, error)\r\n    errors.push(name)\r\n  }\r\n}\r\n\r\nfunction readableType(tn: string): string {\r\n  let typeName = tn\r\n  if (typeName.startsWith('[') && typeName.length == 2) {\r\n    // primitive array type\r\n    switch (typeName[1]) {\r\n      case 'C':\r\n        return 'char[]'\r\n      case 'B':\r\n        return 'byte[]'\r\n      case 'S':\r\n        return 'short[]'\r\n      case 'I':\r\n        return 'int[]'\r\n      case 'J':\r\n        return 'long[]'\r\n      case 'Z':\r\n        return 'boolean[]'\r\n      case 'F':\r\n        return 'float[]'\r\n      case 'D':\r\n        return 'double[]'\r\n    }\r\n  }\r\n  let array = false\r\n  if (typeName.startsWith('[L') && typeName.endsWith(';')) {\r\n    // non-primitive array type\r\n    array = true\r\n    typeName = typeName.substring(2, typeName.length - 1)\r\n  }\r\n  const splitName = typeName.split('.')\r\n  const lastName = splitName.pop()\r\n  const packageName = splitName.join('.')\r\n\r\n  if (typeName && Operation.IGNORED_PACKAGES.includes(packageName)) {\r\n    return lastName + (array ? '[]' : '')\r\n  } else {\r\n    return typeName + (array ? '[]' : '')\r\n  }\r\n}\r\n\r\nexport class Operation {\r\n  readonly name: string\r\n  readonly readableName: string\r\n  readonly readableReturnType: string\r\n\r\n  static readonly IGNORED_PACKAGES = ['java.util', 'java.lang']\r\n\r\n  constructor(\r\n    readonly method: string,\r\n    readonly args: OperationArgument[],\r\n    readonly description: string,\r\n    readonly returnType: string,\r\n    readonly canInvoke: boolean = true,\r\n  ) {\r\n    this.name = this.buildName(method)\r\n    this.readableName = this.buildReadableName(method)\r\n    this.readableReturnType = this.buildReadableReturnType()\r\n  }\r\n\r\n  private buildName(method: string): string {\r\n    return method + '(' + this.args.map(arg => arg.type).join() + ')'\r\n  }\r\n\r\n  private buildReadableName(method: string): string {\r\n    return method + '(' + this.args.map(arg => arg.readableType).join(', ') + ')'\r\n  }\r\n\r\n  private buildReadableReturnType(): string {\r\n    return readableType(this.returnType)\r\n  }\r\n}\r\n\r\nexport class OperationArgument {\r\n  readonly readableType: string\r\n\r\n  constructor(\r\n    readonly name: string,\r\n    readonly type: string,\r\n    readonly desc: string,\r\n  ) {\r\n    this.readableType = this.buildReadableType()\r\n  }\r\n\r\n  private buildReadableType(): string {\r\n    return readableType(this.type)\r\n  }\r\n\r\n  helpText(): string {\r\n    let help = this.desc\r\n    if (help && help !== this.name) {\r\n      if (help.charAt(help.length - 1) !== '.') {\r\n        help = help + '.'\r\n      }\r\n    } else {\r\n      help = ''\r\n    }\r\n    return `${help} Type: ${this.readableType}`\r\n  }\r\n}\r\n","import { jolokiaService } from '@hawtiosrc/plugins/shared/jolokia-service'\r\nimport { escapeMBean } from '@hawtiosrc/util/jolokia'\r\nimport { log } from '../globals'\r\n\r\nclass OperationService {\r\n  async execute(mbean: string, operation: string, args: unknown[]): Promise<unknown> {\r\n    log.debug('Execute:', mbean, '-', operation, '-', args)\r\n    return jolokiaService.execute(mbean, operation, args)\r\n  }\r\n\r\n  async getJolokiaUrl(mbean: string, operation: string): Promise<string> {\r\n    const mbeanName = escapeMBean(mbean)\r\n    const jolokiaUrl = await jolokiaService.getFullJolokiaUrl()\r\n    return `${jolokiaUrl}/exec/${mbeanName}/${operation}`\r\n  }\r\n}\r\n\r\nexport const operationService = new OperationService()\r\n","import { userService } from '@hawtiosrc/auth'\r\nimport { configManager, eventService, JmxConfig, Logger } from '@hawtiosrc/core'\r\nimport { jolokiaService } from '@hawtiosrc/plugins/shared/jolokia-service'\r\nimport { ErrorResponse, ListRequestOptions, Response } from 'jolokia.js'\r\nimport { pluginName } from './globals'\r\nimport { MBeanNode, MBeanTree } from './tree'\r\n\r\nconst log = Logger.get(`${pluginName}-workspace`)\r\n\r\nconst HAWTIO_REGISTRY_MBEAN = 'hawtio:type=Registry'\r\nconst HAWTIO_TREE_WATCHER_MBEAN = 'hawtio:type=TreeWatcher'\r\n\r\nexport interface IWorkspace {\r\n  refreshTree(): Promise<void>\r\n  getTree(): Promise<MBeanTree>\r\n  hasMBeans(): Promise<boolean>\r\n  treeContainsDomainAndProperties(domainName: string, properties?: Record<string, unknown>): Promise<boolean>\r\n  findMBeans(domainName: string, properties: Record<string, unknown>): Promise<MBeanNode[]>\r\n}\r\n\r\nclass Workspace implements IWorkspace {\r\n  private tree?: Promise<MBeanTree>\r\n\r\n  private pluginRegisterHandle?: Promise<number>\r\n  private pluginUpdateCounter?: number\r\n  private treeWatchRegisterHandle?: Promise<number>\r\n  private treeWatcherCounter?: number\r\n\r\n  async refreshTree() {\r\n    this.tree = undefined\r\n    await this.getTree()\r\n    eventService.refresh()\r\n  }\r\n\r\n  getTree(): Promise<MBeanTree> {\r\n    if (this.tree) {\r\n      return this.tree\r\n    }\r\n\r\n    this.tree = this.loadTree()\r\n    return this.tree\r\n  }\r\n\r\n  private async loadTree(): Promise<MBeanTree> {\r\n    if (!(await userService.isLogin())) {\r\n      throw new Error('User needs to have logged in to use workspace')\r\n    }\r\n\r\n    const config = await this.getConfig()\r\n    if (config.workspace === false || (typeof config.workspace !== 'boolean' && config.workspace?.length === 0)) {\r\n      return MBeanTree.createEmpty(pluginName)\r\n    }\r\n    const mbeanPaths = config.workspace && typeof config.workspace !== 'boolean' ? config.workspace : []\r\n\r\n    log.debug('Load JMX MBean tree:', mbeanPaths)\r\n    const options: ListRequestOptions = {\r\n      ignoreErrors: true,\r\n      error: (response: ErrorResponse) => {\r\n        log.debug('Error - fetching JMX tree:', response)\r\n      },\r\n      ajaxError: (xhr: JQueryXHR, text: string, error: string) => {\r\n        log.debug('Ajax error - fetching JMX tree:', text, '-', error)\r\n      },\r\n    }\r\n    try {\r\n      const domains = await (mbeanPaths.length > 0\r\n        ? jolokiaService.sublist(mbeanPaths, options)\r\n        : jolokiaService.list(options))\r\n      log.debug('JMX tree loaded:', domains)\r\n\r\n      const tree = await MBeanTree.createFromDomains(pluginName, domains)\r\n\r\n      this.maybeMonitorPlugins()\r\n      this.maybeMonitorTree()\r\n\r\n      return tree\r\n    } catch (error) {\r\n      log.error('A request to list the JMX tree failed:', error)\r\n      return MBeanTree.createEmpty(pluginName)\r\n    }\r\n  }\r\n\r\n  private async getConfig(): Promise<JmxConfig> {\r\n    const { jmx } = await configManager.getHawtconfig()\r\n    return jmx ?? {}\r\n  }\r\n\r\n  /**\r\n   * If the Registry plugin is available then register\r\n   * a callback to refresh the active app plugins in use.\r\n   */\r\n  private async maybeMonitorPlugins() {\r\n    const hasRegistry = await this.treeContainsDomainAndProperties('hawtio', { type: 'Registry' })\r\n\r\n    if (hasRegistry) {\r\n      if (!this.pluginRegisterHandle) {\r\n        this.pluginRegisterHandle = jolokiaService.register(\r\n          {\r\n            type: 'read',\r\n            mbean: HAWTIO_REGISTRY_MBEAN,\r\n            attribute: 'UpdateCounter',\r\n          },\r\n          (response: Response) => this.maybeUpdatePlugins(response),\r\n        )\r\n      }\r\n    } else {\r\n      if (this.pluginRegisterHandle) {\r\n        const handle = await this.pluginRegisterHandle\r\n        await jolokiaService.unregister(handle)\r\n        this.pluginRegisterHandle = undefined\r\n        this.pluginUpdateCounter = undefined\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * If the TreeWatcher plugin is available then register\r\n   * a callback to reload the tree in order to refresh\r\n   * the changes.\r\n   */\r\n  private async maybeMonitorTree() {\r\n    const hasTreeWatcher = await this.treeContainsDomainAndProperties('hawtio', { type: 'TreeWatcher' })\r\n\r\n    if (hasTreeWatcher) {\r\n      if (!this.treeWatchRegisterHandle) {\r\n        this.treeWatchRegisterHandle = jolokiaService.register(\r\n          {\r\n            type: 'read',\r\n            mbean: HAWTIO_TREE_WATCHER_MBEAN,\r\n            attribute: 'Counter',\r\n          },\r\n          (response: Response) => this.maybeReloadTree(response),\r\n        )\r\n      }\r\n    } else {\r\n      if (this.treeWatchRegisterHandle) {\r\n        const handle = await this.treeWatchRegisterHandle\r\n        jolokiaService.unregister(handle)\r\n        this.treeWatchRegisterHandle = undefined\r\n        this.treeWatcherCounter = undefined\r\n      }\r\n    }\r\n  }\r\n\r\n  private maybeUpdatePlugins(response: Response) {\r\n    const counter = response.value as number\r\n    if (!this.pluginUpdateCounter) {\r\n      // Initial counter setting\r\n      this.pluginUpdateCounter = counter\r\n      return\r\n    }\r\n    if (this.pluginUpdateCounter === counter) {\r\n      return\r\n    }\r\n\r\n    // Refresh plugins by reloading page\r\n    log.debug('Plugin update counter changed:', this.pluginUpdateCounter, '->', counter)\r\n    if (jolokiaService.loadAutoRefresh()) {\r\n      log.debug('Update plugins')\r\n      window.location.reload()\r\n    }\r\n  }\r\n\r\n  private maybeReloadTree(response: Response) {\r\n    const counter = response.value as number\r\n    if (!this.treeWatcherCounter) {\r\n      // Initial counter setting\r\n      this.treeWatcherCounter = counter\r\n      return\r\n    }\r\n    if (this.treeWatcherCounter === counter) {\r\n      return\r\n    }\r\n    // Refresh plugins by reloading page\r\n    log.debug('Tree watcher counter changed:', this.treeWatcherCounter, '->', counter)\r\n    this.treeWatcherCounter = counter as number\r\n    log.debug('Refresh tree')\r\n    this.refreshTree()\r\n  }\r\n\r\n  /**\r\n   * Returns true if this workspace has any MBeans at all.\r\n   */\r\n  async hasMBeans(): Promise<boolean> {\r\n    const tree = await this.getTree()\r\n    return !tree.isEmpty()\r\n  }\r\n\r\n  private matchesProperties(node: MBeanNode, properties: Record<string, unknown>): boolean {\r\n    if (!node) return false\r\n\r\n    for (const [k, v] of Object.entries(properties)) {\r\n      switch (k) {\r\n        case 'id':\r\n          if (!node.id.startsWith(v as string) && node.id !== v) return false\r\n          break\r\n        case 'name':\r\n          if (node.name !== v) return false\r\n          break\r\n        case 'icon':\r\n          if (JSON.stringify(node.icon) !== JSON.stringify(v)) return false\r\n          break\r\n      }\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  async treeContainsDomainAndProperties(domainName: string, properties?: Record<string, unknown>): Promise<boolean> {\r\n    const tree = await this.getTree()\r\n    const domain = tree.get(domainName)\r\n    if (!domain) {\r\n      return false\r\n    }\r\n\r\n    if (properties) {\r\n      const domainAndChildren: MBeanNode[] = [domain]\r\n      domainAndChildren.push(...(domain.children ?? []))\r\n      const checkProperties = (node: MBeanNode) => {\r\n        if (!this.matchesProperties(node, properties)) {\r\n          if (node.children && node.children.length > 0) {\r\n            return node.children.some(checkProperties)\r\n          } else {\r\n            return false\r\n          }\r\n        } else {\r\n          return true\r\n        }\r\n      }\r\n      return domainAndChildren.some(checkProperties)\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * Finds MBeans in the workspace based on the domain name and properties.\r\n   */\r\n  async findMBeans(domainName: string, properties: Record<string, string>): Promise<MBeanNode[]> {\r\n    const tree = await this.getTree()\r\n    return tree.findMBeans(domainName, properties)\r\n  }\r\n}\r\n\r\nexport const workspace: IWorkspace = new Workspace()\r\n","import React from 'react'\r\n\r\nexport type Preferences = {\r\n  id: string\r\n  title: string\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  component: React.ComponentType<any>\r\n  order: number\r\n}\r\n\r\nclass PreferencesRegistry {\r\n  private preferences: { [id: string]: Preferences } = {}\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  add(id: string, title: string, component: React.ComponentType<any>, order = 100) {\r\n    if (this.preferences[id]) {\r\n      throw new Error(`Preferences '${id}' already registered`)\r\n    }\r\n    this.preferences[id] = { id, title, component, order }\r\n  }\r\n\r\n  getPreferences(): Preferences[] {\r\n    return Object.values(this.preferences).sort((a, b) => a.order - b.order)\r\n  }\r\n\r\n  reset() {\r\n    this.preferences = {}\r\n  }\r\n}\r\n\r\nexport const preferencesRegistry = new PreferencesRegistry()\r\n","import {\r\n  EmptyState,\r\n  EmptyStateIcon,\r\n  EmptyStateVariant,\r\n  PageSection,\r\n  PageSectionVariants,\r\n  Spinner,\r\n  Title,\r\n} from '@patternfly/react-core'\r\nimport { CubesIcon } from '@patternfly/react-icons'\r\nimport React from 'react'\r\nimport Split from 'react-split'\r\nimport './Camel.css'\r\nimport { CamelContent } from './CamelContent'\r\nimport { CamelTreeView } from './CamelTreeView'\r\nimport { CamelContext, useCamelTree } from './context'\r\n\r\nexport const Camel: React.FunctionComponent = () => {\r\n  const { tree, loaded, selectedNode, setSelectedNode } = useCamelTree()\r\n\r\n  if (!loaded) {\r\n    return (\r\n      <PageSection>\r\n        <Spinner isSVG aria-label='Loading Camel Contexts tree' />\r\n      </PageSection>\r\n    )\r\n  }\r\n\r\n  if (tree.isEmpty()) {\r\n    return (\r\n      <PageSection variant={PageSectionVariants.light}>\r\n        <EmptyState variant={EmptyStateVariant.full}>\r\n          <EmptyStateIcon icon={CubesIcon} />\r\n          <Title headingLevel='h1' size='lg'>\r\n            No Camel Contexts found\r\n          </Title>\r\n        </EmptyState>\r\n      </PageSection>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <CamelContext.Provider value={{ tree, selectedNode, setSelectedNode }}>\r\n      <Split className='camel-split' sizes={[25, 75]} minSize={200} gutterSize={5}>\r\n        <div>\r\n          <CamelTreeView />\r\n        </div>\r\n        <div>\r\n          <CamelContent />\r\n        </div>\r\n      </Split>\r\n    </CamelContext.Provider>\r\n  )\r\n}\r\n","import { eventService } from '@hawtiosrc/core'\r\nimport { AttributeValues, Attributes, Chart, JmxContentMBeans, MBeanNode, Operations } from '@hawtiosrc/plugins/shared'\r\nimport {\r\n  Divider,\r\n  EmptyState,\r\n  EmptyStateIcon,\r\n  EmptyStateVariant,\r\n  Nav,\r\n  NavItem,\r\n  NavList,\r\n  PageGroup,\r\n  PageSection,\r\n  PageSectionVariants,\r\n  Text,\r\n  Title,\r\n} from '@patternfly/react-core'\r\nimport { CubesIcon } from '@patternfly/react-icons'\r\nimport { Response } from 'jolokia.js'\r\nimport React, { useContext, useEffect, useState } from 'react'\r\nimport { NavLink, Navigate, Route, Routes, useLocation, useNavigate } from 'react-router-dom'\r\nimport './CamelContent.css'\r\nimport * as camelService from './camel-service'\r\nimport { CamelContext } from './context'\r\nimport { Contexts } from './contexts'\r\nimport { ContextToolbar } from './contexts/ContextToolbar'\r\nimport { ContextState, contextsService } from './contexts/contexts-service'\r\nimport { Debug } from './debug'\r\nimport { Endpoints } from './endpoints'\r\nimport { BrowseMessages } from './endpoints/BrowseMessages'\r\nimport { EndpointStats } from './endpoints/EndpointsStats'\r\nimport { SendMessage } from './endpoints/SendMessage'\r\nimport { Exchanges } from './exchanges'\r\nimport { log, pluginPath } from './globals'\r\nimport { Profile } from './profile/Profile'\r\nimport { Properties } from './properties'\r\nimport { RestServices } from './rest-services/RestServices'\r\nimport { RouteDiagram } from './route-diagram/RouteDiagram'\r\nimport { RouteDiagramContext, useRouteDiagramContext } from './route-diagram/context'\r\nimport { CamelRoutes } from './routes/CamelRoutes'\r\nimport { Source } from './routes/Source'\r\nimport { Trace } from './trace'\r\nimport { TypeConverters } from './type-converters'\r\n\r\ntype NavItem = {\r\n  id: string\r\n  title: string\r\n  component: JSX.Element\r\n  isApplicable: (node: MBeanNode) => boolean\r\n}\r\n\r\nexport const CamelContent: React.FunctionComponent = () => {\r\n  const { selectedNode } = useContext(CamelContext)\r\n  const routeDiagramContext = useRouteDiagramContext()\r\n  const { pathname, search } = useLocation()\r\n\r\n  if (!selectedNode) {\r\n    return (\r\n      <PageSection variant={PageSectionVariants.light} isFilled>\r\n        <EmptyState variant={EmptyStateVariant.full}>\r\n          <EmptyStateIcon icon={CubesIcon} />\r\n          <Title headingLevel='h1' size='lg'>\r\n            Select Camel Node\r\n          </Title>\r\n        </EmptyState>\r\n      </PageSection>\r\n    )\r\n  }\r\n\r\n  /*\r\n   * Test if nav should contain general mbean tabs\r\n   */\r\n  const isDefaultApplicable = (node: MBeanNode) => {\r\n    return (\r\n      camelService.hasMBean(node) &&\r\n      !camelService.isContextsFolder(node) &&\r\n      !camelService.isRoutesFolder(node) &&\r\n      !camelService.isRouteXmlNode(node)\r\n    )\r\n  }\r\n\r\n  // The order of the items in the following list is the order in will the tabs will be visualized.\r\n  // For more info check: https://github.com/hawtio/hawtio-next/issues/237\r\n  const allNavItems: NavItem[] = [\r\n    { id: 'attributes', title: 'Attributes', component: <Attributes />, isApplicable: isDefaultApplicable },\r\n    { id: 'operations', title: 'Operations', component: <Operations />, isApplicable: isDefaultApplicable },\r\n    { id: 'contexts', title: 'Contexts', component: <Contexts />, isApplicable: camelService.isContextsFolder },\r\n    { id: 'routes', title: 'Routes', component: <CamelRoutes />, isApplicable: camelService.isRoutesFolder },\r\n    { id: 'endpoints', title: 'Endpoints', component: <Endpoints />, isApplicable: camelService.isEndpointsFolder },\r\n    {\r\n      id: 'routeDiagram',\r\n      title: 'Route Diagram',\r\n      component: (\r\n        <RouteDiagramContext.Provider value={routeDiagramContext}>\r\n          <RouteDiagram />\r\n        </RouteDiagramContext.Provider>\r\n      ),\r\n      isApplicable: camelService.canViewRouteDiagram,\r\n    },\r\n    {\r\n      id: 'source',\r\n      title: 'Source',\r\n      component: <Source />,\r\n      isApplicable: camelService.canViewSource,\r\n    },\r\n    { id: 'properties', title: 'Properties', component: <Properties />, isApplicable: camelService.hasProperties },\r\n    {\r\n      id: 'send',\r\n      title: 'Send',\r\n      component: <SendMessage />,\r\n      isApplicable: camelService.canSendMessage,\r\n    },\r\n    {\r\n      id: 'browse',\r\n      title: 'Browse',\r\n      component: <BrowseMessages />,\r\n      isApplicable: camelService.canBrowseMessages,\r\n    },\r\n    {\r\n      id: 'endpoint-stats',\r\n      title: 'Endpoints (in/out)',\r\n      component: <EndpointStats />,\r\n      isApplicable: camelService.canViewEndpointStats,\r\n    },\r\n    { id: 'exchanges', title: 'Exchanges', component: <Exchanges />, isApplicable: camelService.hasExchange },\r\n    {\r\n      id: 'rest-services',\r\n      title: 'Rest Services',\r\n      component: <RestServices />,\r\n      isApplicable: camelService.hasRestServices,\r\n    },\r\n    {\r\n      id: 'type-converters',\r\n      title: 'Type Converters',\r\n      component: <TypeConverters />,\r\n      isApplicable: camelService.hasTypeConverter,\r\n    },\r\n    { id: 'chart', title: 'Chart', component: <Chart />, isApplicable: isDefaultApplicable },\r\n    // Applicable for same criteria as trace\r\n    { id: 'profile', title: 'Profile', component: <Profile />, isApplicable: camelService.canTrace },\r\n    { id: 'trace', title: 'Trace', component: <Trace />, isApplicable: camelService.canTrace },\r\n    { id: 'debug', title: 'Debug', component: <Debug />, isApplicable: camelService.canGetBreakpoints },\r\n  ]\r\n\r\n  /* Filter the nav items to those applicable to the selected node */\r\n  const navItems = allNavItems.filter(nav => nav.isApplicable(selectedNode))\r\n\r\n  const camelNav = (\r\n    <Nav aria-label='Camel Nav' variant='tertiary'>\r\n      <NavList>\r\n        {navItems.map(nav => (\r\n          <NavItem key={nav.id} isActive={pathname === `${pluginPath}/${nav.id}`}>\r\n            <NavLink to={{ pathname: nav.id, search }}>{nav.title}</NavLink>\r\n          </NavItem>\r\n        ))}\r\n      </NavList>\r\n    </Nav>\r\n  )\r\n\r\n  const camelNavRoutes = navItems.map(nav => <Route key={nav.id} path={nav.id} element={nav.component} />)\r\n\r\n  return (\r\n    <PageGroup id='camel-content'>\r\n      <PageSection id='camel-content-header' variant={PageSectionVariants.light}>\r\n        {camelService.isContext(selectedNode) && <CamelContentContextToolbar />}\r\n        <Title headingLevel='h1'>{selectedNode.name}</Title>\r\n        {selectedNode.objectName && <Text component='small'>{selectedNode.objectName}</Text>}\r\n      </PageSection>\r\n      <Divider />\r\n      {navItems.length > 1 && (\r\n        <PageSection type={'tabs'} variant={PageSectionVariants.light} hasShadowBottom>\r\n          {camelNav}\r\n        </PageSection>\r\n      )}\r\n      <Divider />\r\n      <PageSection\r\n        id='camel-content-main'\r\n        variant={pathname.includes('chart') ? PageSectionVariants.default : PageSectionVariants.light}\r\n        padding={{ default: pathname.includes('chart') ? 'padding' : 'noPadding' }}\r\n        hasOverflowScroll\r\n        aria-label='camel-content-main'\r\n      >\r\n        {navItems.length > 0 && (\r\n          <Routes>\r\n            {camelNavRoutes}\r\n            <Route key='root' path='/' element={<Navigate to={navItems[0]?.id ?? ''} />} />\r\n          </Routes>\r\n        )}\r\n        {navItems.length === 0 && !selectedNode.objectName && <JmxContentMBeans />}\r\n      </PageSection>\r\n    </PageGroup>\r\n  )\r\n}\r\n\r\nconst CamelContentContextToolbar: React.FunctionComponent = () => {\r\n  const { selectedNode, setSelectedNode } = useContext(CamelContext)\r\n  const [contextState, setContextState] = useState<ContextState | null>(null)\r\n  const navigate = useNavigate()\r\n\r\n  useEffect(() => {\r\n    // Attributes only needed if a context has been selected\r\n    if (!selectedNode || !selectedNode.objectName || !camelService.isContext(selectedNode)) {\r\n      return\r\n    }\r\n\r\n    const { objectName } = selectedNode\r\n    const readAttributes = async () => {\r\n      const attr = await contextsService.getContext(selectedNode)\r\n      if (attr) setContextState(attr)\r\n\r\n      contextsService.register({ type: 'read', mbean: objectName }, (response: Response) => {\r\n        log.debug('Scheduler - Contexts:', response.value)\r\n\r\n        // Replace the context in the existing set with the new one\r\n        const attrs = response.value as AttributeValues\r\n        const newAttrs = contextsService.toContextState(selectedNode, attrs)\r\n        if (newAttrs) setContextState(newAttrs)\r\n      })\r\n    }\r\n    readAttributes()\r\n\r\n    return () => contextsService.unregisterAll()\r\n  }, [selectedNode])\r\n\r\n  /*\r\n   * Callback the is fired after the delete button has been\r\n   * clicked in the toolbar\r\n   */\r\n  const handleDeletedContext = () => {\r\n    setSelectedNode(null)\r\n\r\n    // Navigate away from this context as it no longer exists\r\n    navigate('jmx')\r\n\r\n    eventService.notify({\r\n      type: 'warning',\r\n      message: 'No Camel domain detected. Redirecting to back to JMX.',\r\n    })\r\n  }\r\n\r\n  return <ContextToolbar contexts={contextState ? [contextState] : []} deleteCallback={handleDeletedContext} />\r\n}\r\n","/**\r\n * Parse the given xml value using the native parser.\r\n * If not available then an error will be thrown.\r\n */\r\nexport function parseXML(xml: string): XMLDocument {\r\n  if (!window.DOMParser) throw new Error('Cannot parse xml due to no available native parser')\r\n\r\n  const parser = new DOMParser()\r\n  return parser.parseFromString(xml, 'text/xml')\r\n}\r\n\r\nexport function xmlText(element: Element): string | null {\r\n  const txt = element.firstChild?.textContent\r\n  return !txt ? null : txt\r\n}\r\n\r\nexport function childText(element: Element, childTag: string): string | null {\r\n  const childEl = element.querySelector(childTag)\r\n  if (!childEl) return null\r\n  return xmlText(childEl)\r\n}\r\n","import { Logger } from '@hawtiosrc/core/logging'\r\n\r\nexport const jmxDomain = 'org.apache.camel'\r\nexport const pluginPath = '/camel'\r\nexport const pluginName = 'hawtio-camel'\r\nexport const log = Logger.get(pluginName)\r\n\r\nexport const camelContexts = 'Camel Contexts'\r\n\r\nexport const domainNodeType = 'Camel Domain'\r\nexport const contextsType = 'contexts'\r\nexport const routesType = 'routes'\r\nexport const routeGroupsType = 'routeGroups'\r\nexport const endpointsType = 'endpoints'\r\nexport const componentsType = 'components'\r\nexport const dataformatsType = 'dataformats'\r\n\r\nexport const contextNodeType = 'context'\r\nexport const routeNodeType = 'routeNode'\r\nexport const routeXmlNodeType = 'routeXmlNode'\r\nexport const endpointNodeType = 'endpointNode'\r\nexport const componentNodeType = 'componentNode'\r\nexport const defaultRouteGroupsType = 'default'\r\nexport const mbeansType = 'MBeans'\r\n\r\n/*\r\n * The property name used to store the 'localName' property\r\n * of the xml nodes, eg. <to id=\"red5\" ... /> where localName is 'to'\r\n * This is useful to retain since the camelSchema is keyed\r\n * on these values.\r\n */\r\nexport const xmlNodeLocalName = 'xmlNodeLocalName'\r\n","import { eventService, NotificationType } from '@hawtiosrc/core'\r\nimport { jolokiaService, MBeanNode, workspace } from '@hawtiosrc/plugins/shared'\r\nimport { isBlank } from '@hawtiosrc/util/strings'\r\nimport { parseXML } from '@hawtiosrc/util/xml'\r\nimport * as camelService from '../camel-service'\r\nimport { getDefaultRuntimeEndpointRegistry } from '../camel-service'\r\nimport { contextNodeType, endpointsType, log } from '../globals'\r\n\r\nexport type Endpoint = {\r\n  uri: string\r\n  state: string\r\n  mbean: string\r\n}\r\n\r\nexport type EndpointStatistics = {\r\n  hits: number\r\n  routeId: string\r\n  static: boolean\r\n  index: number\r\n  dynamic: boolean\r\n  url: string\r\n  direction: string\r\n  [key: string]: string | boolean | number\r\n}\r\n\r\nexport type MessageData = {\r\n  messageId: string\r\n  body: string\r\n  headers: { key: string; type: string; value: string }[]\r\n}\r\n\r\nexport const ENDPOINT_OPERATIONS = {\r\n  createEndpoint: 'createEndpoint(java.lang.String)',\r\n  componentNames: 'componentNames()',\r\n  canSendToEndpoint: 'canSendToEndpoint(java.lang.String)',\r\n  sendBodyAndHeaders: 'sendBodyAndHeaders(java.lang.String, java.lang.Object, java.util.Map)',\r\n  sendStringBody: 'sendStringBody(java.lang.String, java.lang.String)',\r\n  browseAllMessagesAsXml: 'browseAllMessagesAsXml(java.lang.Boolean)',\r\n  browseRangeMessagesAsXml: 'browseRangeMessagesAsXml(java.lang.Integer,java.lang.Integer, java.lang.Boolean)',\r\n  endpointStatistics: 'endpointStatistics()',\r\n} as const\r\n\r\nexport async function getEndpoints(node: MBeanNode): Promise<Endpoint[]> {\r\n  const ctxNode = camelService.findContext(node)\r\n  if (!ctxNode || ctxNode.childCount() === 0) return []\r\n\r\n  const endpointsNode = ctxNode.get(endpointsType, true)\r\n  if (!endpointsNode) return []\r\n\r\n  const endpoints: Endpoint[] = []\r\n  for (const ep of endpointsNode.getChildren()) {\r\n    if (!ep.objectName) continue\r\n    const attributes = await jolokiaService.readAttributes(ep.objectName)\r\n    endpoints.push({\r\n      uri: attributes.EndpointUri as string,\r\n      state: attributes.State as string,\r\n      mbean: ep.objectName,\r\n    })\r\n  }\r\n\r\n  return endpoints\r\n}\r\n\r\nexport function canCreateEndpoints(node: MBeanNode): boolean {\r\n  const contextNode = camelService.findContext(node)\r\n  if (!contextNode) {\r\n    return false\r\n  }\r\n  return contextNode.hasInvokeRights(ENDPOINT_OPERATIONS.createEndpoint)\r\n}\r\n\r\nexport async function componentNames(node: MBeanNode): Promise<string[]> {\r\n  const ctxNode = camelService.findContext(node)\r\n  if (!ctxNode || ctxNode.childCount() === 0 || !ctxNode.objectName) return []\r\n\r\n  const names = await jolokiaService.execute(ctxNode.objectName, ENDPOINT_OPERATIONS.componentNames)\r\n  return names as string[]\r\n}\r\n\r\nfunction notifyError(msg: string) {\r\n  eventService.notify({\r\n    type: 'danger',\r\n    message: msg,\r\n  })\r\n}\r\n\r\nexport async function createEndpoint(node: MBeanNode, name: string) {\r\n  const ctxNode = camelService.findContext(node)\r\n  if (!ctxNode) {\r\n    notifyError('Could not find the CamelContext!')\r\n    return\r\n  }\r\n\r\n  if (!ctxNode.objectName) {\r\n    notifyError('Could not find the CamelContext MBean!')\r\n    return\r\n  }\r\n\r\n  jolokiaService\r\n    .execute(ctxNode.objectName, ENDPOINT_OPERATIONS.createEndpoint, [name])\r\n    .then((value: unknown) => {\r\n      if (value === true) {\r\n        workspace.refreshTree()\r\n        eventService.notify({\r\n          type: 'success',\r\n          message: 'Creating endpoint',\r\n          duration: 3000,\r\n        })\r\n      } else {\r\n        eventService.notify({\r\n          type: 'danger',\r\n          message: 'Invalid URI',\r\n        })\r\n      }\r\n    })\r\n    .catch((error: string) => {\r\n      error = error.replace('org.apache.camel.ResolveEndpointFailedException : ', '')\r\n      eventService.notify({\r\n        type: 'danger',\r\n        message: error,\r\n      })\r\n    })\r\n}\r\n\r\nexport function createEndpointFromData(\r\n  node: MBeanNode,\r\n  componentName: string,\r\n  endPointPath: string,\r\n  parameters: Record<string, string>,\r\n) {\r\n  if (!componentName) log.error('createEndpointFromData: component name must be defined')\r\n\r\n  if (!endPointPath) log.error('createEndpointFromData: endpoint path must be defined')\r\n\r\n  log.debug('Have endpoint data ' + JSON.stringify(parameters))\r\n\r\n  const uri =\r\n    componentName +\r\n    '://' +\r\n    endPointPath +\r\n    (parameters\r\n      ? '?' +\r\n        Object.entries(parameters)\r\n          .map(entry => entry.join('='))\r\n          .join('&')\r\n      : '')\r\n\r\n  log.debug('Creating endpoint for uri: ' + uri)\r\n  createEndpoint(node, uri)\r\n}\r\n\r\nexport async function loadEndpointSchema(\r\n  node: MBeanNode,\r\n  componentName: string,\r\n): Promise<camelService.CamelModelSchema | null> {\r\n  const ctxNode = camelService.findContext(node)\r\n  if (!ctxNode) {\r\n    eventService.notify({\r\n      type: 'danger',\r\n      message: 'Could not find the CamelContext!',\r\n    })\r\n    return null\r\n  }\r\n  if (isBlank(componentName)) return null\r\n\r\n  const camelModel = await camelService.getCamelModel(ctxNode)\r\n  log.info('Endpoints - Use Camel model version:', camelModel.apacheCamelModelVersion)\r\n  return camelModel.components[componentName] ?? null\r\n}\r\n\r\nexport async function doSendMessage(\r\n  mbean: MBeanNode,\r\n  body: string,\r\n  headers: { name: string; value: string }[],\r\n  notify: (type: NotificationType, message: string) => void,\r\n) {\r\n  const messageHeaders: Record<string, string> = {}\r\n  headers.forEach(header => {\r\n    const key = header.name\r\n    if (key && key !== '') {\r\n      messageHeaders[key] = header.value\r\n    }\r\n  })\r\n\r\n  const context = mbean.parent?.getMetadata(contextNodeType)\r\n  const uri = mbean.name\r\n  if (context && uri) {\r\n    let ok = true\r\n\r\n    const reply = await jolokiaService.execute(context, ENDPOINT_OPERATIONS.canSendToEndpoint, [uri])\r\n    if (!reply) {\r\n      notify('warning', 'Camel does not support sending to this endpoint.')\r\n      ok = false\r\n    }\r\n\r\n    if (ok) {\r\n      if (Object.keys(messageHeaders).length > 0) {\r\n        jolokiaService\r\n          .execute(context, ENDPOINT_OPERATIONS.sendBodyAndHeaders, [uri, body, messageHeaders])\r\n          .then(ok => {\r\n            notify('success', `Message and headers were sent to the ${uri} endpoint`)\r\n          })\r\n      } else {\r\n        jolokiaService.execute(context, ENDPOINT_OPERATIONS.sendStringBody, [uri, body]).then(ok => {\r\n          notify('success', `Message was sent to the ${uri} endpoint`)\r\n        })\r\n      }\r\n    }\r\n  } else {\r\n    if (!mbean) {\r\n      notify('danger', 'Could not find CamelContext MBean!')\r\n    } else {\r\n      notify('danger', 'Failed to determine endpoint name!')\r\n    }\r\n    log.debug('Parsed context and endpoint:', context, mbean)\r\n  }\r\n}\r\n\r\nexport async function forwardMessagesToEndpoint(\r\n  mBean: MBeanNode,\r\n  uri: string,\r\n  messages: MessageData[],\r\n  notify: (type: NotificationType, message: string) => void,\r\n) {\r\n  const context = mBean.parent?.getMetadata(contextNodeType)\r\n\r\n  if (context && uri && messages && messages.length) {\r\n    try {\r\n      await jolokiaService.execute(context, ENDPOINT_OPERATIONS.createEndpoint, [uri])\r\n    } catch (err) {\r\n      notify('danger', `Error: ${err}`)\r\n      return\r\n    }\r\n\r\n    let forwarded = 0\r\n    for (const message of messages) {\r\n      const body = message.body\r\n      const messageHeaders: Record<string, string> = {}\r\n      if (message.headers.length > 0) {\r\n        message.headers.forEach(header => {\r\n          if (header.key && header.key !== '') {\r\n            messageHeaders[header.key] = header.value\r\n          }\r\n        })\r\n      }\r\n      try {\r\n        await jolokiaService.execute(context, ENDPOINT_OPERATIONS.sendBodyAndHeaders, [uri, body, messageHeaders])\r\n        forwarded++\r\n      } catch (err) {\r\n        notify('danger', `Error: ${err}`)\r\n        return\r\n      }\r\n    }\r\n    const m = forwarded > 1 ? 'messages' : 'message'\r\n    notify('success', `Forwarded ${forwarded} ${m} to endpoint ${uri}`)\r\n  }\r\n}\r\nexport async function getMessagesFromTheEndpoint(mbean: MBeanNode, from: number, to: number): Promise<MessageData[]> {\r\n  let messageData: MessageData[] = []\r\n  const context = mbean.parent?.getMetadata(contextNodeType)\r\n  const browseAll = to === -1\r\n  if (context) {\r\n    let reply\r\n    if (browseAll) {\r\n      reply = await jolokiaService.execute(mbean.objectName ?? '', ENDPOINT_OPERATIONS.browseAllMessagesAsXml, [true])\r\n    } else {\r\n      reply = await jolokiaService.execute(mbean.objectName ?? '', ENDPOINT_OPERATIONS.browseRangeMessagesAsXml, [\r\n        from,\r\n        to,\r\n        true,\r\n      ])\r\n    }\r\n    const messagesXml = parseXML(reply as string)\r\n    messageData = parseMessagesFromXml(messagesXml)\r\n  }\r\n  return messageData\r\n}\r\n\r\nfunction parseMessagesFromXml(pDoc: XMLDocument): MessageData[] {\r\n  const messagesData: MessageData[] = []\r\n  const messages = pDoc.getElementsByTagName('message')\r\n  for (const message of messages) {\r\n    const headers: { key: string; type: string; value: string }[] = []\r\n    for (const header of message.getElementsByTagName('header')) {\r\n      headers.push({\r\n        key: header.getAttribute('key') ?? '',\r\n        value: header.textContent ?? '',\r\n        type: header.getAttribute('type') ?? '',\r\n      })\r\n    }\r\n    messagesData.push({\r\n      messageId: message.getAttribute('exchangeId') ?? '',\r\n      body: message.getElementsByTagName('body')[0]?.textContent ?? '',\r\n      headers: headers,\r\n    })\r\n  }\r\n\r\n  return messagesData\r\n}\r\n\r\nexport async function getEndpointStatistics(node: MBeanNode) {\r\n  let stats: EndpointStatistics[] = []\r\n  const registry = getDefaultRuntimeEndpointRegistry(node)\r\n  if (registry && registry.objectName) {\r\n    const res = await jolokiaService.execute(registry.objectName, ENDPOINT_OPERATIONS.endpointStatistics)\r\n    stats = Object.values(res as { [key: string]: EndpointStatistics })\r\n  } else {\r\n    log.error('Error with the retrieving the registry')\r\n  }\r\n  return stats\r\n}\r\n","type CamelImageIconProps = {\r\n  name: string\r\n  svg: string\r\n  size: number\r\n} & typeof defaultImageIconProps\r\n\r\nconst defaultImageIconProps = {\r\n  size: 16,\r\n}\r\n\r\nconst CamelImageIcon = (props: CamelImageIconProps) => {\r\n  return <img src={props.svg} width={props.size + 'px'} height={props.size + 'px'} alt={props.name} />\r\n}\r\n\r\nCamelImageIcon.defaultProps = defaultImageIconProps\r\n\r\nexport { CamelImageIcon }\r\n","// === AUTO-GENERATED WITH generate-camel-svg-index.js ===\r\n\r\nimport aggregate from './aggregate24.svg'\r\nimport bean from './bean24.svg'\r\nimport breakpoint from './breakpoint.svg'\r\nimport camel from './camel.svg'\r\nimport camelContext from './camel-context-icon.svg'\r\nimport camelRoute from './camel-route.svg'\r\nimport camelRouteFolder from './camel-route-folder.svg'\r\nimport camelTracing from './camel-tracing.svg'\r\nimport channel from './channel24.svg'\r\nimport channeladapter from './channeladapter24.svg'\r\nimport channelpurger from './channelpurger24.svg'\r\nimport choice from './choice24.svg'\r\nimport commandmessage from './commandmessage24.svg'\r\nimport competingconsumers from './competingconsumers24.svg'\r\nimport componentFolder from './component-folder.svg'\r\nimport contentbasedrouter from './contentbasedrouter24.svg'\r\nimport contentfilter from './contentfilter24.svg'\r\nimport controlbus from './controlbus24.svg'\r\nimport convertbodyto from './convertbodyto24.svg'\r\nimport correlationidentifier from './correlationidentifier24.svg'\r\nimport customdataformat from './customdataformat24.svg'\r\nimport datatypechannel from './datatypechannel24.svg'\r\nimport deadletterchannel from './deadletterchannel24.svg'\r\nimport detour from './detour24.svg'\r\nimport distributionaggregate from './distributionaggregate24.svg'\r\nimport documentmessage from './documentmessage24.svg'\r\nimport durablesubscription from './durablesubscription24.svg'\r\nimport dynamicrouter from './dynamicrouter24.svg'\r\nimport editCamelRoute from './edit-camel-route.svg'\r\nimport encapsulatedsynchronous from './encapsulatedsynchronous24.svg'\r\nimport endpoint from './endpoint24.svg'\r\nimport endpointFile from './endpointFile24.svg'\r\nimport endpointFolder from './endpointFolder24.svg'\r\nimport endpointQueue from './endpointQueue24.svg'\r\nimport endpointRepository from './endpointRepository24.svg'\r\nimport endpointTimer from './endpointTimer24.svg'\r\nimport endpointdrools from './endpointdrools24.svg'\r\nimport endpoints from './endpoints.svg'\r\nimport endpointsActivemq from './endpoints/activemq24.svg'\r\nimport endpointsAtom from './endpoints/atom24.svg'\r\nimport endpointsBean from './endpoints/bean24.svg'\r\nimport endpointsCxf from './endpoints/cxf24.svg'\r\nimport endpointsCxfrs from './endpoints/cxfrs24.svg'\r\nimport endpointsEjb from './endpoints/ejb24.svg'\r\nimport endpointsFacebook from './endpoints/facebook24.svg'\r\nimport endpointsFile from './endpoints/file24.svg'\r\nimport endpointsFolder from './endpoints-folder.svg'\r\nimport endpointsFtp from './endpoints/ftp24.svg'\r\nimport endpointsFtps from './endpoints/ftps24.svg'\r\nimport endpointsImap from './endpoints/imap24.svg'\r\nimport endpointsImaps from './endpoints/imaps24.svg'\r\nimport endpointsJdbc from './endpoints/jdbc24.svg'\r\nimport endpointsJms from './endpoints/jms24.svg'\r\nimport endpointsLanguage from './endpoints/language24.svg'\r\nimport endpointsLinkedin from './endpoints/linkedin24.svg'\r\nimport endpointsLog from './endpoints/log24.svg'\r\nimport endpointsMqtt from './endpoints/mqtt24.svg'\r\nimport endpointsNetty from './endpoints/netty24.svg'\r\nimport endpointsNetty4 from './endpoints/netty424.svg'\r\nimport endpointsNetty4Http from './endpoints/netty4-http24.svg'\r\nimport endpointsNettyHttp from './endpoints/netty-http24.svg'\r\nimport endpointsNode from './endpoints-node.svg'\r\nimport endpointsPop3 from './endpoints/pop324.svg'\r\nimport endpointsPop3s from './endpoints/pop3s24.svg'\r\nimport endpointsQuartz from './endpoints/quartz24.svg'\r\nimport endpointsQuartz2 from './endpoints/quartz224.svg'\r\nimport endpointsRss from './endpoints/rss24.svg'\r\nimport endpointsSAP from './endpoints/SAP24.svg'\r\nimport endpointsSAPNetweaver from './endpoints/SAPNetweaver24.svg'\r\nimport endpointsSalesForce from './endpoints/salesForce24.svg'\r\nimport endpointsServlet from './endpoints/servlet24.svg'\r\nimport endpointsSftp from './endpoints/sftp24.svg'\r\nimport endpointsSmtp from './endpoints/smtp24.svg'\r\nimport endpointsSmtps from './endpoints/smtps24.svg'\r\nimport endpointsSnmp from './endpoints/snmp24.svg'\r\nimport endpointsSql from './endpoints/sql24.svg'\r\nimport endpointsTimer from './endpoints/timer24.svg'\r\nimport endpointsTwitter from './endpoints/twitter24.svg'\r\nimport endpointsWeather from './endpoints/weather24.svg'\r\nimport endpointsXslt from './endpoints/xslt24.svg'\r\nimport enrich from './enrich24.svg'\r\nimport envelopeWrapper from './envelopeWrapper24.svg'\r\nimport eventDrivenConsumer from './eventDrivenConsumer24.svg'\r\nimport eventMessage from './eventMessage24.svg'\r\nimport fileTransfer from './fileTransfer24.svg'\r\nimport filter from './filter24.svg'\r\nimport flow from './flow24.svg'\r\nimport generic from './generic24.svg'\r\nimport guaranteedMessaging from './guaranteedMessaging24.svg'\r\nimport idempotentConsumer from './idempotentConsumer24.svg'\r\nimport invalidMessageChannel from './invalidMessageChannel24.svg'\r\nimport loadBalance from './loadBalance24.svg'\r\nimport log from './log24.svg'\r\nimport marshal from './marshal24.svg'\r\nimport message from './message24.svg'\r\nimport messageBroker from './messageBroker24.svg'\r\nimport messageBus from './messageBus24.svg'\r\nimport messageDispatcher from './messageDispatcher24.svg'\r\nimport messageExpiration from './messageExpiration24.svg'\r\nimport messageSelector from './messageSelector24.svg'\r\nimport messageSequence from './messageSequence24.svg'\r\nimport messageStore from './messageStore24.svg'\r\nimport messaging from './messaging24.svg'\r\nimport messagingAdapter from './messagingAdapter24.svg'\r\nimport messagingBridge from './messagingBridge24.svg'\r\nimport messagingGateway from './messagingGateway24.svg'\r\nimport multicast from './multicast24.svg'\r\nimport node from './node24.svg'\r\nimport normalizer from './normalizer24.svg'\r\nimport pipeline from './pipeline24.svg'\r\nimport pointToPoint from './pointToPoint24.svg'\r\nimport pollEnrich from './pollEnrich24.svg'\r\nimport pollingConsumer from './pollingConsumer24.svg'\r\nimport process from './process24.svg'\r\nimport processManager from './processManager24.svg'\r\nimport processor from './processor24.svg'\r\nimport recipientList from './recipientList24.svg'\r\nimport requestReply from './requestReply24.svg'\r\nimport resequence from './resequence24.svg'\r\nimport returnAddress from './returnAddress24.svg'\r\nimport route from './route24.svg'\r\nimport routingSlip from './routingSlip24.svg'\r\nimport setBody from './setBody24.svg'\r\nimport sharedDatabase from './sharedDatabase24.svg'\r\nimport smartProxy from './smartProxy24.svg'\r\nimport split from './split24.svg'\r\nimport storeInLibrary from './storeInLibrary24.svg'\r\nimport testMessage from './testMessage24.svg'\r\nimport transactionalClient from './transactionalClient24.svg'\r\nimport transform from './transform24.svg'\r\nimport unmarshal from './unmarshal24.svg'\r\nimport wireTap from './wireTap24.svg'\r\n\r\nenum IconNames {\r\n  CamelContextIcon = 'CamelContextIcon',\r\n  CamelRouteFolderIcon = 'CamelRouteFolderIcon',\r\n  CamelRouteIcon = 'CamelRouteIcon',\r\n  CamelIcon = 'CamelIcon',\r\n  AggregateIcon = 'AggregateIcon',\r\n  BeanIcon = 'BeanIcon',\r\n  BreakpointIcon = 'BreakpointIcon',\r\n  CamelTracingIcon = 'CamelTracingIcon',\r\n  ChannelIcon = 'ChannelIcon',\r\n  ChanneladapterIcon = 'ChanneladapterIcon',\r\n  ChannelpurgerIcon = 'ChannelpurgerIcon',\r\n  ChoiceIcon = 'ChoiceIcon',\r\n  CommandmessageIcon = 'CommandmessageIcon',\r\n  CompetingconsumersIcon = 'CompetingconsumersIcon',\r\n  ComponentFolderIcon = 'ComponentFolderIcon',\r\n  ContentbasedrouterIcon = 'ContentbasedrouterIcon',\r\n  ContentfilterIcon = 'ContentfilterIcon',\r\n  ControlbusIcon = 'ControlbusIcon',\r\n  ConvertbodytoIcon = 'ConvertbodytoIcon',\r\n  CorrelationidentifierIcon = 'CorrelationidentifierIcon',\r\n  CustomdataformatIcon = 'CustomdataformatIcon',\r\n  DatatypechannelIcon = 'DatatypechannelIcon',\r\n  DeadletterchannelIcon = 'DeadletterchannelIcon',\r\n  DetourIcon = 'DetourIcon',\r\n  DistributionaggregateIcon = 'DistributionaggregateIcon',\r\n  DocumentmessageIcon = 'DocumentmessageIcon',\r\n  DurablesubscriptionIcon = 'DurablesubscriptionIcon',\r\n  DynamicrouterIcon = 'DynamicrouterIcon',\r\n  EditCamelRouteIcon = 'EditCamelRouteIcon',\r\n  EncapsulatedsynchronousIcon = 'EncapsulatedsynchronousIcon',\r\n  EndpointIcon = 'EndpointIcon',\r\n  EndpointFileIcon = 'EndpointFileIcon',\r\n  EndpointFolderIcon = 'EndpointFolderIcon',\r\n  EndpointQueueIcon = 'EndpointQueueIcon',\r\n  EndpointRepositoryIcon = 'EndpointRepositoryIcon',\r\n  EndpointTimerIcon = 'EndpointTimerIcon',\r\n  EndpointdroolsIcon = 'EndpointdroolsIcon',\r\n  EndpointsFolderIcon = 'EndpointsFolderIcon',\r\n  EndpointsNodeIcon = 'EndpointsNodeIcon',\r\n  EndpointsIcon = 'EndpointsIcon',\r\n  EnrichIcon = 'EnrichIcon',\r\n  EnvelopeWrapperIcon = 'EnvelopeWrapperIcon',\r\n  EventDrivenConsumerIcon = 'EventDrivenConsumerIcon',\r\n  EventMessageIcon = 'EventMessageIcon',\r\n  FileTransferIcon = 'FileTransferIcon',\r\n  FilterIcon = 'FilterIcon',\r\n  FlowIcon = 'FlowIcon',\r\n  GenericIcon = 'GenericIcon',\r\n  GuaranteedMessagingIcon = 'GuaranteedMessagingIcon',\r\n  IdempotentConsumerIcon = 'IdempotentConsumerIcon',\r\n  InvalidMessageChannelIcon = 'InvalidMessageChannelIcon',\r\n  LoadBalanceIcon = 'LoadBalanceIcon',\r\n  LogIcon = 'LogIcon',\r\n  MarshalIcon = 'MarshalIcon',\r\n  MessageIcon = 'MessageIcon',\r\n  MessageBrokerIcon = 'MessageBrokerIcon',\r\n  MessageBusIcon = 'MessageBusIcon',\r\n  MessageDispatcherIcon = 'MessageDispatcherIcon',\r\n  MessageExpirationIcon = 'MessageExpirationIcon',\r\n  MessageSelectorIcon = 'MessageSelectorIcon',\r\n  MessageSequenceIcon = 'MessageSequenceIcon',\r\n  MessageStoreIcon = 'MessageStoreIcon',\r\n  MessagingIcon = 'MessagingIcon',\r\n  MessagingAdapterIcon = 'MessagingAdapterIcon',\r\n  MessagingBridgeIcon = 'MessagingBridgeIcon',\r\n  MessagingGatewayIcon = 'MessagingGatewayIcon',\r\n  MulticastIcon = 'MulticastIcon',\r\n  NodeIcon = 'NodeIcon',\r\n  NormalizerIcon = 'NormalizerIcon',\r\n  PipelineIcon = 'PipelineIcon',\r\n  PointToPointIcon = 'PointToPointIcon',\r\n  PollEnrichIcon = 'PollEnrichIcon',\r\n  PollingConsumerIcon = 'PollingConsumerIcon',\r\n  ProcessIcon = 'ProcessIcon',\r\n  ProcessManagerIcon = 'ProcessManagerIcon',\r\n  ProcessorIcon = 'ProcessorIcon',\r\n  RecipientListIcon = 'RecipientListIcon',\r\n  RequestReplyIcon = 'RequestReplyIcon',\r\n  ResequenceIcon = 'ResequenceIcon',\r\n  ReturnAddressIcon = 'ReturnAddressIcon',\r\n  RouteIcon = 'RouteIcon',\r\n  RoutingSlipIcon = 'RoutingSlipIcon',\r\n  SetBodyIcon = 'SetBodyIcon',\r\n  SharedDatabaseIcon = 'SharedDatabaseIcon',\r\n  SmartProxyIcon = 'SmartProxyIcon',\r\n  SplitIcon = 'SplitIcon',\r\n  StoreInLibraryIcon = 'StoreInLibraryIcon',\r\n  TestMessageIcon = 'TestMessageIcon',\r\n  TransactionalClientIcon = 'TransactionalClientIcon',\r\n  TransformIcon = 'TransformIcon',\r\n  UnmarshalIcon = 'UnmarshalIcon',\r\n  WireTapIcon = 'WireTapIcon',\r\n}\r\n\r\nexport {\r\n  IconNames,\r\n  aggregate,\r\n  bean,\r\n  breakpoint,\r\n  camel,\r\n  camelContext,\r\n  camelRoute,\r\n  camelRouteFolder,\r\n  camelTracing,\r\n  channel,\r\n  channeladapter,\r\n  channelpurger,\r\n  choice,\r\n  commandmessage,\r\n  competingconsumers,\r\n  componentFolder,\r\n  contentbasedrouter,\r\n  contentfilter,\r\n  controlbus,\r\n  convertbodyto,\r\n  correlationidentifier,\r\n  customdataformat,\r\n  datatypechannel,\r\n  deadletterchannel,\r\n  detour,\r\n  distributionaggregate,\r\n  documentmessage,\r\n  durablesubscription,\r\n  dynamicrouter,\r\n  editCamelRoute,\r\n  encapsulatedsynchronous,\r\n  endpoint,\r\n  endpointFile,\r\n  endpointFolder,\r\n  endpointQueue,\r\n  endpointRepository,\r\n  endpointTimer,\r\n  endpointdrools,\r\n  endpoints,\r\n  endpointsActivemq,\r\n  endpointsAtom,\r\n  endpointsBean,\r\n  endpointsCxf,\r\n  endpointsCxfrs,\r\n  endpointsEjb,\r\n  endpointsFacebook,\r\n  endpointsFile,\r\n  endpointsFolder,\r\n  endpointsFtp,\r\n  endpointsFtps,\r\n  endpointsImap,\r\n  endpointsImaps,\r\n  endpointsJdbc,\r\n  endpointsJms,\r\n  endpointsLanguage,\r\n  endpointsLinkedin,\r\n  endpointsLog,\r\n  endpointsMqtt,\r\n  endpointsNetty,\r\n  endpointsNetty4,\r\n  endpointsNetty4Http,\r\n  endpointsNettyHttp,\r\n  endpointsNode,\r\n  endpointsPop3,\r\n  endpointsPop3s,\r\n  endpointsQuartz,\r\n  endpointsQuartz2,\r\n  endpointsRss,\r\n  endpointsSAP,\r\n  endpointsSAPNetweaver,\r\n  endpointsSalesForce,\r\n  endpointsServlet,\r\n  endpointsSftp,\r\n  endpointsSmtp,\r\n  endpointsSmtps,\r\n  endpointsSnmp,\r\n  endpointsSql,\r\n  endpointsTimer,\r\n  endpointsTwitter,\r\n  endpointsWeather,\r\n  endpointsXslt,\r\n  enrich,\r\n  envelopeWrapper,\r\n  eventDrivenConsumer,\r\n  eventMessage,\r\n  fileTransfer,\r\n  filter,\r\n  flow,\r\n  generic,\r\n  guaranteedMessaging,\r\n  idempotentConsumer,\r\n  invalidMessageChannel,\r\n  loadBalance,\r\n  log,\r\n  marshal,\r\n  message,\r\n  messageBroker,\r\n  messageBus,\r\n  messageDispatcher,\r\n  messageExpiration,\r\n  messageSelector,\r\n  messageSequence,\r\n  messageStore,\r\n  messaging,\r\n  messagingAdapter,\r\n  messagingBridge,\r\n  messagingGateway,\r\n  multicast,\r\n  node,\r\n  normalizer,\r\n  pipeline,\r\n  pointToPoint,\r\n  pollEnrich,\r\n  pollingConsumer,\r\n  process,\r\n  processManager,\r\n  processor,\r\n  recipientList,\r\n  requestReply,\r\n  resequence,\r\n  returnAddress,\r\n  route,\r\n  routingSlip,\r\n  setBody,\r\n  sharedDatabase,\r\n  smartProxy,\r\n  split,\r\n  storeInLibrary,\r\n  testMessage,\r\n  transactionalClient,\r\n  transform,\r\n  unmarshal,\r\n  wireTap,\r\n}\r\n","import { log } from '../globals'\r\nimport { CamelImageIcon } from './CamelImageIcon'\r\nimport * as svg from './svg'\r\n\r\nconst elementMap: Map<string, JSX.Element> = new Map<string, JSX.Element>()\r\n\r\nfunction buildIcon(name: string, svg: string, size: number) {\r\n  return <CamelImageIcon name={name} svg={svg} size={size} />\r\n}\r\n\r\n// Populate the element map with the react rendered svg components\r\nfor (const [key, value] of Object.entries(svg)) {\r\n  if (key === 'IconNames') {\r\n    continue // not applicable\r\n  }\r\n  const iconName = (key[0]?.toUpperCase() ?? '') + key.substring(1) + 'Icon'\r\n  elementMap.set(iconName, buildIcon(iconName, value, 16))\r\n}\r\n\r\nexport const IconNames = svg.IconNames\r\n\r\nexport interface IconProperties {\r\n  size: number\r\n  inline: boolean\r\n}\r\n\r\nexport function getIcon(name: string, size?: number): JSX.Element {\r\n  let element: JSX.Element | undefined\r\n  if (!size)\r\n    // No size defined so return the default cached icon\r\n    element = elementMap.get(name)\r\n  else {\r\n    // Custom sized icons are not indexed by default but cached after first build\r\n    log.debug(\"Fetching custom sized icon '\" + name + \"' with size '\" + size + \"'\")\r\n\r\n    // Store the icon against the name & size\r\n    const customIconName = name + '_' + size\r\n    element = elementMap.get(customIconName)\r\n\r\n    if (!element) {\r\n      // No icon in cache so build the icon then cache it\r\n      const iconKey = name.replace('Icon', '').toLowerCase()\r\n      Object.entries(svg)\r\n        .filter(([key, _]) => iconKey === key)\r\n        .forEach(([_, value]) => {\r\n          log.debug(\"Building custom sized icon '\" + name + \"' with size '\" + size + \"'\")\r\n          element = buildIcon(customIconName, value, size)\r\n          elementMap.set(customIconName, element)\r\n        })\r\n    }\r\n  }\r\n\r\n  return element ? element : elementMap.get(IconNames.GenericIcon) ?? svg.generic\r\n}\r\n","import { cloneObject, isObject, isString } from '@hawtiosrc/util/objects'\r\nimport { MBeanNode } from '../shared'\r\nimport { getCamelModel } from './camel-service'\r\n\r\nclass SchemaService {\r\n  /**\r\n   * Looks up the given type name in the schemas definitions\r\n   * @method lookupDefinition\r\n   * @param {String} name\r\n   * @param {Record<string, unknown>} definitions\r\n   */\r\n  lookupDefinition(name: string, definitions: Record<string, unknown>): Record<string, unknown> | null {\r\n    if (!definitions) return null\r\n\r\n    if (!isObject(definitions[name])) return null\r\n\r\n    const answer = definitions[name] as Record<string, unknown>\r\n    if (isObject(answer['fullSchema'])) {\r\n      return answer['fullSchema'] as Record<string, unknown>\r\n    }\r\n\r\n    // we may extend another, if so we need to copy in the base properties\r\n    const extendsTypes: string[] = []\r\n    if (answer?.extends) {\r\n      extendsTypes.push('extends')\r\n    }\r\n    if (answer?.type) {\r\n      extendsTypes.push('type')\r\n    }\r\n    if (extendsTypes.length === 0) return answer\r\n\r\n    const fullSchema = cloneObject(answer)\r\n    fullSchema.properties = fullSchema.properties || {}\r\n    for (const extendType of extendsTypes) {\r\n      const extendDef = this.lookupDefinition(fullSchema[extendType] as string, definitions)\r\n      const properties = extendDef?.properties\r\n      if (isObject(properties)) {\r\n        for (const [key, property] of Object.entries(properties)) {\r\n          const fp: Record<string, unknown> = fullSchema.properties as Record<string, unknown>\r\n          fp[key] = property\r\n        }\r\n      }\r\n    }\r\n    answer['fullSchema'] = fullSchema\r\n    return fullSchema\r\n  }\r\n\r\n  async getSchema(\r\n    node: MBeanNode,\r\n    nodeIdOrDefinition: Record<string, unknown> | string,\r\n  ): Promise<Record<string, unknown> | null> {\r\n    if (isString(nodeIdOrDefinition)) {\r\n      const { definitions } = await getCamelModel(node)\r\n      return this.lookupDefinition(nodeIdOrDefinition, definitions)\r\n    } else {\r\n      return nodeIdOrDefinition\r\n    }\r\n  }\r\n}\r\n\r\nexport const schemaService = new SchemaService()\r\n","import { jolokiaService } from '@hawtiosrc/plugins/shared/jolokia-service'\r\nimport { MBeanNode } from '@hawtiosrc/plugins/shared/tree'\r\nimport { parseXML } from '@hawtiosrc/util/xml'\r\nimport { ReactNode } from 'react'\r\nimport * as camelService from './camel-service'\r\nimport { contextNodeType, log, routeXmlNodeType, xmlNodeLocalName } from './globals'\r\nimport * as icons from './icons'\r\nimport { schemaService } from './schema-service'\r\n\r\nexport type Statistics = {\r\n  id: string\r\n  state: string\r\n  exchangesInflight?: string\r\n  exchangesCompleted?: string\r\n  failuresHandled?: string\r\n  redeliveries?: string\r\n  externalRedeliveries?: string\r\n  minProcessingTime?: string\r\n  maxProcessingTime?: string\r\n  deltaProcessingTime?: string\r\n  meanProcessingTime?: string\r\n  startTimestamp?: string\r\n  resetTimestamp?: string\r\n  lastExchangeFailureExchangeId?: string\r\n  lastExchangeFailureTimestamp?: string\r\n  lastExchangeCreatedTimestamp?: string\r\n  firstExchangeFailureExchangeId?: string\r\n  firstExchangeFailureTimestamp?: string\r\n  lastProcessingTime?: string\r\n  exchangesFailed?: string\r\n  totalProcessingTime?: string\r\n  firstExchangeCompletedTimestamp?: string\r\n  firstExchangeCompletedExchangeId?: string\r\n  lastExchangeCompletedTimestamp?: string\r\n  lastExchangeCompletedExchangeId?: string\r\n  selfProcessingTime?: string\r\n  accumulatedProcessingTime?: string\r\n}\r\n\r\nexport type ProcessorStats = Statistics & {\r\n  index?: string\r\n  sourceLineNumber?: string\r\n}\r\n\r\nexport type RouteStats = Statistics & {\r\n  sourceLocation: string\r\n  processorStats: ProcessorStats[]\r\n}\r\n\r\nexport const ROUTE_OPERATIONS = {\r\n  dumpRoutesAsXml: 'dumpRoutesAsXml()',\r\n} as const\r\n\r\n// TODO: This service should be named more properly like RoutesXmlService, RouteStatisticsService, etc.\r\nclass RoutesService {\r\n  async getIcon(\r\n    node: MBeanNode,\r\n    nodeSettingsOrXmlNode: Record<string, unknown> | Element,\r\n    size?: number,\r\n  ): Promise<ReactNode> {\r\n    let nodeSettings: Record<string, unknown> | null = null\r\n\r\n    if (nodeSettingsOrXmlNode instanceof Element) {\r\n      const nodeName = nodeSettingsOrXmlNode.localName\r\n      if (nodeName) {\r\n        nodeSettings = await schemaService.getSchema(node, nodeName)\r\n      }\r\n    } else {\r\n      nodeSettings = nodeSettingsOrXmlNode\r\n    }\r\n\r\n    if (!nodeSettings) {\r\n      return null\r\n    }\r\n\r\n    const iconName = (nodeSettings['icon'] as string) || 'generic24.png'\r\n\r\n    // transform name into icon component name\r\n    let iname = iconName.replace('.png', '') // Remove png file extension\r\n    iname = iname.replace('24', '') // Remove 24 suffix\r\n    iname = iname.replace('-icon', '') // Remove -icon suffix\r\n    iname = iname.replace('icon', '') // Remove remaining icon suffix\r\n    iname = iname.charAt(0).toUpperCase() + iname.slice(1) // Capitalize\r\n    iname = iname.replace(/-([a-z])/g, s => s[1]?.toUpperCase() ?? s)\r\n    iname = `${iname}Icon`\r\n\r\n    //\r\n    // Fetch the correct FunctionComponent icon from the icons module\r\n    //\r\n    return icons.getIcon(iname, size)\r\n  }\r\n\r\n  /**\r\n   * Populates a route step node with the given XML.\r\n   */\r\n  private async populateStepNode(parent: MBeanNode, stepXml: Element) {\r\n    const nodeSettings = await schemaService.getSchema(parent, stepXml.localName)\r\n    if (!nodeSettings) {\r\n      return\r\n    }\r\n\r\n    /*\r\n     * if xml contains an id property then add that to node name\r\n     * if xml contains an uri property then add that to node name\r\n     */\r\n    const xmlId = stepXml.id\r\n    const xmlUri = stepXml.getAttribute('uri')\r\n    const nodeName = (xmlId ? xmlId + ': ' : xmlUri ? xmlUri + ': ' : '') + stepXml.localName\r\n\r\n    const node = new MBeanNode(null, nodeName, false)\r\n    node.setType(routeXmlNodeType)\r\n    camelService.setDomain(node)\r\n    node.setIcons(await this.getIcon(parent, nodeSettings))\r\n\r\n    // TODO - tooltips to be implemented\r\n    // updateRouteNodeLabelAndTooltip(node, route, nodeSettings)\r\n\r\n    // Adopt child before cascading to grandchildren so that the parent is traceable\r\n    // from the child\r\n    parent.adopt(node)\r\n\r\n    // Cascade XML loading to the child steps\r\n    await this.loadStepXml(node, stepXml)\r\n  }\r\n\r\n  /**\r\n   * Adds the XML to the given step node, and populates its child nodes with the\r\n   * inner steps of the XML.\r\n   */\r\n  private async loadStepXml(stepNode: MBeanNode, stepXml: Element) {\r\n    stepNode.addMetadata('xml', stepXml.outerHTML)\r\n    // Preserve the xml local name for use by views\r\n    stepNode.addMetadata(xmlNodeLocalName, stepXml.localName)\r\n\r\n    // Populate child nodes\r\n    for (const childXml of Array.from(stepXml.children)) {\r\n      await this.populateStepNode(stepNode, childXml)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds the route XML to the route node, and populates its child nodes with the\r\n   * route steps of the XML.\r\n   */\r\n  async loadRouteXml(routeNode: MBeanNode, routeXml: Element) {\r\n    routeNode.addMetadata('xml', '    ' + routeXml.outerHTML) // Indent route XML for better readability\r\n    // Preserve the xml local name for use by views\r\n    routeNode.addMetadata(xmlNodeLocalName, routeXml.localName)\r\n\r\n    // If route is grouped with the 'group' attribute, add it to the node.\r\n    const routeGroup = routeXml.getAttribute('group')\r\n    if (routeGroup) routeNode.addMetadata('group', routeGroup)\r\n\r\n    // Populate child nodes\r\n    for (const stepXml of Array.from(routeXml.children)) {\r\n      await this.populateStepNode(routeNode, stepXml)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fetches the routes XML for the context node from Jolokia.\r\n   */\r\n  async fetchRoutesXml(contextNode: MBeanNode): Promise<string> {\r\n    const { objectName } = contextNode\r\n    if (!objectName) {\r\n      throw new Error('Cannot process route xml as mbean name not available')\r\n    }\r\n\r\n    const xml = (await jolokiaService.execute(objectName, ROUTE_OPERATIONS.dumpRoutesAsXml)) as string\r\n    if (!xml) {\r\n      throw new Error('Failed to extract any xml from mbean: ' + objectName)\r\n    }\r\n\r\n    return xml\r\n  }\r\n\r\n  /**\r\n   * Looks up the routes XML for the selected route and processes the selected route's XML.\r\n   */\r\n  processRouteXml(xml: string, routeNode: MBeanNode): Element {\r\n    const doc = parseXML(xml)\r\n    const routeXml = doc.getElementById(routeNode.name)\r\n    if (!routeXml || routeXml.tagName?.toLowerCase() !== 'route') {\r\n      throw new Error(`No routes named '${routeNode.name}' found in the routes xml`)\r\n    }\r\n    return routeXml\r\n  }\r\n\r\n  /**\r\n   * Loads the routes XML from the context and adds it to the routes and children.\r\n   */\r\n  async loadRoutesXml(contextNode: MBeanNode, routesNode: MBeanNode) {\r\n    if (routesNode.getType() !== 'routes') {\r\n      return\r\n    }\r\n\r\n    try {\r\n      const xml = await this.fetchRoutesXml(contextNode)\r\n      routesNode.addMetadata('xml', xml)\r\n      for (const routeNode of routesNode.getChildren()) {\r\n        try {\r\n          const routeXml = this.processRouteXml(xml, routeNode)\r\n          await this.loadRouteXml(routeNode, routeXml)\r\n        } catch (error) {\r\n          log.error(`Failed to process route xml for '${routeNode.name}':`, error)\r\n        }\r\n      }\r\n    } catch (error) {\r\n      log.error(`Failed to load routes xml for '${contextNode.name}':`, error)\r\n    }\r\n  }\r\n\r\n  async dumpRoutesStatsXML(routesNode: MBeanNode): Promise<string | null> {\r\n    let xml = null\r\n    const routeNodeOperation = 'dumpRouteStatsAsXml'\r\n    const routesFolderOperation = 'dumpRoutesStatsAsXml'\r\n\r\n    const mbeanName = routesNode.getMetadata(contextNodeType)\r\n    const operationForMBean = mbeanName ? routesFolderOperation : routeNodeOperation\r\n    const mbeanToQuery = mbeanName ? mbeanName : routesNode.objectName ?? ''\r\n\r\n    try {\r\n      xml = await jolokiaService.execute(mbeanToQuery, operationForMBean, [true, true])\r\n    } catch (error) {\r\n      throw new Error('Failed to dump routes stats from mbean ' + mbeanName + ': ' + error)\r\n    }\r\n    if (!xml) {\r\n      throw new Error('Failed to extract any xml from mbean ' + mbeanName)\r\n    }\r\n    return xml as string\r\n  }\r\n\r\n  processRoutesStats(statsXml: string): RouteStats[] {\r\n    const doc: XMLDocument = parseXML(statsXml)\r\n    const routesStats: RouteStats[] = []\r\n    const allRoutes = doc.getElementsByTagName('routeStat')\r\n    for (const route of allRoutes) {\r\n      routesStats.push(this.createRouteStats(route))\r\n    }\r\n    return routesStats\r\n  }\r\n\r\n  createProcessorStats(routeId: string, pDoc: Element): ProcessorStats {\r\n    let res: ProcessorStats = {\r\n      id: '',\r\n      index: '',\r\n      state: '',\r\n    }\r\n\r\n    for (const atr of pDoc.getAttributeNames()) {\r\n      res = { ...res, [atr]: pDoc.getAttribute(atr) }\r\n    }\r\n    return res as ProcessorStats\r\n  }\r\n\r\n  createRouteStats(pDoc: Element): RouteStats {\r\n    const procStats = pDoc.getElementsByTagName('processorStat')\r\n    const processorStats: ProcessorStats[] = []\r\n\r\n    for (const pStat of procStats) {\r\n      processorStats.push(this.createProcessorStats(pDoc.id, pStat))\r\n    }\r\n    let routeStats: RouteStats = { id: '', processorStats: processorStats, sourceLocation: '', state: '' }\r\n\r\n    for (const atr of pDoc.getAttributeNames()) {\r\n      routeStats = { ...routeStats, [atr]: pDoc.getAttribute(atr) }\r\n    }\r\n    return routeStats\r\n  }\r\n}\r\n\r\nexport const routesService = new RoutesService()\r\n","import { eventService } from '@hawtiosrc/core'\r\nimport { MBeanNode } from '@hawtiosrc/plugins/shared'\r\nimport { jolokiaService } from '@hawtiosrc/plugins/shared/jolokia-service'\r\nimport { isObject } from '@hawtiosrc/util/objects'\r\nimport { isBlank } from '@hawtiosrc/util/strings'\r\nimport { ENDPOINT_OPERATIONS } from './endpoints/endpoints-service'\r\nimport {\r\n  componentNodeType,\r\n  componentsType,\r\n  contextNodeType,\r\n  contextsType,\r\n  domainNodeType,\r\n  endpointNodeType,\r\n  endpointsType,\r\n  jmxDomain,\r\n  log,\r\n  mbeansType,\r\n  routeNodeType,\r\n  routeXmlNodeType,\r\n  routesType,\r\n} from './globals'\r\nimport { ROUTE_OPERATIONS } from './routes-service'\r\n\r\n// TODO: Should be provided by @hawtio/camel-model package\r\nexport type CamelModel = {\r\n  apacheCamelModelVersion: string\r\n  components: { [name: string]: CamelModelSchema }\r\n  dataformats: { [name: string]: CamelModelSchema }\r\n  definitions: { [name: string]: CamelModelSchema }\r\n  languages: { [name: string]: CamelModelSchema }\r\n  rests: { [name: string]: CamelModelSchema }\r\n}\r\n\r\nexport type CamelModelSchema = {\r\n  type: string\r\n  title: string\r\n  group: string\r\n  icon: string\r\n  description: string\r\n  acceptInput?: string\r\n  acceptOutput?: string\r\n  nextSiblingAddedAsChild?: boolean\r\n  properties: { [name: string]: CamelModelProperty }\r\n}\r\n\r\nexport type CamelModelProperty = {\r\n  kind: string\r\n  type: string\r\n  defaultValue?: string\r\n  enum?: string[]\r\n  description: string\r\n  title: string\r\n  required: boolean\r\n  deprecated: boolean\r\n}\r\n\r\nexport function notifyError(msg: string) {\r\n  eventService.notify({\r\n    type: 'danger',\r\n    message: msg,\r\n  })\r\n}\r\n\r\nexport function notifyInfo(msg: string) {\r\n  eventService.notify({\r\n    type: 'info',\r\n    message: msg,\r\n  })\r\n}\r\n\r\nexport function setChildProperties(parent: MBeanNode | null, childType: string) {\r\n  if (!parent) return\r\n\r\n  for (const child of parent.getChildren()) {\r\n    child.setType(childType)\r\n    setDomain(child)\r\n    setChildProperties(child, childType)\r\n  }\r\n}\r\n\r\nexport function setDomain(node: MBeanNode) {\r\n  node.addMetadata('domain', jmxDomain)\r\n}\r\n\r\nexport function hasDomain(node: MBeanNode): boolean {\r\n  return jmxDomain === node.getMetadata('domain')\r\n}\r\n\r\nexport function hasMBean(node: MBeanNode): boolean {\r\n  return node.objectName !== undefined && isObject(node.mbean)\r\n}\r\n\r\nexport function isDomainNode(node: MBeanNode): boolean {\r\n  return node.getType() === domainNodeType\r\n}\r\n\r\nexport function isContextsFolder(node: MBeanNode): boolean {\r\n  return hasDomain(node) && node.getType() === contextsType\r\n}\r\n\r\nexport function isContext(node: MBeanNode): boolean {\r\n  return hasDomain(node) && node.getType() === contextNodeType\r\n}\r\n\r\nexport function findContext(node: MBeanNode): MBeanNode | null {\r\n  if (!hasDomain(node)) return null\r\n\r\n  if (isDomainNode(node)) {\r\n    // The camel domain node so traverse to context folder & recurse\r\n    return findContext(node.getIndex(0) as MBeanNode)\r\n  }\r\n\r\n  if (isContextsFolder(node)) {\r\n    if (node.childCount() === 0) return null\r\n\r\n    // Find first context node in the list\r\n    return node.getIndex(0)\r\n  }\r\n\r\n  if (isContext(node)) {\r\n    return node\r\n  }\r\n\r\n  // Node is below a context so navigate up the tree\r\n  return node.findAncestor(ancestor => isContext(ancestor))\r\n}\r\n\r\nexport function isRoutesFolder(node: MBeanNode): boolean {\r\n  return hasDomain(node) && !hasMBean(node) && node.getType() === routesType\r\n}\r\n\r\nexport function isRouteNode(node: MBeanNode): boolean {\r\n  return hasDomain(node) && node.getType() === routeNodeType\r\n}\r\n\r\nexport function isRouteXmlNode(node: MBeanNode): boolean {\r\n  return hasDomain(node) && node.getType() === routeXmlNodeType\r\n}\r\n\r\nexport function isEndpointsFolder(node: MBeanNode): boolean {\r\n  return hasDomain(node) && !hasMBean(node) && node.getType() === endpointsType\r\n}\r\n\r\nexport function isEndpointNode(node: MBeanNode): boolean {\r\n  return hasDomain(node) && node.getType() === endpointNodeType\r\n}\r\n\r\nexport function isComponentsFolder(node: MBeanNode): boolean {\r\n  return hasDomain(node) && !hasMBean(node) && node.getType() === componentsType\r\n}\r\n\r\nexport function isComponentNode(node: MBeanNode): boolean {\r\n  return hasDomain(node) && node.getType() === componentNodeType\r\n}\r\n\r\nfunction findMBean(node: MBeanNode, folder: string, id: string): MBeanNode | null {\r\n  if (!node) return null\r\n\r\n  const ctxNode = findContext(node)\r\n  if (!ctxNode) return null\r\n\r\n  const result = ctxNode.navigate(mbeansType, folder)\r\n  if (!result || !result.children) return null\r\n\r\n  const service = result.getChildren().find(m => m.name.startsWith(id))\r\n  return !service ? null : service\r\n}\r\n\r\nexport function hasInflightRepository(node: MBeanNode): boolean {\r\n  return findMBean(node, 'services', 'DefaultInflightRepository') !== null\r\n}\r\n\r\nexport function canViewRouteDiagram(node: MBeanNode): boolean {\r\n  return isRouteNode(node) || isRoutesFolder(node)\r\n}\r\n\r\nexport function canViewSource(node: MBeanNode): boolean {\r\n  if (isEndpointNode(node) || isEndpointsFolder(node)) return false\r\n  if (!isRouteNode(node) && !isRoutesFolder(node)) return false\r\n\r\n  const context = findContext(node)\r\n  return context?.hasInvokeRights(ROUTE_OPERATIONS.dumpRoutesAsXml) ?? false\r\n}\r\n\r\nexport function canSendMessage(node: MBeanNode): boolean {\r\n  if (!isEndpointNode(node)) return false\r\n\r\n  const context = findContext(node)\r\n  return context?.hasInvokeRights(ENDPOINT_OPERATIONS.sendBodyAndHeaders, ENDPOINT_OPERATIONS.sendStringBody) ?? false\r\n}\r\n\r\nexport function canBrowseMessages(node: MBeanNode): boolean {\r\n  if (!isEndpointNode(node)) return false\r\n  if (!node.hasOperations('browseMessageAsXml')) return false\r\n\r\n  return node.hasInvokeRights(ENDPOINT_OPERATIONS.browseAllMessagesAsXml, ENDPOINT_OPERATIONS.browseRangeMessagesAsXml)\r\n}\r\n\r\nexport function canViewEndpointStats(node: MBeanNode): boolean {\r\n  const registry = getDefaultRuntimeEndpointRegistry(node)\r\n  const canInvoke = registry?.hasInvokeRights('endpointStatistics') ?? false\r\n  return (\r\n    !isEndpointsFolder(node) &&\r\n    !isEndpointNode(node) &&\r\n    !isComponentsFolder(node) &&\r\n    !isComponentNode(node) &&\r\n    (isContext(node) || isRoutesFolder(node)) &&\r\n    canInvoke\r\n  )\r\n}\r\n\r\nexport function getDefaultRuntimeEndpointRegistry(node: MBeanNode): MBeanNode | null {\r\n  return findMBean(node, 'services', 'DefaultRuntimeEndpointRegistry')\r\n}\r\n\r\nexport function hasExchange(node: MBeanNode): boolean {\r\n  return (\r\n    !isEndpointsFolder(node) &&\r\n    !isEndpointNode(node) &&\r\n    !isComponentsFolder(node) &&\r\n    !isComponentNode(node) &&\r\n    (isContext(node) || isRoutesFolder(node) || isRouteNode(node)) &&\r\n    hasInflightRepository(node)\r\n  )\r\n}\r\n\r\nexport function findTypeConverter(node: MBeanNode): MBeanNode | null {\r\n  return findMBean(node, 'services', 'TypeConverter')\r\n}\r\n\r\nexport function canListTypeConverters(node: MBeanNode): boolean {\r\n  const tc = findTypeConverter(node)\r\n  return tc?.hasInvokeRights('listTypeConverters') ?? false\r\n}\r\n\r\nexport function hasTypeConverter(node: MBeanNode): boolean {\r\n  return (\r\n    !isRouteNode(node) &&\r\n    !isRouteXmlNode(node) &&\r\n    !isEndpointsFolder(node) &&\r\n    !isEndpointNode(node) &&\r\n    !isComponentsFolder(node) &&\r\n    !isComponentNode(node) &&\r\n    (isContext(node) || isRoutesFolder(node)) &&\r\n    canListTypeConverters(node)\r\n  )\r\n}\r\n\r\nexport function findTraceBean(node: MBeanNode): MBeanNode | null {\r\n  return findMBean(node, 'tracer', 'BacklogTracer')\r\n}\r\n\r\nexport function findDebugBean(node: MBeanNode): MBeanNode | null {\r\n  return findMBean(node, 'tracer', 'BacklogDebugger')\r\n}\r\n\r\n/**\r\n * Returns the name of operation for getting all the breakpoints on the BacklogDebugger\r\n * MBean. The operation name differs between Camel v3 and v4.\r\n */\r\nexport function getBreakpointsOperation(node: MBeanNode): string {\r\n  return isCamelVersionEQGT(node, 4, 0) ? 'breakpoints' : 'getBreakpoints'\r\n}\r\n\r\n/**\r\n * Returns the name of operation for getting all the suspended breakpoint IDs on\r\n * the BacklogDebugger MBean. The operation name differs between Camel v3 and v4.\r\n */\r\nexport function getSuspendedBreakpointNodeIdsOperation(node: MBeanNode): string {\r\n  return isCamelVersionEQGT(node, 4, 0) ? 'suspendedBreakpointNodeIds' : 'getSuspendedBreakpointNodeIds'\r\n}\r\n\r\n/**\r\n * Executes the operation for dumping traced messages as XML on the BacklogDebugger\r\n * MBean. The operation name differs between Camel v3 and v4.\r\n */\r\nexport function dumpTracedMessagesAsXml(node: MBeanNode, debugMBean: string, breakpointId: string): Promise<string> {\r\n  if (isCamelVersionEQGT(node, 4, 0)) {\r\n    return jolokiaService.execute(debugMBean, 'dumpTracedMessagesAsXml(java.lang.String,boolean)', [\r\n      breakpointId,\r\n      false,\r\n    ]) as Promise<string>\r\n  } else {\r\n    return jolokiaService.execute(debugMBean, 'dumpTracedMessagesAsXml(java.lang.String)', [\r\n      breakpointId,\r\n    ]) as Promise<string>\r\n  }\r\n}\r\n\r\nexport function canGetBreakpoints(node: MBeanNode): boolean {\r\n  if (!isRouteNode(node)) return false\r\n\r\n  const db = findDebugBean(node)\r\n  return db?.hasInvokeRights(getBreakpointsOperation(node)) ?? false\r\n}\r\n\r\nexport function canTrace(node: MBeanNode): boolean {\r\n  if (!isRouteNode(node)) return false\r\n\r\n  const trace = findTraceBean(node)\r\n  return trace?.hasInvokeRights('dumpAllTracedMessagesAsXml') ?? false\r\n}\r\n\r\nexport function findRestRegistryBean(node: MBeanNode): MBeanNode | null {\r\n  return findMBean(node, 'services', 'DefaultRestRegistry')\r\n}\r\n\r\nexport function canListRestServices(node: MBeanNode): boolean {\r\n  const registry = findRestRegistryBean(node)\r\n  return registry?.hasInvokeRights('listRestServices') ?? false\r\n}\r\n\r\nexport function hasRestServices(node: MBeanNode): boolean {\r\n  if (!isContext(node) && !isRoutesFolder(node)) return false\r\n  if (!canListRestServices(node)) return false\r\n\r\n  const registry = findRestRegistryBean(node)\r\n  return registry ? true : false\r\n}\r\n\r\nexport function hasProperties(node: MBeanNode): boolean {\r\n  return isRouteNode(node) || isRouteXmlNode(node)\r\n}\r\n\r\nexport async function getCamelVersions(): Promise<string[]> {\r\n  const { version: camel4_0Version } = await import('@hawtio/camel-model-v4_0/package.json')\r\n  const { version: camel4_4Version } = await import('@hawtio/camel-model-v4_4/package.json')\r\n  return [camel4_0Version, camel4_4Version]\r\n}\r\n\r\n/**\r\n * Returns the corresponding version of Camel model based on the Camel version of\r\n * the given node.\r\n */\r\nexport async function getCamelModel(node: MBeanNode): Promise<CamelModel> {\r\n  // 4.4 ~     => 4.4.x\r\n  // 4.0 ~ 4.3 => 4.0.x\r\n  if (isCamelVersionEQGT(node, 4, 4)) {\r\n    const camel4_4 = (await import('@hawtio/camel-model-v4_4')) as unknown as CamelModel\r\n    return camel4_4\r\n  }\r\n  if (isCamelVersionEQGT(node, 4, 0)) {\r\n    const camel4_0 = (await import('@hawtio/camel-model-v4_0')) as unknown as CamelModel\r\n    return camel4_0\r\n  }\r\n  // Fallback to 4.0.x model\r\n  const camel4_0 = (await import('@hawtio/camel-model-v4_0')) as unknown as CamelModel\r\n  return camel4_0\r\n}\r\n\r\n/**\r\n * Fetch the camel version and add it to the tree to avoid making a blocking call\r\n * elsewhere.\r\n */\r\nexport async function fetchCamelVersion(contextNode: MBeanNode) {\r\n  const version = contextNode.getMetadata('version')\r\n  if (!isBlank(version)) {\r\n    // Already retrieved\r\n    return\r\n  }\r\n\r\n  if (!contextNode.objectName) {\r\n    log.warn('Camel version not available due to absence of ObjectName in context node:', contextNode)\r\n    return\r\n  }\r\n\r\n  const camelVersion = (await jolokiaService.readAttribute(contextNode.objectName, 'CamelVersion')) as string\r\n  contextNode.addMetadata('version', camelVersion)\r\n}\r\n\r\nexport function getCamelVersion(node: MBeanNode): string | null {\r\n  const ctxNode = findContext(node)\r\n  if (!ctxNode) return null\r\n\r\n  return ctxNode.getMetadata('version') ?? null\r\n}\r\n\r\nexport function compareVersions(version: string, major: number, minor: number): number {\r\n  const arr = version.split('.')\r\n\r\n  // parse int or default to 0\r\n  const vmaj = parseInt(arr[0] ?? '0') || 0\r\n  const vmin = parseInt(arr[1] ?? '0') || 0\r\n  if (vmaj < major) return -1\r\n  if (vmaj > major) return 1\r\n\r\n  // vmaj == major\r\n  if (vmin < minor) return -1\r\n  if (vmin > minor) return 1\r\n\r\n  // major and minor are the same\r\n  return 0\r\n}\r\n\r\n/**\r\n * Is the currently selected Camel version equal or greater than\r\n *\r\n * @param major   major version as number\r\n * @param minor   minor version as number\r\n */\r\nexport function isCamelVersionEQGT(node: MBeanNode, major: number, minor: number): boolean {\r\n  const camelVersion = getCamelVersion(node)\r\n  if (!camelVersion) {\r\n    return false\r\n  }\r\n\r\n  return compareVersions(camelVersion, major, minor) >= 0\r\n}\r\n","import { createContext, useEffect, useState, useContext, useRef } from 'react'\r\nimport { TreeViewDataItem } from '@patternfly/react-core'\r\nimport { PluginNodeSelectionContext } from '@hawtiosrc/plugins'\r\nimport { workspace, MBeanNode, MBeanTree } from '@hawtiosrc/plugins/shared'\r\nimport { pluginName, pluginPath, jmxDomain } from './globals'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { eventService, EVENT_REFRESH } from '@hawtiosrc/core'\r\nimport * as camelService from './camel-service'\r\n\r\n/**\r\n * Custom React hook for using Camel MBean tree.\r\n */\r\nexport function useCamelTree() {\r\n  const [tree, setTree] = useState(MBeanTree.createEmpty(pluginName))\r\n  const [loaded, setLoaded] = useState(false)\r\n  const { selectedNode, setSelectedNode } = useContext(PluginNodeSelectionContext)\r\n  const navigate = useNavigate()\r\n\r\n  /*\r\n   * Need to preserve the selected node between re-renders since the\r\n   * populateTree function called via the refresh listener does not\r\n   * cache the value and stores it as null\r\n   */\r\n  const refSelectedNode = useRef<MBeanNode | null>()\r\n  refSelectedNode.current = selectedNode\r\n\r\n  const populateTree = async () => {\r\n    const wkspTree: MBeanTree = await workspace.getTree()\r\n    const rootNode = wkspTree.find(node => node.name === jmxDomain)\r\n    if (rootNode && rootNode.children && rootNode.children.length > 0) {\r\n      const contextsNode = rootNode.getChildren()[0]\r\n      if (!contextsNode) {\r\n        return\r\n      }\r\n\r\n      /*\r\n       * Using the camel domain nodes from the original tree means it is the same\r\n       * node as that that appears in the workspace tree\r\n       */\r\n      const subTree: MBeanTree = MBeanTree.createFromNodes(pluginName, contextsNode.getChildren())\r\n      setTree(subTree)\r\n\r\n      const path: string[] = []\r\n      /*\r\n       * Make the selection the camel selected node if\r\n       * - It is not null\r\n       * - It is a camel domain node\r\n       * - It is not the domain node (not visible)\r\n       */\r\n      if (\r\n        refSelectedNode.current &&\r\n        camelService.hasDomain(refSelectedNode.current) &&\r\n        !camelService.isDomainNode(refSelectedNode.current)\r\n      ) {\r\n        path.push(...refSelectedNode.current.path())\r\n      } else {\r\n        // No selection so select the contexts node to display the contexts view\r\n        path.push(...contextsNode.path())\r\n      }\r\n\r\n      const parentContext = rootNode.children[0]?.children\r\n\r\n      if (parentContext && parentContext[0]) {\r\n        // expand the context tree\r\n        parentContext[0].defaultExpanded = true\r\n\r\n        // check whether to expand its children\r\n        parentContext[0].children?.forEach(childChild => {\r\n          switch (childChild.name) {\r\n            case 'routes':\r\n            case 'endpoints':\r\n            case 'components':\r\n              childChild.defaultExpanded = true\r\n              break\r\n          }\r\n        })\r\n      }\r\n\r\n      // Expand the nodes to redisplay the path\r\n      rootNode.forEach(path, (node: MBeanNode) => {\r\n        const tvd = node as TreeViewDataItem\r\n        tvd.defaultExpanded = true\r\n      })\r\n\r\n      // Ensure the new version of the selected node is selected\r\n      const newSelected = rootNode.navigate(...path)\r\n      if (newSelected) setSelectedNode(newSelected)\r\n\r\n      /* On population of tree, ensure the url path is returned to the base plugin path */\r\n      navigate(pluginPath)\r\n    } else {\r\n      setTree(wkspTree)\r\n      // No camel contexts so redirect to the JMX view and select the first tree node\r\n      navigate('jmx')\r\n      eventService.notify({\r\n        type: 'warning',\r\n        message: 'No Camel domain detected in target. Redirecting to back to jmx.',\r\n      })\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const loadTree = async () => {\r\n      await populateTree()\r\n      setLoaded(true)\r\n    }\r\n\r\n    const listener = () => {\r\n      setLoaded(false)\r\n      loadTree()\r\n    }\r\n    eventService.onRefresh(listener)\r\n\r\n    loadTree()\r\n\r\n    return () => eventService.removeListener(EVENT_REFRESH, listener)\r\n    /*\r\n     * This effect should only be called on mount so cannot depend on selectedNode\r\n     * But cannot have [] removed either as this seems to execute the effect repeatedly\r\n     * So disable the lint check.\r\n     */\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n\r\n  return { tree, loaded, selectedNode, setSelectedNode }\r\n}\r\n\r\ntype CamelContext = {\r\n  tree: MBeanTree\r\n  selectedNode: MBeanNode | null\r\n  setSelectedNode: (selected: MBeanNode | null) => void\r\n}\r\n\r\nexport const CamelContext = createContext<CamelContext>({\r\n  tree: MBeanTree.createEmpty(pluginName),\r\n  selectedNode: null,\r\n  setSelectedNode: () => {\r\n    /* no-op */\r\n  },\r\n})\r\n","import { eventService } from '@hawtiosrc/core'\r\nimport { CamelContext } from '@hawtiosrc/plugins/camel/context'\r\nimport { HawtioLoadingCard } from '@hawtiosrc/plugins/shared'\r\nimport { AttributeValues } from '@hawtiosrc/plugins/shared/jolokia-service'\r\nimport { Card, CardBody, Text } from '@patternfly/react-core'\r\nimport { InfoCircleIcon } from '@patternfly/react-icons'\r\nimport { TableComposable, TableProps, Tbody, Td, Th, Thead, Tr, wrappable } from '@patternfly/react-table'\r\nimport { Response } from 'jolokia.js'\r\nimport React, { useContext, useEffect, useState } from 'react'\r\nimport { log } from '../globals'\r\nimport { ContextToolbar } from './ContextToolbar'\r\nimport { ContextState, contextsService } from './contexts-service'\r\n\r\nexport const Contexts: React.FunctionComponent = () => {\r\n  const { selectedNode } = useContext(CamelContext)\r\n  const [isReading, setIsReading] = useState(true)\r\n\r\n  const [contexts, setContexts] = useState<ContextState[]>([])\r\n  const [selectedCtx, setSelectedCtx] = useState<string[]>([])\r\n\r\n  const onSelectContext = (ctx: ContextState, isSelecting: boolean) => {\r\n    const otherSelectedCtx = selectedCtx.filter(c => c !== ctx.node.name)\r\n    setSelectedCtx(isSelecting ? [...otherSelectedCtx, ctx.node.name] : [...otherSelectedCtx])\r\n  }\r\n\r\n  const selectAllContexts = (isSelecting = true) => {\r\n    setSelectedCtx(isSelecting ? contexts.map(c => c.node.name) : [])\r\n  }\r\n\r\n  const isContextSelected = (ctx: ContextState) => {\r\n    return selectedCtx.includes(ctx.node.name)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!selectedNode) return\r\n\r\n    setIsReading(true)\r\n    const readAttributes = async () => {\r\n      try {\r\n        const ctxs = await contextsService.getContexts(selectedNode)\r\n        setContexts(ctxs)\r\n      } catch (error) {\r\n        eventService.notify({\r\n          type: 'warning',\r\n          message: error as string,\r\n        })\r\n      }\r\n      setIsReading(false)\r\n    }\r\n    readAttributes()\r\n  }, [selectedNode])\r\n\r\n  useEffect(() => {\r\n    if (!contexts || contexts.length === 0) return\r\n\r\n    // TODO: we should not invoke setContexts separately from multiple scheduler.\r\n    // It should cause a bug of overwriting the other updates when we have multiple contexts.\r\n    contexts.forEach((ctx, idx) => {\r\n      const { objectName } = ctx.node\r\n      if (!objectName) {\r\n        return\r\n      }\r\n      contextsService.register({ type: 'read', mbean: objectName }, (response: Response) => {\r\n        log.debug('Scheduler - Contexts:', response.value)\r\n\r\n        // Replace the context in the existing set with the new one\r\n        const attrs = response.value as AttributeValues\r\n        const newCtx = contextsService.toContextState(ctx.node, attrs)\r\n\r\n        // Replace the context in the contexts array\r\n        const newContexts = [...contexts]\r\n        newContexts.splice(idx, 1, newCtx)\r\n        setContexts(newContexts)\r\n      })\r\n    })\r\n\r\n    return () => contextsService.unregisterAll()\r\n  }, [selectedNode, contexts])\r\n\r\n  if (!selectedNode) {\r\n    // When this view is routed, the virtual 'Camel Contexts' node should be always selected\r\n    return null\r\n  }\r\n\r\n  if (isReading) {\r\n    return <HawtioLoadingCard />\r\n  }\r\n\r\n  /*\r\n   * Populate the column headers and data using the positions\r\n   * of the headers in the array to ensure the correct locations\r\n   * of the data\r\n   */\r\n  const columns: TableProps['cells'] = []\r\n  columns.push({ title: 'Context', transforms: [wrappable] })\r\n  columns.push({ title: 'State', transforms: [wrappable] })\r\n\r\n  const rows: TableProps['rows'] = []\r\n  for (const ctx of contexts) {\r\n    rows.push({\r\n      cells: [ctx.node.name, ctx.state],\r\n      selected: isContextSelected(ctx),\r\n    })\r\n  }\r\n\r\n  if (rows.length === 0) {\r\n    return (\r\n      <Card>\r\n        <CardBody>\r\n          <Text component='p'>\r\n            <InfoCircleIcon /> This domain has no contexts.\r\n          </Text>\r\n        </CardBody>\r\n      </Card>\r\n    )\r\n  }\r\n\r\n  /*\r\n   * Callback the is fired after the delete button has been\r\n   * clicked in the toolbar\r\n   */\r\n  const handleDeletedContexts = (deleted: ContextState[]) => {\r\n    const ctxs = contexts.filter(ctx => !deleted.includes(ctx))\r\n    setContexts(ctxs)\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ContextToolbar\r\n        contexts={contexts.filter(c => selectedCtx.includes(c.node.name))}\r\n        deleteCallback={handleDeletedContexts}\r\n      />\r\n      <TableComposable aria-label='Contexts' variant='compact'>\r\n        <Thead>\r\n          <Tr>\r\n            <Th\r\n              select={{\r\n                onSelect: (_event, isSelecting) => selectAllContexts(isSelecting),\r\n                isSelected: contexts.length === selectedCtx.length,\r\n              }}\r\n            />\r\n            <Th key='context-header'>Context</Th>\r\n            <Th key={'state-header'}>State</Th>\r\n          </Tr>\r\n        </Thead>\r\n        <Tbody>\r\n          {contexts.map((ctx, idx) => (\r\n            <Tr key={ctx.node.name}>\r\n              <Td\r\n                select={{\r\n                  rowIndex: idx,\r\n                  onSelect: (_event, isSelecting) => onSelectContext(ctx, isSelecting),\r\n                  isSelected: isContextSelected(ctx),\r\n                }}\r\n              />\r\n              <Td key={'context-' + idx}>{ctx.node.name}</Td>\r\n              <Td key={'state-' + idx}>{ctx.state}</Td>\r\n            </Tr>\r\n          ))}\r\n        </Tbody>\r\n      </TableComposable>\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import { eventService } from '@hawtiosrc/core'\r\nimport { workspace } from '@hawtiosrc/plugins/shared'\r\nimport {\r\n  Button,\r\n  Dropdown,\r\n  DropdownItem,\r\n  KebabToggle,\r\n  Modal,\r\n  ModalVariant,\r\n  Skeleton,\r\n  Toolbar,\r\n  ToolbarContent,\r\n  ToolbarItem,\r\n} from '@patternfly/react-core'\r\nimport { AsleepIcon, PlayIcon, Remove2Icon } from '@patternfly/react-icons'\r\nimport React, { useState } from 'react'\r\nimport {\r\n  CONTEXT_OPERATIONS,\r\n  CONTEXT_STATE_STARTED,\r\n  CONTEXT_STATE_SUSPENDED,\r\n  ContextState,\r\n  contextsService,\r\n} from './contexts-service'\r\n\r\nexport const ContextToolbar: React.FunctionComponent<{\r\n  contexts: ContextState[]\r\n  deleteCallback: (contexts: ContextState[]) => void\r\n}> = ({ contexts, deleteCallback }) => {\r\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false)\r\n  const [isConfirmDeleteOpen, setIsConfirmDeleteOpen] = useState(false)\r\n  const [isDeleting, setIsDeleting] = useState(false)\r\n\r\n  // The first context is sampled only to check canInvoke on the context MBean\r\n  const firstContext = contexts[0]\r\n\r\n  const onDropdownToggle = (isOpen: boolean) => {\r\n    setIsDropdownOpen(isOpen)\r\n  }\r\n\r\n  const isStartEnabled = (): boolean => {\r\n    if (contexts.length === 0) return false\r\n\r\n    return contexts.some(ctx => ctx.state === CONTEXT_STATE_SUSPENDED)\r\n  }\r\n\r\n  const startContexts = () => {\r\n    contexts\r\n      .filter(ctx => ctx.state === CONTEXT_STATE_SUSPENDED)\r\n      .forEach(ctx =>\r\n        contextsService\r\n          .startContext(ctx)\r\n          .then(() =>\r\n            eventService.notify({\r\n              type: 'success',\r\n              message: 'Camel context start requested',\r\n            }),\r\n          )\r\n          .catch(error =>\r\n            eventService.notify({\r\n              type: 'danger',\r\n              message: `Camel context start failed: ${error}`,\r\n            }),\r\n          ),\r\n      )\r\n  }\r\n\r\n  const isSuspendEnabled = (): boolean => {\r\n    if (contexts.length === 0) return false\r\n\r\n    return contexts.some(ctx => ctx.state === CONTEXT_STATE_STARTED)\r\n  }\r\n\r\n  const suspendContexts = () => {\r\n    contexts\r\n      .filter(ctx => ctx.state === CONTEXT_STATE_STARTED)\r\n      .forEach(ctx =>\r\n        contextsService\r\n          .suspendContext(ctx)\r\n          .then(() =>\r\n            eventService.notify({\r\n              type: 'success',\r\n              message: 'Camel context suspension requested',\r\n            }),\r\n          )\r\n          .catch(error =>\r\n            eventService.notify({\r\n              type: 'danger',\r\n              message: `Camel context suspension failed: ${error}`,\r\n            }),\r\n          ),\r\n      )\r\n  }\r\n\r\n  const isDeleteEnabled = (): boolean => {\r\n    return contexts.length > 0\r\n  }\r\n\r\n  const handleConfirmDeleteToggle = () => {\r\n    setIsConfirmDeleteOpen(!isConfirmDeleteOpen)\r\n  }\r\n\r\n  const onDeleteClicked = () => {\r\n    setIsDropdownOpen(false)\r\n    handleConfirmDeleteToggle()\r\n  }\r\n\r\n  const onDeleteConfirmClicked = () => {\r\n    setIsDeleting(true)\r\n  }\r\n\r\n  const deleteContexts = async () => {\r\n    // Use for-of loop to make sure the callback and tree refresh are called after\r\n    // all the deletion is complete\r\n    for (const ctx of contexts) {\r\n      try {\r\n        await contextsService.stopContext(ctx)\r\n        eventService.notify({\r\n          type: 'success',\r\n          message: 'Camel context deleted.',\r\n        })\r\n      } catch (error) {\r\n        eventService.notify({\r\n          type: 'danger',\r\n          message: `Camel context deletion failed: ${error}`,\r\n        })\r\n      }\r\n    }\r\n\r\n    deleteCallback(contexts)\r\n    setIsDeleting(false)\r\n    workspace.refreshTree()\r\n  }\r\n\r\n  if (isDeleting) {\r\n    deleteContexts()\r\n\r\n    const title = `Deleting ${contexts.length > 1 ? 'Contexts' : 'Context'} ...`\r\n    return (\r\n      <Modal variant={ModalVariant.small} title={title} titleIconVariant='warning' isOpen={isDeleting}>\r\n        <Skeleton screenreaderText={title} />\r\n      </Modal>\r\n    )\r\n  }\r\n\r\n  const toolbarButtons = (\r\n    <React.Fragment>\r\n      <ToolbarItem>\r\n        <Button\r\n          variant='primary'\r\n          isSmall={true}\r\n          isDisabled={\r\n            !(firstContext && firstContext.node.hasInvokeRights(CONTEXT_OPERATIONS.start)) || !isStartEnabled()\r\n          }\r\n          icon={<PlayIcon />}\r\n          onClick={startContexts}\r\n        >\r\n          Start\r\n        </Button>\r\n      </ToolbarItem>\r\n      <ToolbarItem>\r\n        <Button\r\n          variant='danger'\r\n          isSmall={true}\r\n          isDisabled={\r\n            !(firstContext && firstContext.node.hasInvokeRights(CONTEXT_OPERATIONS.suspend)) || !isSuspendEnabled()\r\n          }\r\n          icon={<AsleepIcon />}\r\n          onClick={suspendContexts}\r\n        >\r\n          Suspend\r\n        </Button>\r\n      </ToolbarItem>\r\n    </React.Fragment>\r\n  )\r\n\r\n  const ConfirmDeleteModal = () => (\r\n    <Modal\r\n      variant={ModalVariant.small}\r\n      title='Delete Camel Contexts'\r\n      titleIconVariant='danger'\r\n      isOpen={isConfirmDeleteOpen}\r\n      onClose={handleConfirmDeleteToggle}\r\n      actions={[\r\n        <Button key='delete' variant='danger' onClick={onDeleteConfirmClicked}>\r\n          Delete\r\n        </Button>,\r\n        <Button key='cancel' variant='link' onClick={handleConfirmDeleteToggle}>\r\n          Cancel\r\n        </Button>,\r\n      ]}\r\n    >\r\n      <p>You are about to delete this Camel Context.</p>\r\n      <p>This operation cannot be undone so please be careful.</p>\r\n    </Modal>\r\n  )\r\n\r\n  const dropdownItems = [\r\n    <DropdownItem\r\n      key='delete'\r\n      component={\r\n        <Button\r\n          variant='plain'\r\n          isDisabled={\r\n            !(firstContext && firstContext.node.hasInvokeRights(CONTEXT_OPERATIONS.stop)) || !isDeleteEnabled()\r\n          }\r\n          onClick={onDeleteClicked}\r\n        >\r\n          <Remove2Icon /> Delete\r\n        </Button>\r\n      }\r\n    />,\r\n  ]\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Toolbar id='camel-contexts-toolbar'>\r\n        <ToolbarContent>\r\n          {toolbarButtons}\r\n          <ToolbarItem id='camel-contexts-toolbar-item-dropdown'>\r\n            <Dropdown\r\n              toggle={<KebabToggle id='camel-contexts-toolbar-item-dropdown-toggle' onToggle={onDropdownToggle} />}\r\n              isOpen={isDropdownOpen}\r\n              dropdownItems={dropdownItems}\r\n              isPlain\r\n            />\r\n          </ToolbarItem>\r\n        </ToolbarContent>\r\n      </Toolbar>\r\n      <ConfirmDeleteModal />\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import { MBeanNode } from '@hawtiosrc/plugins/shared'\r\nimport { AttributeValues, jolokiaService } from '@hawtiosrc/plugins/shared/jolokia-service'\r\nimport { Request, Response } from 'jolokia.js'\r\nimport { log } from '../globals'\r\n\r\nexport const CONTEXT_STATE_STARTED = 'Started'\r\nexport const CONTEXT_STATE_SUSPENDED = 'Suspended'\r\n\r\nexport const CONTEXT_OPERATIONS = {\r\n  start: 'start()',\r\n  suspend: 'suspend()',\r\n  stop: 'stop()',\r\n} as const\r\n\r\nexport type ContextState = {\r\n  node: MBeanNode\r\n  state: string\r\n}\r\n\r\nclass ContextsService {\r\n  private handles: number[] = []\r\n\r\n  toContextState(node: MBeanNode, attributes: AttributeValues): ContextState {\r\n    const state = (attributes?.['State'] as string) ?? 'Not Found'\r\n    return { node, state }\r\n  }\r\n\r\n  async getContext(contextNode: MBeanNode): Promise<ContextState | null> {\r\n    if (!contextNode.objectName) return null\r\n\r\n    const attributes = await jolokiaService.readAttributes(contextNode.objectName)\r\n    return this.toContextState(contextNode, attributes)\r\n  }\r\n\r\n  async getContexts(contextsNode: MBeanNode): Promise<ContextState[]> {\r\n    const contextNodes = contextsNode.getChildren()\r\n    if (contextNodes.length === 0) return []\r\n\r\n    const ctxAttributes: ContextState[] = []\r\n    for (const contextNode of contextNodes) {\r\n      if (!contextNode.objectName) {\r\n        continue\r\n      }\r\n\r\n      const attributes: AttributeValues = await jolokiaService.readAttributes(contextNode.objectName)\r\n      ctxAttributes.push(this.toContextState(contextNode, attributes))\r\n    }\r\n\r\n    return ctxAttributes\r\n  }\r\n\r\n  async register(request: Request, callback: (response: Response) => void) {\r\n    const handle = await jolokiaService.register(request, callback)\r\n    log.debug('Register handle:', handle)\r\n    this.handles.push(handle)\r\n  }\r\n\r\n  unregisterAll() {\r\n    log.debug('Unregister all handles:', this.handles)\r\n    this.handles.forEach(handle => jolokiaService.unregister(handle))\r\n    this.handles = []\r\n  }\r\n\r\n  async startContext(context: ContextState) {\r\n    await this.executeOperation(CONTEXT_OPERATIONS.start, context)\r\n  }\r\n\r\n  async suspendContext(context: ContextState) {\r\n    await this.executeOperation(CONTEXT_OPERATIONS.suspend, context)\r\n  }\r\n\r\n  async stopContext(context: ContextState) {\r\n    await this.executeOperation(CONTEXT_OPERATIONS.stop, context)\r\n  }\r\n\r\n  private executeOperation(operation: string, context: ContextState): Promise<unknown> {\r\n    const { objectName } = context.node\r\n    if (!objectName) {\r\n      throw new Error('ObjectName for the context must be provided')\r\n    }\r\n    return jolokiaService.execute(objectName, operation)\r\n  }\r\n}\r\n\r\nexport const contextsService = new ContextsService()\r\n","export function moveElement<T>(target: T[], value: T, dest: number) {\r\n  const idx = target.indexOf(value)\r\n  if (idx < 0) return // Nothing to do\r\n\r\n  target.splice(idx, 1)\r\n  target.splice(dest, 0, value)\r\n}\r\n\r\nexport function compareArrays<T>(a: T[], b: T[]): boolean {\r\n  if (a.length !== b.length) return false\r\n\r\n  for (const v of a) {\r\n    if (!b.includes(v)) return false\r\n  }\r\n\r\n  return true\r\n}\r\n","import { HawtioLoadingCard, MBeanNode } from '@hawtiosrc/plugins/shared'\r\nimport { compareArrays } from '@hawtiosrc/util/arrays'\r\nimport { isBlank } from '@hawtiosrc/util/strings'\r\nimport { childText, parseXML } from '@hawtiosrc/util/xml'\r\nimport {\r\n  Button,\r\n  PanelMainBody,\r\n  Text,\r\n  Toolbar,\r\n  ToolbarContent,\r\n  ToolbarItem,\r\n  PanelHeader,\r\n  PanelMain,\r\n  Panel,\r\n  Title,\r\n} from '@patternfly/react-core'\r\nimport {\r\n  BanIcon,\r\n  BarsIcon,\r\n  ExclamationCircleIcon,\r\n  LongArrowAltDownIcon,\r\n  MinusIcon,\r\n  PlayIcon,\r\n  PlusCircleIcon,\r\n  PlusIcon,\r\n  TimesCircleIcon,\r\n} from '@patternfly/react-icons'\r\nimport { TableComposable, Tbody, Td, Th, Thead, Tr } from '@patternfly/react-table'\r\nimport { Response } from 'jolokia.js'\r\nimport React, { useCallback, useContext, useEffect, useRef, useState } from 'react'\r\nimport * as camelService from '../camel-service'\r\nimport { CamelContext } from '../context'\r\nimport { log } from '../globals'\r\nimport { RouteDiagram } from '../route-diagram/RouteDiagram'\r\nimport { Annotation, RouteDiagramContext, useRouteDiagramContext } from '../route-diagram/context'\r\nimport { CamelNodeData } from '../route-diagram/visualization-service'\r\nimport { ConditionalBreakpointModal } from './ConditionalBreakpointModel'\r\nimport './Debug.css'\r\nimport { MessageDrawer } from './MessageDrawer'\r\nimport { ConditionalBreakpoint, MessageData, debugService } from './debug-service'\r\n\r\nexport const Debug: React.FunctionComponent = () => {\r\n  const { selectedNode } = useContext(CamelContext)\r\n  const {\r\n    graphNodeData,\r\n    setGraphNodeData,\r\n    graphSelection,\r\n    setGraphSelection,\r\n    setShowStatistics,\r\n    doubleClickAction,\r\n    setDoubleClickAction,\r\n    annotations,\r\n    setAnnotations,\r\n  } = useRouteDiagramContext()\r\n  const [isReading, setIsReading] = useState(true)\r\n  const [isDebugging, setIsDebugging] = useState(false)\r\n  const [breakpoints, setBreakpoints] = useState<string[]>([])\r\n  const [suspendedBreakpoints, setSuspendedBreakpoints] = useState<string[]>([])\r\n  const [breakpointCounter, setBreakpointCounter] = useState(0)\r\n  const [isConditionalBreakpointOpen, setIsConditionalBreakpointOpen] = useState(false)\r\n  const [messages, setMessages] = useState<MessageData[]>([])\r\n  const [debugPanelExpanded, setDebugPanelExpanded] = React.useState(false)\r\n  const breakpointsRef = useRef<string[]>([])\r\n\r\n  const applyBreakpoints = useCallback((response: unknown) => {\r\n    if (!Array.isArray(response)) {\r\n      breakpointsRef.current = []\r\n      setBreakpoints([])\r\n      return\r\n    }\r\n\r\n    const responseArr: string[] = response as string[]\r\n    if (compareArrays(breakpointsRef.current, responseArr)) return\r\n\r\n    const breakpoints = [...responseArr]\r\n    breakpointsRef.current = breakpoints\r\n    setBreakpoints(breakpoints)\r\n  }, [])\r\n\r\n  /**\r\n   * Callback function that updates breakpoint counter and suspended\r\n   * breakpoints from info transmitted by JMX nodes\r\n   */\r\n  const applyBreakpointCounter = useCallback(\r\n    async (counter: number, routeNode: MBeanNode) => {\r\n      if (!counter || counter === breakpointCounter) return\r\n\r\n      setBreakpointCounter(counter)\r\n      const suspendedBkps = await debugService.getSuspendedBreakpointIds(routeNode)\r\n      log.debug('Debug - suspended breakpoints:', suspendedBkps)\r\n      setSuspendedBreakpoints(suspendedBkps)\r\n      if (suspendedBkps.length === 0) {\r\n        setDebugPanelExpanded(false)\r\n        return\r\n      }\r\n      const suspendedBreakpoint = suspendedBkps[0]\r\n      if (!suspendedBreakpoint) {\r\n        return\r\n      }\r\n      setGraphSelection(suspendedBreakpoint)\r\n\r\n      const msgs = await debugService.getTracedMessages(routeNode, suspendedBreakpoint)\r\n      log.debug('Debug - messages as XML:', msgs)\r\n      if (isBlank(msgs)) {\r\n        log.warn('Debug - dumpTracedMessagesAsXml() returned no results!')\r\n        return\r\n      }\r\n      const xmlDoc = parseXML(msgs)\r\n      const allMessages = xmlDoc.getElementsByTagName('backlogTracerEventMessage')\r\n\r\n      const messages: MessageData[] = []\r\n      for (const message of Array.from(allMessages)) {\r\n        const msgData = debugService.createMessageFromXml(message)\r\n        if (!msgData) continue\r\n\r\n        const toNode = childText(message, 'toNode')\r\n        if (toNode) msgData.toNode = toNode\r\n\r\n        messages.push(msgData)\r\n      }\r\n      log.debug('Debug - messages:', messages)\r\n\r\n      setMessages(messages)\r\n    },\r\n    [breakpointCounter, setGraphSelection],\r\n  )\r\n\r\n  /**\r\n   * Handler for the addition of a breakpoint\r\n   */\r\n  const handleAddBreakpoint = useCallback(\r\n    async (contextNode: MBeanNode, breakpointId: string) => {\r\n      const result = await debugService.addBreakpoint(contextNode, breakpointId)\r\n      if (result) {\r\n        const result = await debugService.getBreakpoints(contextNode)\r\n        applyBreakpoints(result)\r\n      }\r\n    },\r\n    [applyBreakpoints],\r\n  )\r\n\r\n  /**\r\n   * Handle for the addition of a conditional breakpoint\r\n   */\r\n  const handleAddConditionalBreakpoint = async (contextNode: MBeanNode, breakpoint: ConditionalBreakpoint) => {\r\n    const result = await debugService.addConditionalBreakpoint(contextNode, breakpoint)\r\n    if (result) {\r\n      const result = await debugService.getBreakpoints(contextNode)\r\n      applyBreakpoints(result)\r\n    }\r\n    setIsConditionalBreakpointOpen(false)\r\n  }\r\n\r\n  /**\r\n   * Handler for the removal of a breakpoint\r\n   */\r\n  const handleRemoveBreakpoint = useCallback(\r\n    async (contextNode: MBeanNode, breakpointId: string) => {\r\n      const result = await debugService.removeBreakpoint(contextNode, breakpointId)\r\n      if (result) {\r\n        const result = await debugService.getBreakpoints(contextNode)\r\n        applyBreakpoints(result)\r\n      }\r\n    },\r\n    [applyBreakpoints],\r\n  )\r\n\r\n  /**\r\n   * Action executed when node in diagram is clicked\r\n   */\r\n  const doubleClickNodeAction = useCallback((): ((nodeData: CamelNodeData) => void) => {\r\n    return async (nodeData: CamelNodeData) => {\r\n      if (!selectedNode) return\r\n\r\n      if (nodeData.routeIdx === 0) {\r\n        camelService.notifyError('Cannot breakpoint on the first node in the route')\r\n        return\r\n      }\r\n\r\n      const bkps = await debugService.getBreakpoints(selectedNode)\r\n      if (bkps.includes(nodeData.cid)) {\r\n        handleRemoveBreakpoint(selectedNode, nodeData.cid)\r\n      } else handleAddBreakpoint(selectedNode, nodeData.cid)\r\n    }\r\n  }, [selectedNode, handleAddBreakpoint, handleRemoveBreakpoint])\r\n\r\n  const createAnnotation = useCallback((breakpointId: string, bkps: string[], suspendedBkps: string[]): Annotation => {\r\n    const element: JSX.Element = (\r\n      <div className='breakpoint-symbol'>\r\n        {suspendedBkps.includes(breakpointId) && <LongArrowAltDownIcon />}\r\n        {bkps.includes(breakpointId) && <ExclamationCircleIcon />}\r\n      </div>\r\n    )\r\n\r\n    return {\r\n      nodeId: breakpointId,\r\n      element: element,\r\n    }\r\n  }, [])\r\n\r\n  /**\r\n   * Called when isDebugging is changed to reload breakpoint properties\r\n   */\r\n  const reloadBreakpointChanges = useCallback(\r\n    async (isDebugging: boolean, contextNode: MBeanNode) => {\r\n      // Unregister old handles\r\n      debugService.unregisterAll()\r\n\r\n      const debugNode = debugService.getDebugBean(contextNode)\r\n      if (!debugNode || !debugNode.objectName) return\r\n\r\n      if (isDebugging) {\r\n        const result = await debugService.getBreakpoints(contextNode)\r\n        applyBreakpoints(result)\r\n\r\n        const bc = await debugService.getBreakpointCounter(contextNode)\r\n        applyBreakpointCounter(bc, contextNode)\r\n\r\n        /*\r\n         * Sets up polling and updating of counter when it changes\r\n         */\r\n        debugService.register(\r\n          {\r\n            type: 'exec',\r\n            mbean: debugNode.objectName,\r\n            operation: 'getDebugCounter',\r\n          },\r\n          (response: Response) => {\r\n            log.debug('Scheduler - Debug:', response.value)\r\n            applyBreakpointCounter(response?.value as number, contextNode)\r\n          },\r\n        )\r\n      } else {\r\n        setBreakpoints([])\r\n        setSuspendedBreakpoints([])\r\n        setBreakpointCounter(0)\r\n      }\r\n    },\r\n    [applyBreakpointCounter, applyBreakpoints],\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (!selectedNode) return\r\n\r\n    setIsReading(true)\r\n\r\n    // Turn off statistics display in diagram view\r\n    setShowStatistics(false)\r\n    setDoubleClickAction(doubleClickNodeAction)\r\n\r\n    debugService.isDebugging(selectedNode).then((value: boolean) => {\r\n      setIsDebugging(value)\r\n      reloadBreakpointChanges(value, selectedNode)\r\n      setIsReading(false)\r\n    })\r\n  }, [selectedNode, doubleClickNodeAction, setDoubleClickAction, setShowStatistics, reloadBreakpointChanges])\r\n\r\n  useEffect(() => {\r\n    const annotations: Annotation[] = []\r\n    for (const breakpointId of breakpoints) {\r\n      annotations.push(createAnnotation(breakpointId, breakpoints, suspendedBreakpoints))\r\n    }\r\n\r\n    for (const breakpointId of suspendedBreakpoints) {\r\n      annotations.push(createAnnotation(breakpointId, breakpoints, suspendedBreakpoints))\r\n    }\r\n\r\n    setAnnotations(annotations)\r\n  }, [breakpoints, suspendedBreakpoints, createAnnotation, setAnnotations])\r\n\r\n  if (!selectedNode) {\r\n    return null\r\n  }\r\n\r\n  if (isReading) {\r\n    return <HawtioLoadingCard />\r\n  }\r\n\r\n  /**\r\n   * Is the given breakpoint id, the first node in the route\r\n   */\r\n  const isFirstGraphNode = (breakpointId: string): boolean => {\r\n    const firstNodeData = graphNodeData?.at(0)\r\n    if (!firstNodeData) return false\r\n\r\n    return firstNodeData.cid === breakpointId\r\n  }\r\n\r\n  /**\r\n   * Does the breakpoints array contain the given node id\r\n   */\r\n  const isBreakpointSet = (nodeId: string): boolean => {\r\n    if (!nodeId || nodeId.length === 0 || breakpoints.length === 0) return false\r\n    return breakpoints.indexOf(nodeId) !== -1\r\n  }\r\n\r\n  /*********************************\r\n   *\r\n   * Function for determining if toolbars buttons should displayed\r\n   *\r\n   *********************************/\r\n  const hasSelectedBreakpoint = (): boolean => {\r\n    if (!graphSelection) return false\r\n\r\n    return isBreakpointSet(graphSelection)\r\n  }\r\n\r\n  /*********************************\r\n   *\r\n   * Function for determining if toolbar buttons should be disabled\r\n   *\r\n   *********************************/\r\n  const shouldDisableAddBreakpoint = () => {\r\n    return !graphSelection ? true : isFirstGraphNode(graphSelection)\r\n  }\r\n\r\n  /*********************************\r\n   *\r\n   * Functions called by events handlers in toolbar\r\n   *\r\n   *********************************/\r\n  const onDebugging = async () => {\r\n    log.debug('Debug -', isDebugging ? 'stop' : 'start', 'debugging')\r\n    const result = await debugService.setDebugging(selectedNode, !isDebugging)\r\n    setIsDebugging(result)\r\n    reloadBreakpointChanges(result, selectedNode)\r\n  }\r\n\r\n  const onAddBreakpoint = () => {\r\n    log.debug('Debug - add breakpoint')\r\n    if (!graphSelection || isFirstGraphNode(graphSelection)) return\r\n    handleAddBreakpoint(selectedNode, graphSelection)\r\n  }\r\n\r\n  const onRemoveBreakpoint = () => {\r\n    log.debug('Debug - remove breakpoint')\r\n    if (!hasSelectedBreakpoint()) return\r\n    handleRemoveBreakpoint(selectedNode, graphSelection)\r\n  }\r\n\r\n  const onAddConditionalBreakpointToggle = () => {\r\n    setIsConditionalBreakpointOpen(!isConditionalBreakpointOpen)\r\n  }\r\n\r\n  const onStep = async () => {\r\n    log.debug('Debug - step')\r\n    if (!suspendedBreakpoints || suspendedBreakpoints.length === 0) return\r\n\r\n    const suspendedBreakpoint = suspendedBreakpoints[0]\r\n    if (!suspendedBreakpoint) return\r\n\r\n    const result = await debugService.stepBreakpoint(selectedNode, suspendedBreakpoint)\r\n    log.debug('Debug - next breakpoint:', result)\r\n    reloadBreakpointChanges(isDebugging, selectedNode)\r\n  }\r\n\r\n  const onResume = () => {\r\n    log.debug('Debug - resume')\r\n    debugService.resume(selectedNode)\r\n    setMessages([])\r\n    setSuspendedBreakpoints([])\r\n  }\r\n\r\n  /**\r\n   * Button callback for opening and closing the message panel drawer\r\n   */\r\n  const onDebugPanelToggle = () => {\r\n    setDebugPanelExpanded(!debugPanelExpanded)\r\n  }\r\n\r\n  /**\r\n   * Extra panel to add to the drawer slide-in\r\n   */\r\n  const debugPanelBreakpointsTab = () => (\r\n    <TableComposable key='breakpoints' aria-label='Breakpoints table' variant='compact'>\r\n      <Thead>\r\n        <Tr>\r\n          <Th>Breakpoint</Th>\r\n          <Th>Remove</Th>\r\n        </Tr>\r\n      </Thead>\r\n      <Tbody>\r\n        {breakpoints.map(breakpoint => (\r\n          <Tr key={breakpoint}>\r\n            <Td dataLabel='Breakpoint'>{breakpoint}</Td>\r\n            <Td dataLabel='Remove'>\r\n              <Button\r\n                variant='plain'\r\n                isSmall\r\n                icon={<TimesCircleIcon />}\r\n                onClick={() => handleRemoveBreakpoint(selectedNode, breakpoint)}\r\n              ></Button>\r\n            </Td>\r\n          </Tr>\r\n        ))}\r\n      </Tbody>\r\n    </TableComposable>\r\n  )\r\n\r\n  const toolbarButtons = (\r\n    <React.Fragment>\r\n      {hasSelectedBreakpoint() && (\r\n        <ToolbarItem spacer={{ default: 'spacerSm' }} title='Remove the breakpoint on the selected node'>\r\n          <Button\r\n            variant='secondary'\r\n            isSmall\r\n            icon={<MinusIcon />}\r\n            isDisabled={!graphSelection}\r\n            onClick={onRemoveBreakpoint}\r\n          >\r\n            Remove breakpoint\r\n          </Button>\r\n        </ToolbarItem>\r\n      )}\r\n      {!hasSelectedBreakpoint() && (\r\n        <React.Fragment>\r\n          <ToolbarItem spacer={{ default: 'spacerSm' }} title='Add a breakpoint on the selected node'>\r\n            <Button\r\n              variant='secondary'\r\n              isSmall\r\n              icon={<PlusIcon />}\r\n              isDisabled={shouldDisableAddBreakpoint()}\r\n              onClick={onAddBreakpoint}\r\n            >\r\n              Add breakpoint\r\n            </Button>\r\n          </ToolbarItem>\r\n          <ToolbarItem spacer={{ default: 'spacerSm' }} title='Add a conditional breakpoint on the selected node'>\r\n            <Button\r\n              variant='secondary'\r\n              isSmall\r\n              icon={<PlusCircleIcon />}\r\n              isDisabled={shouldDisableAddBreakpoint()}\r\n              onClick={onAddConditionalBreakpointToggle}\r\n            >\r\n              Add conditional breakpoint\r\n            </Button>\r\n          </ToolbarItem>\r\n        </React.Fragment>\r\n      )}\r\n      <ToolbarItem variant='separator' spacer={{ default: 'spacerSm' }} />\r\n      <ToolbarItem spacer={{ default: 'spacerSm' }} title='Step into the next node'>\r\n        <Button\r\n          variant='secondary'\r\n          isSmall\r\n          icon={<LongArrowAltDownIcon />}\r\n          isDisabled={suspendedBreakpoints.length === 0}\r\n          onClick={onStep}\r\n        >\r\n          Step\r\n        </Button>\r\n      </ToolbarItem>\r\n      <ToolbarItem spacer={{ default: 'spacerSm' }} title='Resume running'>\r\n        <Button\r\n          variant='secondary'\r\n          isSmall\r\n          icon={<PlayIcon />}\r\n          isDisabled={suspendedBreakpoints.length === 0}\r\n          onClick={onResume}\r\n        >\r\n          Resume\r\n        </Button>\r\n      </ToolbarItem>\r\n      {suspendedBreakpoints.length > 0 && (\r\n        <React.Fragment>\r\n          <ToolbarItem variant='separator' spacer={{ default: 'spacerSm' }} />\r\n          <ToolbarItem spacer={{ default: 'spacerSm' }} title='Show Debug Panel'>\r\n            <Button\r\n              variant='secondary'\r\n              isSmall\r\n              icon={<BarsIcon />}\r\n              isDisabled={suspendedBreakpoints.length === 0}\r\n              onClick={onDebugPanelToggle}\r\n            >\r\n              Details\r\n            </Button>\r\n          </ToolbarItem>\r\n        </React.Fragment>\r\n      )}\r\n    </React.Fragment>\r\n  )\r\n\r\n  return (\r\n    <Panel>\r\n      <PanelHeader id='debug-header-container'>\r\n        <Title headingLevel='h3'>Debug</Title>\r\n        <Button\r\n          variant='primary'\r\n          isSmall\r\n          icon={!isDebugging ? React.createElement(PlayIcon) : React.createElement(BanIcon)}\r\n          onClick={onDebugging}\r\n          isDisabled={!camelService.canGetBreakpoints(selectedNode)}\r\n        >\r\n          {!isDebugging ? 'Start Debugging' : 'Stop Debugging'}\r\n        </Button>\r\n      </PanelHeader>\r\n      <PanelMain>\r\n        <PanelMainBody>\r\n          {!isDebugging && (\r\n            <Text data-testid='no-debugging' component='p'>\r\n              Debugging allows you to step through camel routes to diagnose issues.\r\n            </Text>\r\n          )}\r\n          {isDebugging && (\r\n            <React.Fragment>\r\n              <Toolbar id='toolbar-items'>\r\n                <ToolbarContent>{toolbarButtons}</ToolbarContent>\r\n              </Toolbar>\r\n\r\n              <MessageDrawer\r\n                messages={messages}\r\n                expanded={debugPanelExpanded}\r\n                setExpanded={setDebugPanelExpanded}\r\n                extraPanel={{\r\n                  id: 'debug-panel-tab-breakpoints',\r\n                  label: 'Breakpoints',\r\n                  panelFn: debugPanelBreakpointsTab,\r\n                }}\r\n              >\r\n                <div id='route-diagram-breakpoint-view'>\r\n                  <RouteDiagramContext.Provider\r\n                    value={{\r\n                      graphNodeData,\r\n                      setGraphNodeData,\r\n                      graphSelection,\r\n                      setGraphSelection,\r\n                      setShowStatistics,\r\n                      doubleClickAction,\r\n                      setDoubleClickAction,\r\n                      annotations,\r\n                      setAnnotations,\r\n                    }}\r\n                  >\r\n                    <RouteDiagram />\r\n                  </RouteDiagramContext.Provider>\r\n                </div>\r\n              </MessageDrawer>\r\n            </React.Fragment>\r\n          )}\r\n          <ConditionalBreakpointModal\r\n            selectedNode={selectedNode}\r\n            selection={graphSelection}\r\n            isConditionalBreakpointOpen={isConditionalBreakpointOpen}\r\n            onAddConditionalBreakpointToggle={onAddConditionalBreakpointToggle}\r\n            addConditionalBreakpoint={handleAddConditionalBreakpoint}\r\n          />\r\n        </PanelMainBody>\r\n      </PanelMain>\r\n    </Panel>\r\n  )\r\n}\r\n","import { TableComposable, Tbody, Td, Tr } from '@patternfly/react-table'\r\nimport React, { useCallback, useContext, useEffect, useMemo, useState } from 'react'\r\nimport ReactFlow, {\r\n  Connection,\r\n  ConnectionLineType,\r\n  Handle,\r\n  Node,\r\n  NodeProps,\r\n  NodeToolbar,\r\n  Position,\r\n  addEdge,\r\n  useEdgesState,\r\n  useNodesState,\r\n} from 'reactflow'\r\nimport 'reactflow/dist/style.css'\r\nimport { camelPreferencesService } from '../camel-preferences-service'\r\nimport { CamelContext } from '../context'\r\nimport { routesService } from '../routes-service'\r\nimport './RouteDiagram.css'\r\nimport { Annotation, RouteDiagramContext } from './context'\r\nimport { CamelNodeData, visualizationService } from './visualization-service'\r\n\r\nexport const RouteDiagram: React.FunctionComponent = () => {\r\n  const { selectedNode } = useContext(CamelContext)\r\n  const { setGraphNodeData, graphSelection, setGraphSelection } = useContext(RouteDiagramContext)\r\n  const [nodes, setNodes, onNodesChange] = useNodesState([])\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState([])\r\n  const [statsXml, setStatsXml] = useState('')\r\n  const nodeTypes = useMemo(() => ({ camel: CamelNode }), [])\r\n\r\n  useEffect(() => {\r\n    if (!selectedNode) {\r\n      return\r\n    }\r\n\r\n    const xml = selectedNode.getMetadata('xml')\r\n    if (!xml) {\r\n      return\r\n    }\r\n\r\n    visualizationService.loadRouteXmlNodes(selectedNode, xml).then(({ camelNodes, edges }) => {\r\n      setGraphNodeData(camelNodes.map(camelNode => camelNode.data))\r\n\r\n      if (statsXml) {\r\n        visualizationService.updateStats(statsXml, camelNodes)\r\n      }\r\n      const { layoutedNodes, layoutedEdges } = visualizationService.getLayoutedElements(camelNodes, edges)\r\n\r\n      layoutedNodes.forEach(node => {\r\n        node.selected = graphSelection === node.data.cid\r\n      })\r\n\r\n      setEdges([...layoutedEdges])\r\n\r\n      if (statsXml) {\r\n        const nodesWithStats = visualizationService.updateStats(statsXml, layoutedNodes)\r\n        setNodes(nodesWithStats)\r\n      } else {\r\n        setNodes([...layoutedNodes])\r\n      }\r\n    })\r\n  }, [selectedNode, setEdges, setNodes, statsXml, setGraphNodeData, graphSelection])\r\n\r\n  useEffect(() => {\r\n    const fetchStats = async () => {\r\n      if (selectedNode) {\r\n        const xml = await routesService.dumpRoutesStatsXML(selectedNode)\r\n        if (xml) {\r\n          setStatsXml(xml)\r\n        }\r\n      }\r\n    }\r\n    // fetch for the first time\r\n    fetchStats()\r\n    // fetch periodically\r\n    const interval = setInterval(() => fetchStats(), 2000)\r\n    return () => clearInterval(interval)\r\n  }, [selectedNode])\r\n\r\n  const onConnect = useCallback(\r\n    (params: Connection) =>\r\n      setEdges(eds => addEdge({ ...params, type: ConnectionLineType.SmoothStep, animated: true }, eds)),\r\n    [setEdges],\r\n  )\r\n\r\n  if (!selectedNode) {\r\n    return null\r\n  }\r\n\r\n  const onNodeClick = (_event: React.MouseEvent, node: Node) => {\r\n    setGraphSelection(node.data.cid)\r\n  }\r\n\r\n  return (\r\n    <div className='camel-route-diagram'>\r\n      <ReactFlow\r\n        nodeTypes={nodeTypes}\r\n        nodes={nodes}\r\n        edges={edges}\r\n        connectionLineType={ConnectionLineType.SmoothStep}\r\n        onNodesChange={onNodesChange}\r\n        onEdgesChange={onEdgesChange}\r\n        onConnect={onConnect}\r\n        fitView={true}\r\n        elementsSelectable={true}\r\n        onNodeClick={onNodeClick}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst CamelNode: React.FunctionComponent<NodeProps<CamelNodeData>> = ({\r\n  data,\r\n  selected,\r\n  sourcePosition,\r\n  targetPosition,\r\n}) => {\r\n  const { showStatistics, doubleClickAction, annotations } = useContext(RouteDiagramContext)\r\n  const [isVisible, setVisible] = useState(false)\r\n  const [showFull] = useState(false)\r\n  const [annotation, setAnnotation] = useState<Annotation | undefined>(undefined)\r\n\r\n  const { showInflightCounter } = camelPreferencesService.loadOptions()\r\n\r\n  useEffect(() => {\r\n    if (!annotations || annotations.length === 0) {\r\n      setAnnotation(undefined)\r\n      return\r\n    }\r\n\r\n    const ann = annotations.find(a => a.nodeId === data.cid)\r\n    setAnnotation(ann)\r\n  }, [annotations, data.cid])\r\n\r\n  const handleDoubleClick = (e: React.MouseEvent<HTMLDivElement>) => {\r\n    if (!doubleClickAction) return\r\n\r\n    doubleClickAction(data)\r\n  }\r\n\r\n  const truncate = (label: string) => {\r\n    const newline = label.indexOf('\\n')\r\n    if (label.length < 20 && newline === -1) return label\r\n\r\n    const newLabel = label.replace('\\n', ' ')\r\n    return newLabel.substring(0, 17) + '...'\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={'camel-node-content' + (selected ? ' highlighted' : '')}\r\n      onMouseEnter={() => {\r\n        if (showStatistics) setVisible(true)\r\n      }}\r\n      onMouseLeave={() => {\r\n        if (showStatistics) setVisible(false)\r\n      }}\r\n      onDoubleClick={handleDoubleClick}\r\n    >\r\n      <Handle type='target' position={targetPosition ?? Position.Top} />\r\n      <Handle type='source' position={sourcePosition ?? Position.Bottom} id='a' />\r\n\r\n      <div className='annotation'>{annotation?.element}</div>\r\n      <div className='icon'>{data.imageUrl}</div>\r\n      <div className='inflights'>{showInflightCounter && data.stats?.exchangesInflight}</div>\r\n      <div className='number'>{data.stats?.exchangesCompleted}</div>\r\n      <div className='camel-node-label'> {truncate(data.label)}</div>\r\n\r\n      {showStatistics && (\r\n        <NodeToolbar isVisible={isVisible} position={Position.Bottom} style={{ marginTop: '-30px' }}>\r\n          <div className={'node-tooltip'}>\r\n            {!data.stats && data.label}\r\n            {data.stats && !showFull && (\r\n              <TableComposable variant={'compact'}>\r\n                <Tbody style={{ fontSize: 'xx-small' }}>\r\n                  <Tr>\r\n                    <Td>ID</Td>\r\n                    <Td>{data.stats.id}</Td>\r\n                  </Tr>\r\n                  <Tr>\r\n                    <Td>Completed</Td>\r\n                    <Td>{data.stats?.exchangesCompleted}</Td>\r\n                  </Tr>\r\n                  <Tr>\r\n                    <Td>Inflight</Td>\r\n                    <Td>{data.stats?.exchangesInflight}</Td>\r\n                  </Tr>\r\n                  <Tr>\r\n                    <Td>Last</Td>\r\n                    <Td>{data.stats?.lastProcessingTime} (ms)</Td>\r\n                  </Tr>\r\n                  <Tr>\r\n                    <Td>Mean</Td>\r\n                    <Td>{data.stats?.meanProcessingTime} (ms)</Td>\r\n                  </Tr>\r\n                  <Tr>\r\n                    <Td>Mix</Td>\r\n                    <Td>{data.stats?.minProcessingTime} (ms)</Td>\r\n                  </Tr>\r\n                  <Tr>\r\n                    <Td>Max</Td>\r\n                    <Td>{data.stats?.maxProcessingTime} (ms)</Td>\r\n                  </Tr>\r\n                </Tbody>\r\n              </TableComposable>\r\n            )}\r\n\r\n            {data.stats && showFull && (\r\n              //TODO finish full statistics\r\n              <TableComposable variant={'compact'}>\r\n                <Tbody style={{ fontSize: 'xx-small' }}>\r\n                  {Object.entries(data.stats).map(s => {\r\n                    return (\r\n                      <Tr key={s[0]}>\r\n                        <Td>{s[0]}</Td>\r\n                        <Td>{s[1]}</Td>\r\n                      </Tr>\r\n                    )\r\n                  })}\r\n                </Tbody>\r\n              </TableComposable>\r\n            )}\r\n          </div>\r\n        </NodeToolbar>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n","export type CamelOptions = {\r\n  // Route diagram\r\n  ignoreIdForLabel: boolean\r\n  showInflightCounter: boolean\r\n  maximumLabelWidth: number\r\n\r\n  // Trace / debug\r\n  maximumTraceOrDebugBodyLength: number\r\n  traceOrDebugIncludeStreams: boolean\r\n}\r\n\r\nexport const DEFAULT_OPTIONS: CamelOptions = {\r\n  ignoreIdForLabel: false,\r\n  showInflightCounter: true,\r\n  maximumLabelWidth: 34,\r\n  maximumTraceOrDebugBodyLength: 5000,\r\n  traceOrDebugIncludeStreams: false,\r\n} as const\r\n\r\nexport const STORAGE_KEY_CAMEL_PREFERENCES = 'camel.preferences'\r\n\r\nexport interface ICamelPreferencesService {\r\n  loadOptions(): CamelOptions\r\n  saveOptions(newValues: Partial<CamelOptions>): void\r\n}\r\n\r\nclass CamelPreferencesService implements ICamelPreferencesService {\r\n  loadOptions(): CamelOptions {\r\n    return { ...DEFAULT_OPTIONS, ...this.loadFromStorage() }\r\n  }\r\n\r\n  saveOptions(newValues: Partial<CamelOptions>) {\r\n    const toSave = { ...this.loadFromStorage(), ...newValues }\r\n    localStorage.setItem(STORAGE_KEY_CAMEL_PREFERENCES, JSON.stringify(toSave))\r\n  }\r\n\r\n  private loadFromStorage(): Partial<CamelOptions> {\r\n    const item = localStorage.getItem(STORAGE_KEY_CAMEL_PREFERENCES)\r\n    return item ? JSON.parse(item) : {}\r\n  }\r\n}\r\n\r\nexport const camelPreferencesService = new CamelPreferencesService()\r\n","import { createContext, useState } from 'react'\r\nimport { CamelNodeData } from './visualization-service'\r\n\r\nconst noOpAction = (nodeData: CamelNodeData) => {\r\n  /* no-op */\r\n}\r\n\r\nexport function useRouteDiagramContext() {\r\n  const [graphNodeData, setGraphNodeData] = useState<CamelNodeData[]>([])\r\n  const [graphSelection, setGraphSelection] = useState<string>('')\r\n  const [showStatistics, setShowStatistics] = useState<boolean>(true)\r\n  const [doubleClickAction, setDoubleClickAction] = useState<(nodeData: CamelNodeData) => void>(noOpAction)\r\n  const [annotations, setAnnotations] = useState<Annotation[]>([])\r\n\r\n  return {\r\n    graphNodeData,\r\n    setGraphNodeData,\r\n    graphSelection,\r\n    setGraphSelection,\r\n    showStatistics,\r\n    setShowStatistics,\r\n    doubleClickAction,\r\n    setDoubleClickAction,\r\n    annotations,\r\n    setAnnotations,\r\n  }\r\n}\r\n\r\nexport type Annotation = {\r\n  nodeId: string\r\n  element: JSX.Element\r\n}\r\n\r\nexport type RouteDiagramContext = {\r\n  graphNodeData?: CamelNodeData[]\r\n  setGraphNodeData: (graphNodeData: CamelNodeData[]) => void\r\n  graphSelection?: string\r\n  setGraphSelection: (graphSelection: string) => void\r\n  showStatistics?: boolean\r\n  setShowStatistics?: (value: boolean) => void\r\n  doubleClickAction?: (nodeData: CamelNodeData) => void\r\n  setDoubleClickAction?: (fn: (nodeData: CamelNodeData) => void) => void\r\n  annotations?: Annotation[]\r\n  setAnnotations?: (annotations: Annotation[]) => void\r\n}\r\n\r\nexport const RouteDiagramContext = createContext<RouteDiagramContext>({\r\n  graphNodeData: [],\r\n  setGraphNodeData: (graphNodeData: CamelNodeData[]) => {\r\n    /* no-op */\r\n  },\r\n  graphSelection: '',\r\n  setGraphSelection: (graphSelection: string) => {\r\n    /* no-op */\r\n  },\r\n  showStatistics: true,\r\n  setShowStatistics: (value: boolean) => {\r\n    /* no-op */\r\n  },\r\n  doubleClickAction: (nodeData: CamelNodeData) => {\r\n    /* no-op */\r\n  },\r\n  setDoubleClickAction: (fn: (nodeData: CamelNodeData) => void) => {\r\n    /* no-op */\r\n  },\r\n  annotations: [],\r\n  setAnnotations: (annotations: Annotation[]) => {\r\n    /* no-op */\r\n  },\r\n})\r\n","import { routesService, RouteStats, Statistics } from '@hawtiosrc/plugins/camel/routes-service'\r\nimport { schemaService } from '@hawtiosrc/plugins/camel/schema-service'\r\nimport { MBeanNode } from '@hawtiosrc/plugins/shared'\r\nimport { parseXML } from '@hawtiosrc/util/xml'\r\nimport dagre from 'dagre'\r\nimport { ReactNode } from 'react'\r\nimport { Edge, MarkerType, Node, Position } from 'reactflow'\r\nimport { camelPreferencesService } from '../camel-preferences-service'\r\n\r\nexport type CamelNodeData = {\r\n  id: string\r\n  routeIdx: number\r\n  name: string\r\n  label: string\r\n  labelSummary: string\r\n  group: 1\r\n\r\n  elementId: string | null\r\n  imageUrl: ReactNode\r\n  cid: string\r\n  tooltip: string\r\n  type: string\r\n  uri: string\r\n  routeId: string\r\n  stats?: Statistics\r\n\r\n  nodeClicked?: (node: Node) => void\r\n}\r\n\r\nclass VisualizationService {\r\n  dagreGraph: dagre.graphlib.Graph\r\n  nodeWidth = 250\r\n  nodeHeight = 80\r\n  edgeType = 'smoothstep'\r\n  margin = {\r\n    left: 25,\r\n    top: 25,\r\n  }\r\n\r\n  constructor() {\r\n    this.dagreGraph = new dagre.graphlib.Graph()\r\n    this.dagreGraph.setDefaultEdgeLabel(() => ({}))\r\n  }\r\n\r\n  getLayoutedElements(\r\n    nodes: Node[],\r\n    edges: Edge[],\r\n    direction = 'TB',\r\n  ): { layoutedNodes: Node[]; layoutedEdges: Edge[] } {\r\n    const isHorizontal = direction === 'LR'\r\n    this.dagreGraph.setGraph({ rankdir: direction })\r\n\r\n    nodes.forEach(node => {\r\n      this.dagreGraph.setNode(node.id, { width: this.nodeWidth, height: this.nodeHeight })\r\n    })\r\n\r\n    edges.forEach(edge => {\r\n      this.dagreGraph.setEdge(edge.source, edge.target)\r\n    })\r\n    dagre.layout(this.dagreGraph)\r\n\r\n    nodes.forEach(node => {\r\n      const nodeWithPosition = this.dagreGraph.node(node.id)\r\n      node.targetPosition = isHorizontal ? Position.Left : Position.Top\r\n      node.sourcePosition = isHorizontal ? Position.Right : Position.Bottom\r\n\r\n      // We are shifting the dagre node position (anchor=center center) to the top left\r\n      // so it matches the React Flow node anchor point (top left).\r\n\r\n      node.position = {\r\n        x: nodeWithPosition.x - this.nodeWidth / 2 + this.margin.left,\r\n        y: nodeWithPosition.y - this.nodeHeight / 2 + this.margin.top,\r\n      }\r\n    })\r\n\r\n    return { layoutedNodes: nodes, layoutedEdges: edges }\r\n  }\r\n\r\n  getRouteNodeUri(node: Element): string | null {\r\n    if (!node) {\r\n      return null\r\n    }\r\n\r\n    const uri = node.getAttribute('uri')\r\n    if (uri) {\r\n      return uri\r\n    }\r\n\r\n    const ref = node.getAttribute('ref')\r\n    if (!ref) {\r\n      return null\r\n    }\r\n\r\n    const method = node.getAttribute('method')\r\n    return method ? `${ref}.${method}()` : `ref:${ref}`\r\n  }\r\n\r\n  async loadRouteXmlNodes(\r\n    node: MBeanNode,\r\n    xml: string,\r\n    selectedRouteId?: string,\r\n  ): Promise<{ camelNodes: Node[]; edges: Edge[] }> {\r\n    const nodes: CamelNodeData[] = []\r\n    const edges: Edge[] = []\r\n    const doc: XMLDocument = parseXML(xml)\r\n\r\n    const allRoutes = doc.getElementsByTagName('route')\r\n\r\n    for (const route of Array.from(allRoutes)) {\r\n      const routeId = route.id\r\n      if (!selectedRouteId || !routeId || selectedRouteId === routeId) {\r\n        await this.addRouteXmlChildren(node, route, nodes, edges, routeId, '')\r\n      }\r\n    }\r\n    // parse stats\r\n    const camelNodes = nodes.map(node => ({\r\n      id: node.id,\r\n      data: node,\r\n      position: {\r\n        x: 0,\r\n        y: 0,\r\n      },\r\n      type: 'camel',\r\n    }))\r\n\r\n    edges.forEach(edge => {\r\n      edge.markerEnd = { type: MarkerType.Arrow }\r\n      edge.type = this.edgeType\r\n      edge.animated = true\r\n    })\r\n    return { camelNodes, edges }\r\n  }\r\n\r\n  updateStats(statsXml: string, nodes: Node<CamelNodeData>[]): Node<CamelNodeData>[] {\r\n    const stats: RouteStats[] = routesService.processRoutesStats(statsXml)\r\n\r\n    return nodes.map(node => {\r\n      const routeStat = stats.find(s => s.id === node.data.routeId)\r\n      if (node.data.type === 'from') {\r\n        const newData = { ...node.data, stats: routeStat }\r\n        return { ...node, data: newData }\r\n      }\r\n      const pStats = routeStat?.processorStats.find(p => node.data.cid === p.id)\r\n      const newData = { ...node.data, stats: pStats }\r\n      return { ...node, data: newData }\r\n    })\r\n  }\r\n\r\n  async addRouteXmlChildren(\r\n    node: MBeanNode,\r\n    parent: Element,\r\n    nodeDatas: CamelNodeData[],\r\n    links: Edge[],\r\n    routeId: string,\r\n    parentId: string,\r\n    parentNode: CamelNodeData | null = null,\r\n  ): Promise<number[]> {\r\n    let rid = parent.getAttribute('id')\r\n    let siblingNodes: number[] = []\r\n    const parenNodeName: string = parent.localName\r\n\r\n    /*\r\n     * Whereas the id is unique across all routes in the xml, the\r\n     * routeIdx defines an id for each node in the route so\r\n     */\r\n    let routeIdx = -1\r\n    for (const route of Array.from(parent.children)) {\r\n      const id: string = nodeDatas.length + ''\r\n      routeIdx++\r\n      // from acts as a parent even though its a previous sibling :)\r\n      const nodeId = route.localName\r\n      if (nodeId === 'from' && parentId !== '-1') {\r\n        parentId = id\r\n      }\r\n      const nodeSettings = await schemaService.getSchema(node, nodeId)\r\n      let nodeData: CamelNodeData | null = null\r\n      if (nodeSettings) {\r\n        let label: string = (nodeSettings['title'] as string) || (nodeId as string)\r\n        const uri = this.getRouteNodeUri(route)\r\n        if (uri) {\r\n          label += ` ${uri.split('?')[0]}`\r\n        }\r\n        let tooltip = (nodeSettings['tooltip'] || nodeSettings['description'] || label) as string\r\n        if (uri) {\r\n          tooltip += ' ' + uri\r\n        }\r\n        const { ignoreIdForLabel, maximumLabelWidth } = camelPreferencesService.loadOptions()\r\n        const elementID = route.getAttribute('id')\r\n        let labelSummary = label\r\n        if (elementID) {\r\n          const customId = route.getAttribute('customId')\r\n          if (ignoreIdForLabel || !customId || customId === 'false') {\r\n            labelSummary = 'id: ' + elementID\r\n          } else {\r\n            label = elementID\r\n          }\r\n        }\r\n        // lets check if we need to trim the label\r\n        const length = label.length\r\n        if (length > maximumLabelWidth) {\r\n          labelSummary = label + '\\n\\n' + labelSummary\r\n          label = label.substring(0, maximumLabelWidth) + '..'\r\n        }\r\n        const imageUrl = await routesService.getIcon(node, nodeSettings)\r\n\r\n        if ((nodeId === 'from' || nodeId === 'to') && uri) {\r\n          const uriIdx = uri.indexOf(':')\r\n          if (uriIdx > 0) {\r\n            const componentScheme = uri.substring(0, uriIdx)\r\n            if (componentScheme) {\r\n              // const value = routesService.getIcon(componentScheme)\r\n              // if (value) {\r\n              //   imageUrl = Core.url(value)\r\n              // }\r\n            }\r\n          }\r\n        }\r\n\r\n        let cid = route.getAttribute('_cid') || route.getAttribute('id')\r\n        nodeData = {\r\n          id: id,\r\n          routeIdx: routeIdx,\r\n          name: nodeId,\r\n          label: label,\r\n          labelSummary: labelSummary,\r\n          group: 1,\r\n          elementId: elementID,\r\n          imageUrl: imageUrl,\r\n          cid: cid ?? id,\r\n          tooltip: tooltip,\r\n          type: nodeId,\r\n          uri: uri ?? '',\r\n          routeId: routeId,\r\n        }\r\n        if (rid) {\r\n          nodeData.cid = rid\r\n        }\r\n        if (!cid) {\r\n          cid = nodeId + (nodeDatas.length + 1)\r\n        }\r\n        if (cid) {\r\n          nodeData.cid = cid\r\n        }\r\n        // only use the route id on the first from node\r\n        rid = null\r\n        nodeDatas.push(nodeData)\r\n        if (parentId !== null && parentId !== id) {\r\n          if (siblingNodes.length === 0 || parenNodeName === 'choice') {\r\n            links.push({ id: parentId + '-' + id, source: parentId + '', target: id })\r\n          } else {\r\n            siblingNodes.forEach(function (nodeId) {\r\n              links.push({ id: nodeId + '-' + id, source: nodeId + '', target: id })\r\n            })\r\n            siblingNodes.length = 0\r\n          }\r\n        }\r\n      } else {\r\n        // ignore non EIP nodes, though we should add expressions...\r\n        const langSettings = { name: 'sfd' } // Camel.camelLanguageSettings(nodeId)\r\n        if (langSettings && parentNode) {\r\n          // lets add the language kind\r\n          const name = langSettings['name'] || nodeId\r\n          const text = route.textContent\r\n\r\n          if (text) {\r\n            parentNode.tooltip = parentNode.label + ' ' + name + ' ' + text\r\n            parentNode.label += ': ' + this.appendLabel(route, text, true)\r\n          } else {\r\n            parentNode.label += ': ' + this.appendLabel(route, name, false)\r\n          }\r\n        }\r\n      }\r\n\r\n      const siblings = await this.addRouteXmlChildren(node, route, nodeDatas, links, routeId, id, nodeData)\r\n      if (parenNodeName === 'choice') {\r\n        siblingNodes = siblingNodes.concat(siblings)\r\n      } else if (\r\n        nodeId === 'aggregate' ||\r\n        nodeId === 'choice' ||\r\n        nodeId === 'delay' ||\r\n        nodeId === 'filter' ||\r\n        nodeId === 'loadBalance' ||\r\n        nodeId === 'loop' ||\r\n        nodeId === 'multicast' ||\r\n        nodeId === 'resequence' ||\r\n        nodeId === 'split' ||\r\n        nodeId === 'doTry' ||\r\n        nodeId === 'doCatch' ||\r\n        nodeId === 'doFinally' ||\r\n        nodeId === 'idempotentConsumer' ||\r\n        nodeId === 'onCompletion'\r\n      ) {\r\n        siblingNodes = siblings\r\n      } else {\r\n        siblingNodes = [nodeDatas.length - 1]\r\n      }\r\n    }\r\n    return siblingNodes\r\n  }\r\n\r\n  appendLabel(route: Element, label: string, text: boolean): string {\r\n    switch (route.localName) {\r\n      case 'method':\r\n        if (!text) {\r\n          if (route.getAttribute('bean')) {\r\n            label += ' ' + route.getAttribute('bean')\r\n          } else if (route.getAttribute('ref')) {\r\n            label += ' ' + route.getAttribute('ref')\r\n          } else if (route.getAttribute('beanType')) {\r\n            label += ' ' + route.getAttribute('beanType')\r\n          }\r\n        }\r\n        if (route.getAttribute('method')) {\r\n          label += ' ' + route.getAttribute('method')\r\n        }\r\n        break\r\n      default:\r\n    }\r\n    return label\r\n  }\r\n}\r\n\r\nexport const visualizationService = new VisualizationService()\r\n","import { MBeanNode } from '@hawtiosrc/plugins/shared'\r\nimport { Button, Form, FormGroup, Modal, ModalVariant, Popover, Radio, TextInput } from '@patternfly/react-core'\r\nimport { useState } from 'react'\r\nimport { ConditionalBreakpoint, debugService as ds } from './debug-service'\r\nimport { ExclamationCircleIcon, HelpIcon } from '@patternfly/react-icons'\r\n\r\ninterface CondBkpsProps {\r\n  selectedNode: MBeanNode\r\n  selection: string\r\n  isConditionalBreakpointOpen: boolean\r\n  onAddConditionalBreakpointToggle: () => void\r\n  addConditionalBreakpoint: (contextNode: MBeanNode, breakpoint: ConditionalBreakpoint) => void\r\n}\r\n\r\nexport const ConditionalBreakpointModal: React.FunctionComponent<CondBkpsProps> = (props: CondBkpsProps) => {\r\n  const [language, setLanguage] = useState<string>('')\r\n  const [predicate, setPredicate] = useState<string>('')\r\n  const [error, setError] = useState<string | null>()\r\n\r\n  const createBreakpoint = async () => {\r\n    const bkp: ConditionalBreakpoint = {\r\n      nodeId: props.selection,\r\n      language: language,\r\n      predicate: predicate,\r\n    }\r\n\r\n    setError(null)\r\n\r\n    const invalid = await ds.validateConditionalBreakpoint(props.selectedNode, bkp)\r\n    if (!invalid) {\r\n      // returns null if valid\r\n      props.addConditionalBreakpoint(props.selectedNode, bkp)\r\n    } else setError(invalid)\r\n  }\r\n\r\n  const helpLanguageChoice = (type: string): JSX.Element => {\r\n    const camelLink = 'https://camel.apache.org/components/latest/languages/' + type + '-language.html'\r\n    return (\r\n      <div>\r\n        <p>Specify the breakpoint condition as a language predicate of {type} type.</p>\r\n        <br />\r\n        <p>\r\n          See the &nbsp;\r\n          <a target='_blank' href={camelLink} rel='noreferrer'>\r\n            camel documentation\r\n          </a>\r\n          &nbsp; for more information.\r\n        </p>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      variant={ModalVariant.small}\r\n      title='Add Conditional Breakpoint'\r\n      titleIconVariant='default'\r\n      isOpen={props.isConditionalBreakpointOpen}\r\n      onClose={props.onAddConditionalBreakpointToggle}\r\n      actions={[\r\n        <Button key='unblock' variant='danger' data-testid='confirm-add' onClick={createBreakpoint}>\r\n          Add\r\n        </Button>,\r\n        <Button\r\n          key='cancel'\r\n          variant='link'\r\n          data-testid='confirm-cancel'\r\n          onClick={props.onAddConditionalBreakpointToggle}\r\n        >\r\n          Cancel\r\n        </Button>,\r\n      ]}\r\n    >\r\n      <Form id='cond-bkp-form' isHorizontal>\r\n        <FormGroup label='Language' isRequired isStack fieldId='cond-bkp-form-lang'>\r\n          <div>\r\n            <Radio\r\n              label='Simple'\r\n              id='cond-bkp-form-lang-simple'\r\n              className='cond-bkp-form-lang-radio'\r\n              name='simple'\r\n              isChecked={language === 'simple'}\r\n              onChange={() => setLanguage('simple')}\r\n            />\r\n            <Popover bodyContent={helpLanguageChoice('simple')}>\r\n              <Button className='cond-bkp-form-lang-radio-help' variant='plain' isSmall icon={<HelpIcon />} />\r\n            </Popover>\r\n          </div>\r\n          <div>\r\n            <Radio\r\n              label='XPath'\r\n              id='cond-bkp-form-lang-xpath'\r\n              className='cond-bkp-form-lang-radio'\r\n              name='xpath'\r\n              isChecked={language === 'xpath'}\r\n              description=''\r\n              onChange={() => setLanguage('xpath')}\r\n            />\r\n            <Popover bodyContent={helpLanguageChoice('xpath')}>\r\n              <Button className='cond-bkp-form-lang-radio-help' variant='plain' isSmall icon={<HelpIcon />} />\r\n            </Popover>\r\n          </div>\r\n        </FormGroup>\r\n        <FormGroup label='Predicate' isRequired fieldId='cond-bkp-form-pred'>\r\n          <TextInput\r\n            id='cond-bkp-form-pred-input'\r\n            isRequired\r\n            isDisabled={!language || language.length === 0}\r\n            type='text'\r\n            value={predicate}\r\n            onChange={value => setPredicate(value)}\r\n          />\r\n        </FormGroup>\r\n        {error && (\r\n          <div className='cond-bkp-form-error'>\r\n            <ExclamationCircleIcon className='cond-bkp-form-error-icon' />\r\n            <p className='cond-bkp-form-error-msg'>{error}</p>\r\n          </div>\r\n        )}\r\n      </Form>\r\n    </Modal>\r\n  )\r\n}\r\n","import { MBeanNode, jolokiaService } from '@hawtiosrc/plugins/shared'\r\nimport { isBlank } from '@hawtiosrc/util/strings'\r\nimport { childText, xmlText } from '@hawtiosrc/util/xml'\r\nimport { Request, Response } from 'jolokia.js'\r\nimport { camelPreferencesService } from '../camel-preferences-service'\r\nimport * as camelService from '../camel-service'\r\nimport { log } from '../globals'\r\n\r\nexport interface ConditionalBreakpoint {\r\n  nodeId: string\r\n  language: string\r\n  predicate: string\r\n}\r\n\r\nexport interface MessageData {\r\n  id: string | null\r\n  uid: string\r\n  timestamp: string\r\n  headers: Record<string, string>\r\n  headerTypes: Record<string, string>\r\n  headerHtml: string\r\n  body?: string\r\n  bodyType?: string\r\n  toNode?: string\r\n}\r\n\r\nclass DebugService {\r\n  private handles: number[] = []\r\n\r\n  async register(request: Request, callback: (response: Response) => void) {\r\n    const handle = await jolokiaService.register(request, callback)\r\n    log.debug('Register handle:', handle)\r\n    this.handles.push(handle)\r\n  }\r\n\r\n  unregisterAll() {\r\n    log.debug('Unregister all handles:', this.handles)\r\n    this.handles.forEach(handle => jolokiaService.unregister(handle))\r\n    this.handles = []\r\n  }\r\n\r\n  getDebugBean(node: MBeanNode): MBeanNode | null {\r\n    const db = camelService.findDebugBean(node)\r\n    if (!db || !db.objectName) camelService.notifyError('Could not find the debug bean')\r\n\r\n    return db\r\n  }\r\n\r\n  async isDebugging(node: MBeanNode): Promise<boolean> {\r\n    const db = this.getDebugBean(node)\r\n    if (!db || !db.objectName) return false\r\n\r\n    const result = await jolokiaService.readAttribute(db.objectName, 'Enabled')\r\n    if (!result) return false\r\n\r\n    return result as boolean\r\n  }\r\n\r\n  async setDebugging(node: MBeanNode, flag: boolean): Promise<boolean> {\r\n    const db = this.getDebugBean(node)\r\n    if (!db || !db.objectName) return false\r\n\r\n    const options = camelPreferencesService.loadOptions()\r\n    await jolokiaService.writeAttribute(db.objectName, 'BodyMaxChars', options.maximumTraceOrDebugBodyLength)\r\n    await jolokiaService.writeAttribute(db.objectName, 'BodyIncludeStreams', options.traceOrDebugIncludeStreams)\r\n    await jolokiaService.writeAttribute(db.objectName, 'BodyIncludeFiles', options.traceOrDebugIncludeStreams)\r\n\r\n    const method = flag ? 'enableDebugger' : 'disableDebugger'\r\n    await jolokiaService.execute(db.objectName, method)\r\n    return await this.isDebugging(node)\r\n  }\r\n\r\n  async getBreakpoints(node: MBeanNode): Promise<string[]> {\r\n    const db = this.getDebugBean(node)\r\n    if (!db || !db.objectName) return []\r\n\r\n    const result = await jolokiaService.execute(db.objectName, camelService.getBreakpointsOperation(node))\r\n    log.debug('Debug - getBreakpoints:', result)\r\n    return result as string[]\r\n  }\r\n\r\n  async addBreakpoint(node: MBeanNode, breakpointId: string): Promise<boolean> {\r\n    const db = this.getDebugBean(node)\r\n    if (!db || !db.objectName) return false\r\n\r\n    await jolokiaService.execute(db.objectName, 'addBreakpoint', [breakpointId])\r\n    const breakpoints = await this.getBreakpoints(node)\r\n    const added = breakpoints.includes(breakpointId)\r\n    if (added) camelService.notifyInfo('breakpoint created')\r\n    else camelService.notifyError('breakpoint could not be added')\r\n\r\n    return added\r\n  }\r\n\r\n  async removeBreakpoint(node: MBeanNode, breakpointId: string): Promise<boolean> {\r\n    const db = this.getDebugBean(node)\r\n    if (!db || !db.objectName) return false\r\n\r\n    await jolokiaService.execute(db.objectName, 'removeBreakpoint', [breakpointId])\r\n    const breakpoints = await this.getBreakpoints(node)\r\n    const removed = !breakpoints.includes(breakpointId)\r\n    if (removed) camelService.notifyInfo('breakpoint removed')\r\n    else camelService.notifyError('breakpoint could not be removed')\r\n\r\n    return removed\r\n  }\r\n\r\n  async validateConditionalBreakpoint(node: MBeanNode, breakpoint: ConditionalBreakpoint): Promise<string | null> {\r\n    const db = this.getDebugBean(node)\r\n    if (!db || !db.objectName) return 'Error: cannot find debugger bean'\r\n\r\n    const result = await jolokiaService.execute(db.objectName, 'validateConditionalBreakpoint', [\r\n      breakpoint.language,\r\n      breakpoint.predicate,\r\n    ])\r\n\r\n    return result as string | null\r\n  }\r\n\r\n  async addConditionalBreakpoint(node: MBeanNode, conditionalBreakpoint: ConditionalBreakpoint): Promise<boolean> {\r\n    log.info('Add conditional breakpoint')\r\n    const db = this.getDebugBean(node)\r\n    if (!db || !db.objectName) return false\r\n\r\n    await jolokiaService.execute(db.objectName, 'addConditionalBreakpoint', [\r\n      conditionalBreakpoint.nodeId,\r\n      conditionalBreakpoint.language,\r\n      conditionalBreakpoint.predicate,\r\n    ])\r\n\r\n    const breakpoints = await this.getBreakpoints(node)\r\n    const added = breakpoints.includes(conditionalBreakpoint.nodeId)\r\n    if (added) camelService.notifyInfo('conditional breakpoint created')\r\n    else camelService.notifyError('conditional breakpoint could not be added')\r\n\r\n    return added\r\n  }\r\n\r\n  /*\r\n   * Return the current node id we are stopped at\r\n   */\r\n  async getSuspendedBreakpointIds(node: MBeanNode): Promise<string[]> {\r\n    const db = this.getDebugBean(node)\r\n    if (!db || !db.objectName) return []\r\n\r\n    const result = await jolokiaService.execute(\r\n      db.objectName,\r\n      camelService.getSuspendedBreakpointNodeIdsOperation(node),\r\n    )\r\n    return result as string[]\r\n  }\r\n\r\n  async stepBreakpoint(node: MBeanNode, breakpointId: string): Promise<string[]> {\r\n    const db = this.getDebugBean(node)\r\n    if (!db || !db.objectName) return []\r\n\r\n    await jolokiaService.execute(db.objectName, 'stepBreakpoint(java.lang.String)', [breakpointId])\r\n\r\n    // Return the new suspended breakpoint\r\n    return await this.getSuspendedBreakpointIds(node)\r\n  }\r\n\r\n  async getBreakpointCounter(node: MBeanNode): Promise<number> {\r\n    const db = this.getDebugBean(node)\r\n    if (!db || !db.objectName) return 0\r\n\r\n    const result = await jolokiaService.execute(db.objectName, 'getDebugCounter')\r\n    return result as number\r\n  }\r\n\r\n  async getTracedMessages(node: MBeanNode, breakpointId: string): Promise<string> {\r\n    const db = this.getDebugBean(node)\r\n    if (!db || !db.objectName) return ''\r\n\r\n    return await camelService.dumpTracedMessagesAsXml(node, db.objectName, breakpointId)\r\n  }\r\n\r\n  async resume(node: MBeanNode): Promise<void> {\r\n    const db = this.getDebugBean(node)\r\n    if (!db || !db.objectName) return\r\n\r\n    await jolokiaService.execute(db.objectName, 'resumeAll')\r\n  }\r\n\r\n  private humanizeJavaType(type: string | null): string {\r\n    if (!type) return ''\r\n\r\n    // skip leading java.lang\r\n    if (type.startsWith('java.lang')) {\r\n      return type.substring(10)\r\n    }\r\n\r\n    return type\r\n  }\r\n\r\n  createMessageFromXml(exchange: Element): MessageData | null {\r\n    const uid = childText(exchange, 'uid') || ''\r\n    const timestamp = childText(exchange, 'timestamp') || ''\r\n\r\n    let message = exchange.querySelector('message')\r\n    if (!message) {\r\n      message = exchange\r\n    }\r\n\r\n    const headerElements = message.querySelectorAll('headers header')\r\n    const headers: Record<string, string> = {}\r\n    const headerTypes: Record<string, string> = {}\r\n    let headerHtml = ''\r\n    headerElements.forEach(headerElement => {\r\n      const key = headerElement.getAttribute('key')\r\n      const typeName = headerElement.getAttribute('type')\r\n      const value = xmlText(headerElement)\r\n\r\n      if (key) {\r\n        if (value) headers[key] = value\r\n        if (typeName) headerTypes[key] = typeName\r\n\r\n        headerHtml +=\r\n          \"<tr><td class='property-name'>\" +\r\n          key +\r\n          '</td>' +\r\n          \"<td class='property-value'>\" +\r\n          this.humanizeJavaType(typeName) +\r\n          '</td>' +\r\n          \"<td class='property-value'>\" +\r\n          (value || '') +\r\n          '</td></tr>'\r\n      }\r\n    })\r\n\r\n    const id = this.getIdFromHeaders(headers)\r\n\r\n    const bodyElement = message.querySelector('body')\r\n    let body = ''\r\n    let bodyType: string | null = ''\r\n    if (bodyElement) {\r\n      body = bodyElement.textContent || ''\r\n      bodyType = bodyElement.getAttribute('type')\r\n      bodyType = this.humanizeJavaType(bodyType)\r\n    }\r\n\r\n    return { headers, headerTypes, id, uid, timestamp, headerHtml, body, bodyType }\r\n  }\r\n\r\n  private getIdFromHeaders(headers: Record<string, string>): string {\r\n    if (headers['breadcrumbId']) {\r\n      return headers['breadcrumbId']\r\n    }\r\n\r\n    const suffixes = ['MessageID', 'ID', 'Path', 'Name']\r\n    const id = Object.entries(headers)\r\n      .filter(([_, key]) => suffixes.some(suffix => key.endsWith(suffix)))\r\n      .find(([value, _]) => !isBlank(value))?.[0]\r\n    if (id !== undefined) {\r\n      return id\r\n    }\r\n\r\n    // lets find the first header with a name or Path in it\r\n    // if still no value, lets use the first :)\r\n    return Object.values(headers).find(v => !isBlank(v)) ?? ''\r\n  }\r\n}\r\n\r\nexport const debugService = new DebugService()\r\n","import {\r\n  Divider,\r\n  Drawer,\r\n  DrawerActions,\r\n  DrawerCloseButton,\r\n  DrawerContent,\r\n  DrawerContentBody,\r\n  DrawerHead,\r\n  DrawerPanelContent,\r\n  Nav,\r\n  NavItem,\r\n  NavList,\r\n  Panel,\r\n  PanelMain,\r\n  PanelMainBody,\r\n  Text,\r\n} from '@patternfly/react-core'\r\nimport { TableComposable, Tbody, Td, Th, Thead, Tr } from '@patternfly/react-table'\r\nimport React from 'react'\r\nimport { useRef, useState } from 'react'\r\nimport { MessageData } from './debug-service'\r\n\r\nexport interface MessageDrawerProps {\r\n  messages: MessageData[]\r\n  expanded: boolean\r\n  setExpanded: (expanded: boolean) => void\r\n  extraPanel?: MessageDrawerPanel\r\n  /** Content to be rendered in the drawer */\r\n  children?: React.ReactNode\r\n}\r\n\r\nexport interface MessageDrawerPanel {\r\n  id: string\r\n  label: string\r\n  panelFn: () => JSX.Element\r\n}\r\n\r\nexport const MessageDrawer: React.FunctionComponent<MessageDrawerProps> = (props: MessageDrawerProps) => {\r\n  const panelRef = useRef<HTMLDivElement | null>(null)\r\n  const [activePanelTab, setActivePanelTab] = useState<string>('msg-panel-tab-header')\r\n\r\n  const onSelectTab = (result: { itemId: number | string }) => {\r\n    setActivePanelTab(result.itemId as string)\r\n  }\r\n\r\n  const onPanelExpand = () => {\r\n    panelRef.current && panelRef.current.focus()\r\n  }\r\n\r\n  const onPanelCloseClick = () => {\r\n    props.setExpanded(false)\r\n  }\r\n\r\n  const panelHeaderTab = (): JSX.Element => {\r\n    if (!props.messages || props.messages.length === 0) return <em key='header-no-messages'>No Messages</em>\r\n\r\n    const message = props.messages[0]\r\n    if (!message) return <em key='header-no-messages'>No Messages</em>\r\n\r\n    return (\r\n      <TableComposable key={'header-' + message.uid} aria-label='Header table' variant='compact'>\r\n        <Thead>\r\n          <Tr>\r\n            <Th>Key</Th>\r\n            <Th>Value</Th>\r\n          </Tr>\r\n        </Thead>\r\n        <Tbody>\r\n          {Object.entries(message.headers).map(([key, value]) => (\r\n            <Tr key={key}>\r\n              <Td dataLabel='Key'>{key}</Td>\r\n              <Td dataLabel='Value'>{value}</Td>\r\n            </Tr>\r\n          ))}\r\n        </Tbody>\r\n      </TableComposable>\r\n    )\r\n  }\r\n\r\n  const panelBodyTab = (): JSX.Element => {\r\n    if (!props.messages || props.messages.length === 0) return <em key='body-no-messages'>No Messages</em>\r\n\r\n    const message = props.messages[0]\r\n    if (!message) return <em key='body-no-messages'>No Messages</em>\r\n    if (message.body === '[Body is null]') return <em key={'body-' + message.uid}>No Body</em>\r\n\r\n    return <p key={'body-' + message.uid}>{message.body}</p>\r\n  }\r\n\r\n  const corePanels: MessageDrawerPanel[] = [\r\n    { id: 'msg-panel-tab-header', label: 'Header', panelFn: panelHeaderTab },\r\n    { id: 'msg-panel-tab-body', label: 'Body', panelFn: panelBodyTab },\r\n  ]\r\n\r\n  const drawerPanels = (): MessageDrawerPanel[] => {\r\n    const panels = [...corePanels]\r\n    if (props.extraPanel) panels.push(props.extraPanel)\r\n\r\n    return panels\r\n  }\r\n\r\n  const panelNavItems = (): JSX.Element[] => {\r\n    const panels: JSX.Element[] = []\r\n    for (const drawerPanel of drawerPanels()) {\r\n      panels.push(\r\n        <NavItem\r\n          preventDefault\r\n          key={drawerPanel.id}\r\n          itemId={drawerPanel.id}\r\n          isActive={activePanelTab === drawerPanel.id}\r\n          id={drawerPanel.id}\r\n        >\r\n          {drawerPanel.label}\r\n        </NavItem>,\r\n      )\r\n    }\r\n    return panels\r\n  }\r\n\r\n  const panelContent = (\r\n    <DrawerPanelContent minSize={'50%'}>\r\n      <DrawerHead>\r\n        <div tabIndex={props.expanded ? 0 : -1} ref={panelRef}>\r\n          <Text>\r\n            <em>UID: {props.messages && props.messages.length > 0 ? props.messages[0]?.uid : ''}</em>\r\n          </Text>\r\n          <Nav\r\n            onSelect={onSelectTab}\r\n            variant='horizontal'\r\n            theme='light'\r\n            aria-label='Show Header or Body Debug Info Table'\r\n          >\r\n            <NavList>{panelNavItems()}</NavList>\r\n          </Nav>\r\n          <Divider />\r\n        </div>\r\n        <DrawerActions>\r\n          <DrawerCloseButton onClick={onPanelCloseClick} />\r\n        </DrawerActions>\r\n      </DrawerHead>\r\n      <Panel>\r\n        <PanelMain>\r\n          <PanelMainBody>\r\n            <div style={{ height: '100%', overflow: 'auto' }}>\r\n              {drawerPanels().map(panel => activePanelTab === panel.id && panel.panelFn())}\r\n            </div>\r\n          </PanelMainBody>\r\n        </PanelMain>\r\n      </Panel>\r\n    </DrawerPanelContent>\r\n  )\r\n\r\n  return (\r\n    <Drawer isExpanded={props.expanded} onExpand={onPanelExpand} position='right'>\r\n      <DrawerContent panelContent={panelContent}>\r\n        <DrawerContentBody>{props.children}</DrawerContentBody>\r\n      </DrawerContent>\r\n    </Drawer>\r\n  )\r\n}\r\n","import { eventService } from '@hawtiosrc/core'\r\nimport { HawtioEmptyCard, HawtioLoadingCard } from '@hawtiosrc/plugins/shared'\r\nimport { Button, Toolbar, ToolbarContent, ToolbarItem } from '@patternfly/react-core'\r\nimport { PlusIcon } from '@patternfly/react-icons'\r\nimport { ISortBy, TableComposable, Tbody, Td, Th, ThProps, Thead, Tr } from '@patternfly/react-table'\r\nimport React, { useContext, useEffect, useState } from 'react'\r\nimport { CamelContext } from '../context'\r\nimport { AddEndpoint } from './AddEndpoint'\r\nimport { AddEndpointContext, useAddEndpointContext } from './context'\r\nimport * as es from './endpoints-service'\r\n\r\nexport const Endpoints: React.FunctionComponent = () => {\r\n  const { selectedNode } = useContext(CamelContext)\r\n  const ctx = useAddEndpointContext()\r\n  const [isReading, setIsReading] = useState(false)\r\n  const emptyEndpoints: es.Endpoint[] = []\r\n  const [endpoints, setEndpoints] = useState(emptyEndpoints)\r\n  const [activeSortDirection, setActiveSortDirection] = useState<'asc' | 'desc' | null>('asc')\r\n\r\n  useEffect(() => {\r\n    if (!selectedNode) return\r\n\r\n    setIsReading(true)\r\n    const readEndpoints = async () => {\r\n      try {\r\n        const endps = await es.getEndpoints(selectedNode)\r\n        setEndpoints(endps)\r\n        const cNames = await es.componentNames(selectedNode)\r\n        ctx.setComponentNames(cNames)\r\n      } catch (error) {\r\n        eventService.notify({\r\n          type: 'warning',\r\n          message: error as string,\r\n        })\r\n      }\r\n      setIsReading(false)\r\n    }\r\n    readEndpoints()\r\n\r\n    /*\r\n     * lint reporting that ctx should be a dependency which it really doesn't\r\n     */\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [selectedNode])\r\n\r\n  if (!selectedNode) {\r\n    return null\r\n  }\r\n\r\n  if (isReading) {\r\n    return <HawtioLoadingCard />\r\n  }\r\n\r\n  if (endpoints.length === 0) {\r\n    return <HawtioEmptyCard message='No endpoints found.' />\r\n  }\r\n\r\n  if (ctx.addEndpoint) {\r\n    return (\r\n      <AddEndpointContext.Provider value={ctx}>\r\n        <AddEndpoint />\r\n      </AddEndpointContext.Provider>\r\n    )\r\n  }\r\n\r\n  const isAddEnabled = () => es.canCreateEndpoints(selectedNode)\r\n\r\n  const onAddClicked = () => ctx.showAddEndpoint(true)\r\n\r\n  const sortParams = (): ThProps['sort'] => {\r\n    const sortBy: ISortBy = {\r\n      index: 0,\r\n      defaultDirection: 'asc',\r\n    }\r\n    if (activeSortDirection) sortBy.direction = activeSortDirection\r\n\r\n    return {\r\n      columnIndex: 0,\r\n      sortBy: sortBy,\r\n      onSort: (_event, _index, direction) => setActiveSortDirection(direction),\r\n    }\r\n  }\r\n\r\n  // sorted endpoints is not stored in the state so does not require syncing\r\n  const sortedEndpoints = endpoints\r\n  sortedEndpoints.sort((a, b) => {\r\n    const result = a.uri.localeCompare(b.uri)\r\n    return activeSortDirection === 'desc' ? result * -1 : result\r\n  })\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Toolbar id='camel-endpoints-toolbar'>\r\n        <ToolbarContent>\r\n          <ToolbarItem id='camel-endpoints-toolbar-item-add'>\r\n            <Button\r\n              variant='secondary'\r\n              isSmall={true}\r\n              isDisabled={!isAddEnabled()}\r\n              icon={<PlusIcon />}\r\n              onClick={onAddClicked}\r\n            >\r\n              Add\r\n            </Button>\r\n          </ToolbarItem>\r\n        </ToolbarContent>\r\n      </Toolbar>\r\n      <TableComposable id='camel-endpoints-table' aria-label='Camel endpoints table' variant='compact'>\r\n        <Thead>\r\n          <Tr>\r\n            <Th sort={sortParams()}>URI</Th>\r\n            <Th modifier='wrap'>State</Th>\r\n          </Tr>\r\n        </Thead>\r\n        <Tbody>\r\n          {sortedEndpoints.map(endpoint => (\r\n            <Tr key={endpoint.mbean}>\r\n              <Td dataLabel={endpoint.uri}>{endpoint.uri}</Td>\r\n              <Td dataLabel={endpoint.state}>{endpoint.state}</Td>\r\n            </Tr>\r\n          ))}\r\n        </Tbody>\r\n      </TableComposable>\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import { Button, Card, CardBody, CardTitle, Form, FormGroup, Text } from '@patternfly/react-core'\r\nimport React, { useContext, useState } from 'react'\r\nimport { CamelContext } from '../context'\r\nimport { AddEndpointURI } from './AddEndpointURI'\r\nimport { AddEndpointWizard } from './AddEndpointWizard'\r\nimport { AddEndpointContext } from './context'\r\n\r\nexport const AddEndpoint: React.FunctionComponent = () => {\r\n  const { selectedNode } = useContext(CamelContext)\r\n  const ctx = useContext(AddEndpointContext)\r\n  const [createFrom, setCreateFrom] = useState('')\r\n\r\n  if (!selectedNode) {\r\n    return (\r\n      <Card>\r\n        <CardBody>\r\n          <Text component='p'>No selection has been made</Text>\r\n        </CardBody>\r\n      </Card>\r\n    )\r\n  }\r\n\r\n  const onCreateFromURIClicked = () => {\r\n    setCreateFrom('URI')\r\n  }\r\n\r\n  const onCreateFromDataClicked = () => {\r\n    setCreateFrom('DATA')\r\n  }\r\n\r\n  const chooseWizard = (): JSX.Element => {\r\n    if ((ctx.componentNames && ctx.componentNames.length === 0) || createFrom === 'URI') return <AddEndpointURI />\r\n    else if (createFrom === 'DATA') return <AddEndpointWizard />\r\n    else {\r\n      return (\r\n        <Form>\r\n          <FormGroup fieldId='create-from-radio-group' isInline label='How do you want to create your endpoint?'>\r\n            <Button variant='secondary' onClick={onCreateFromURIClicked}>\r\n              From URI\r\n            </Button>\r\n            <Button variant='secondary' onClick={onCreateFromDataClicked}>\r\n              From Data\r\n            </Button>\r\n          </FormGroup>\r\n        </Form>\r\n      )\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardTitle>Add Endpoint</CardTitle>\r\n      <CardBody>{chooseWizard()}</CardBody>\r\n    </Card>\r\n  )\r\n}\r\n","import { ActionGroup, Button, Form, FormGroup, TextInput } from '@patternfly/react-core'\r\nimport { useContext, useState } from 'react'\r\nimport { CamelContext } from '../context'\r\nimport { AddEndpointContext } from './context'\r\nimport * as es from './endpoints-service'\r\n\r\nexport const AddEndpointURI: React.FunctionComponent = () => {\r\n  const { selectedNode } = useContext(CamelContext)\r\n  const ctx = useContext(AddEndpointContext)\r\n  const [componentURI, setComponentURI] = useState('')\r\n\r\n  if (!selectedNode) {\r\n    return null\r\n  }\r\n\r\n  const handleURIChange = (uri: string) => {\r\n    setComponentURI(uri)\r\n  }\r\n\r\n  const onCancelClicked = () => {\r\n    ctx.showAddEndpoint(false)\r\n  }\r\n\r\n  const onSubmitClicked = () => {\r\n    es.createEndpoint(selectedNode, componentURI)\r\n    ctx.showAddEndpoint(false)\r\n  }\r\n\r\n  return (\r\n    <Form>\r\n      <FormGroup label='URI'>\r\n        <TextInput\r\n          isRequired\r\n          type='text'\r\n          id='uri-input-text'\r\n          name='uri-input-text'\r\n          value={componentURI}\r\n          onChange={handleURIChange}\r\n        />\r\n      </FormGroup>\r\n      <ActionGroup>\r\n        <Button variant='primary' isDisabled={!componentURI} onClick={onSubmitClicked}>\r\n          Submit\r\n        </Button>\r\n        <Button variant='link' onClick={onCancelClicked}>\r\n          Cancel\r\n        </Button>\r\n      </ActionGroup>\r\n    </Form>\r\n  )\r\n}\r\n","import { createContext, useState } from 'react'\r\nimport { CamelModelSchema } from '../camel-service'\r\n\r\nexport function useAddEndpointContext() {\r\n  const [addEndpoint, showAddEndpoint] = useState(false)\r\n  const [componentNames, setComponentNames] = useState<string[] | null>(null)\r\n  const [componentName, setComponentName] = useState('')\r\n  const [componentSchema, setComponentSchema] = useState<Record<string, unknown>>({})\r\n  const [endpointPath, setEndpointPath] = useState<string>('')\r\n  const [endpointParameters, setEndpointParameters] = useState<Record<string, string>>({})\r\n\r\n  return {\r\n    addEndpoint,\r\n    showAddEndpoint,\r\n    componentNames,\r\n    setComponentNames,\r\n    componentName,\r\n    setComponentName,\r\n    componentSchema,\r\n    setComponentSchema,\r\n    endpointPath,\r\n    setEndpointPath,\r\n    endpointParameters,\r\n    setEndpointParameters,\r\n  }\r\n}\r\n\r\ntype AddEndpointContext = {\r\n  showAddEndpoint: (value: boolean) => void\r\n  componentNames: string[] | null\r\n  setComponentNames: (names: string[]) => void\r\n  componentName: string\r\n  setComponentName: (names: string) => void\r\n  componentSchema: Record<string, unknown>\r\n  setComponentSchema: (componentSchema: CamelModelSchema) => void\r\n  endpointPath: string\r\n  setEndpointPath: (endPointPath: string) => void\r\n  endpointParameters: Record<string, string>\r\n  setEndpointParameters: (componentSchema: Record<string, string>) => void\r\n}\r\n\r\nexport const AddEndpointContext = createContext<AddEndpointContext>({\r\n  showAddEndpoint: (value: boolean) => {\r\n    /* no-op */\r\n  },\r\n  componentNames: null,\r\n  setComponentNames: (names: string[]) => {\r\n    /* no-op */\r\n  },\r\n  componentName: '',\r\n  setComponentName: (names: string) => {\r\n    /* no-op */\r\n  },\r\n  componentSchema: {},\r\n  setComponentSchema: (componentSchema: Record<string, unknown>) => {\r\n    /* no-op */\r\n  },\r\n  endpointPath: '',\r\n  setEndpointPath: (endPointPath: string) => {\r\n    /* no-op */\r\n  },\r\n  endpointParameters: {},\r\n  setEndpointParameters: (endPointParameters: Record<string, string>) => {\r\n    /* no-op */\r\n  },\r\n})\r\n","import {\r\n  ActionGroup,\r\n  Button,\r\n  Form,\r\n  FormGroup,\r\n  FormSection,\r\n  Select,\r\n  SelectDirection,\r\n  SelectOption,\r\n  SelectOptionObject,\r\n  SelectVariant,\r\n  TextInput,\r\n} from '@patternfly/react-core'\r\nimport { ExclamationCircleIcon } from '@patternfly/react-icons'\r\nimport React, { ChangeEvent, MouseEvent, useContext, useEffect, useRef, useState } from 'react'\r\nimport { CamelContext } from '../context'\r\nimport { EndpointParametersForm } from './EndpointParametersForm'\r\nimport { AddEndpointContext } from './context'\r\nimport * as es from './endpoints-service'\r\n\r\nconst placeholder = 'Select Component Name'\r\n\r\nexport const AddEndpointWizard: React.FunctionComponent = () => {\r\n  const { selectedNode } = useContext(CamelContext)\r\n  const ctx = useContext(AddEndpointContext)\r\n  const toggleRef = useRef<HTMLButtonElement | null>()\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [endpointValidated, setEndpointValidated] = useState<'success' | 'error' | 'default'>('default')\r\n\r\n  useEffect(() => {\r\n    if (!selectedNode || !ctx.componentName) return\r\n\r\n    es.loadEndpointSchema(selectedNode, ctx.componentName).then(schema => {\r\n      if (schema) {\r\n        ctx.setComponentSchema(schema)\r\n      }\r\n    })\r\n\r\n    /*\r\n     * lint reporting that ctx should be a dependency which it really doesn't\r\n     */\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [selectedNode, ctx.componentName])\r\n\r\n  if (!selectedNode) {\r\n    return null\r\n  }\r\n\r\n  const onToggle = (isOpen: boolean) => {\r\n    setIsOpen(isOpen)\r\n  }\r\n\r\n  const onSelect = (\r\n    event: ChangeEvent<Element> | MouseEvent<Element>,\r\n    value: string | SelectOptionObject,\r\n    isPlaceholder?: boolean | undefined,\r\n  ) => {\r\n    if (placeholder === value) return\r\n\r\n    ctx.setComponentName(value as string)\r\n    setIsOpen(false)\r\n    toggleRef?.current?.focus()\r\n  }\r\n\r\n  const onEndpointPathChanged = (value: string) => {\r\n    ctx.setEndpointPath(value)\r\n\r\n    const invalid = !value || value.length === 0 || !/^[a-zA-Z\\d-_/:]+$/.test(value)\r\n    setEndpointValidated(invalid ? 'error' : 'success')\r\n  }\r\n\r\n  const endpointInvalidMessage = (): string => {\r\n    if (!ctx.endpointPath || ctx.endpointPath.length === 0) return 'Endpoint path is empty.'\r\n\r\n    return 'Endpoint path invalid. Only alphanumeric characters, underscore, and hyphen allowed'\r\n  }\r\n\r\n  const onCancelClicked = () => {\r\n    ctx.showAddEndpoint(false)\r\n  }\r\n\r\n  const onSubmitClicked = () => {\r\n    es.createEndpointFromData(selectedNode, ctx.componentName, ctx.endpointPath, ctx.endpointParameters)\r\n    ctx.showAddEndpoint(false)\r\n  }\r\n\r\n  return (\r\n    <Form isHorizontal>\r\n      <FormGroup label='Component' isRequired fieldId='form-component-name'>\r\n        <Select\r\n          toggleRef={() => toggleRef}\r\n          variant={SelectVariant.single}\r\n          aria-label={placeholder}\r\n          onToggle={onToggle}\r\n          onSelect={onSelect}\r\n          selections={ctx.componentName}\r\n          isOpen={isOpen}\r\n          direction={SelectDirection.down}\r\n          placeholderText={placeholder}\r\n        >\r\n          {ctx.componentNames?.map((name, index) => <SelectOption key={index} value={name} />) ?? []}\r\n        </Select>\r\n      </FormGroup>\r\n      {ctx.componentName && (\r\n        <React.Fragment>\r\n          <FormGroup\r\n            label='Endpoint Path'\r\n            fieldId='endpoint-path'\r\n            validated={endpointValidated}\r\n            helperTextInvalid={endpointInvalidMessage()}\r\n            helperTextInvalidIcon={<ExclamationCircleIcon />}\r\n          >\r\n            <TextInput\r\n              id='endpoint-path-input'\r\n              type='text'\r\n              value={ctx.endpointPath}\r\n              isRequired={true}\r\n              onChange={onEndpointPathChanged}\r\n              validated={endpointValidated}\r\n            />\r\n          </FormGroup>\r\n          {ctx.componentSchema && (\r\n            <FormSection title='Endpoint Parameters'>\r\n              <EndpointParametersForm />\r\n            </FormSection>\r\n          )}\r\n        </React.Fragment>\r\n      )}\r\n      <ActionGroup>\r\n        <Button\r\n          variant='primary'\r\n          isDisabled={!ctx.endpointPath || ctx.endpointPath.length === 0 || endpointValidated !== 'success'}\r\n          onClick={onSubmitClicked}\r\n        >\r\n          Submit\r\n        </Button>\r\n        <Button variant='link' onClick={onCancelClicked}>\r\n          Cancel\r\n        </Button>\r\n      </ActionGroup>\r\n    </Form>\r\n  )\r\n}\r\n","import {\r\n  FormGroup,\r\n  Label,\r\n  TextInput,\r\n  Checkbox,\r\n  HelperText,\r\n  HelperTextItem,\r\n  NumberInput,\r\n  ToggleGroup,\r\n  ToggleGroupItem,\r\n} from '@patternfly/react-core'\r\nimport React, { useContext, useEffect, useState } from 'react'\r\nimport { ExclamationCircleIcon } from '@patternfly/react-icons'\r\nimport { AddEndpointContext } from './context'\r\nimport { parseBoolean } from '@hawtiosrc/util/strings'\r\nimport './EndpointParametersForm.css'\r\n\r\ninterface PropertySpec {\r\n  type: string\r\n  title: string\r\n  required: boolean\r\n  description: string\r\n  defaultValue: string\r\n  enums: string[]\r\n}\r\n\r\nexport const EndpointParametersForm: React.FunctionComponent = () => {\r\n  const ctx = useContext(AddEndpointContext)\r\n\r\n  const [properties, setProperties] = useState<Record<string, PropertySpec> | null>()\r\n\r\n  useEffect(() => {\r\n    if (!ctx.componentSchema) {\r\n      setProperties(null)\r\n      return\r\n    }\r\n\r\n    const props = ctx.componentSchema['properties'] as Record<string, unknown>\r\n    if (!props) {\r\n      setProperties(null)\r\n      return\r\n    }\r\n\r\n    const newProperties: Record<string, PropertySpec> = {}\r\n    Object.entries(props as Record<string, unknown>).forEach(([key, value]) => {\r\n      const v = value as Record<string, unknown>\r\n      newProperties[key] = {\r\n        type: v['type'] as string,\r\n        title: v['title'] as string,\r\n        required: parseBoolean(v['required'] as string),\r\n        description: v['description'] as string,\r\n        defaultValue: v['defaultValue'] as string,\r\n        enums: v['enum'] as string[],\r\n      }\r\n    })\r\n    setProperties(newProperties)\r\n  }, [ctx.componentSchema])\r\n\r\n  if (!properties) {\r\n    return (\r\n      <Label color='red' icon={<ExclamationCircleIcon />}>\r\n        No schema properties defined for component {ctx.componentName}\r\n      </Label>\r\n    )\r\n  }\r\n\r\n  const onSetPropValue = (name: string, value: unknown) => {\r\n    const valString = value as string\r\n\r\n    const newEPParams = {\r\n      ...ctx.endpointParameters,\r\n    }\r\n    newEPParams[name] = valString\r\n    ctx.setEndpointParameters(newEPParams)\r\n  }\r\n\r\n  const onPlus = (name: string) => {\r\n    let value = parseInt(ctx.endpointParameters[name] ?? '')\r\n\r\n    if (Number.isNaN(value)) {\r\n      value = parseInt(properties[name]?.defaultValue ?? '')\r\n      if (Number.isNaN(value)) value = 0\r\n    } else {\r\n      value = parseInt(ctx.endpointParameters[name] ?? '')\r\n    }\r\n\r\n    onSetPropValue(name, value + 1)\r\n  }\r\n\r\n  const onMinus = (name: string) => {\r\n    let value = parseInt(ctx.endpointParameters[name] ?? '')\r\n\r\n    if (Number.isNaN(value)) {\r\n      value = parseInt(properties[name]?.defaultValue ?? '')\r\n      if (Number.isNaN(value)) value = 100\r\n    } else {\r\n      value = parseInt(ctx.endpointParameters[name] ?? '')\r\n    }\r\n\r\n    onSetPropValue(name, value - 1)\r\n  }\r\n\r\n  const numberValue = (stored: string, defValue: string): number | undefined => {\r\n    if (!defValue) defValue = '0'\r\n\r\n    const value = parseInt(stored)\r\n\r\n    if (Number.isNaN(value)) return parseInt(defValue)\r\n\r\n    return value\r\n  }\r\n\r\n  const inputControl = (name: string, index: number, propertySpec: PropertySpec): JSX.Element => {\r\n    switch (propertySpec.type) {\r\n      case 'string':\r\n        return (\r\n          <FormGroup\r\n            label={propertySpec.title}\r\n            id={name + '-' + index}\r\n            fieldId={name + '-' + index}\r\n            key={name + '-' + index}\r\n          >\r\n            <TextInput\r\n              id={name + '-input'}\r\n              key={index}\r\n              value={ctx.endpointParameters[name]}\r\n              isRequired={propertySpec.required}\r\n              onChange={value => onSetPropValue(name, value)}\r\n            />\r\n            <HelperText id={name + '-helper-text'}>\r\n              <HelperTextItem id={name + '-helper-text-item'} variant='indeterminate'>\r\n                {propertySpec.description}\r\n              </HelperTextItem>\r\n            </HelperText>\r\n          </FormGroup>\r\n        )\r\n      case 'integer':\r\n        return (\r\n          <FormGroup\r\n            label={propertySpec.title}\r\n            id={name + '-' + index}\r\n            fieldId={name + '-' + index}\r\n            key={name + '-' + index}\r\n          >\r\n            <NumberInput\r\n              key={index}\r\n              inputName={propertySpec.title}\r\n              value={numberValue(ctx.endpointParameters[name] ?? '', propertySpec.defaultValue)}\r\n              allowEmptyInput\r\n              onPlus={() => onPlus(name)}\r\n              onMinus={() => onMinus(name)}\r\n              onChange={value => onSetPropValue(name, value)}\r\n              className={'endpoint-parameter-number-input'}\r\n            />\r\n            <HelperText id={name + '-helper-text'}>\r\n              <HelperTextItem id={name + '-helper-text-item'} variant='indeterminate'>\r\n                {propertySpec.description}\r\n              </HelperTextItem>\r\n            </HelperText>\r\n          </FormGroup>\r\n        )\r\n      case 'boolean':\r\n        return (\r\n          <Checkbox\r\n            id={name + '-' + index}\r\n            key={index}\r\n            label={propertySpec.title}\r\n            isChecked={parseBoolean(ctx.endpointParameters[name] ?? '')}\r\n            isRequired={propertySpec.required}\r\n            description={propertySpec.description}\r\n            onChange={value => onSetPropValue(name, value)}\r\n          />\r\n        )\r\n      case 'object':\r\n        if (!propertySpec.enums)\r\n          //\r\n          // TODO - unsupported objects like ExceptionHandler\r\n          //\r\n          return <React.Fragment key={index} />\r\n\r\n        return (\r\n          <FormGroup\r\n            label={propertySpec.title}\r\n            id={name + '-' + index}\r\n            fieldId={name + '-' + index}\r\n            key={name + '-' + index}\r\n          >\r\n            <ToggleGroup>\r\n              {propertySpec.enums.map((enumVal, index) => {\r\n                return (\r\n                  <ToggleGroupItem\r\n                    id={name + '-' + index}\r\n                    key={index}\r\n                    name={enumVal}\r\n                    text={enumVal}\r\n                    isSelected={ctx.endpointParameters[name] === enumVal}\r\n                    onChange={isSelected => {\r\n                      if (isSelected) onSetPropValue(name, enumVal)\r\n                    }}\r\n                  />\r\n                )\r\n              })}\r\n            </ToggleGroup>\r\n            <HelperText id={name + '-helper-text'}>\r\n              <HelperTextItem id={name + '-helper-text-item'} variant='indeterminate'>\r\n                {propertySpec.description}\r\n              </HelperTextItem>\r\n            </HelperText>\r\n          </FormGroup>\r\n        )\r\n      default:\r\n        return <React.Fragment key={index} />\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {Object.entries(properties).map(([key, value], index) => inputControl(key, index, value))}\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import { NotificationType, eventService } from '@hawtiosrc/core'\r\nimport {\r\n  Bullseye,\r\n  Button,\r\n  CodeBlock,\r\n  CodeBlockCode,\r\n  EmptyState,\r\n  EmptyStateBody,\r\n  EmptyStateIcon,\r\n  Flex,\r\n  FlexItem,\r\n  FormGroup,\r\n  Modal,\r\n  ModalVariant,\r\n  Pagination,\r\n  Panel,\r\n  PanelHeader,\r\n  PanelMain,\r\n  PanelMainBody,\r\n  SearchInput,\r\n  TextInput,\r\n  Title,\r\n  Toolbar,\r\n  ToolbarContent,\r\n  ToolbarFilter,\r\n  ToolbarGroup,\r\n  ToolbarItem,\r\n} from '@patternfly/react-core'\r\nimport { SearchIcon } from '@patternfly/react-icons'\r\nimport { TableComposable, Tbody, Td, Th, Thead, Tr } from '@patternfly/react-table'\r\nimport React, { useContext, useEffect, useState } from 'react'\r\nimport { Position } from 'reactflow'\r\nimport { CamelContext } from '../context'\r\nimport { InputWithSuggestions } from './InputWithSuggestions'\r\nimport { MessageData, forwardMessagesToEndpoint, getEndpoints, getMessagesFromTheEndpoint } from './endpoints-service'\r\n\r\nexport const BrowseMessages: React.FunctionComponent = () => {\r\n  const { selectedNode } = useContext(CamelContext)\r\n  const [messages, setMessages] = useState<MessageData[]>([])\r\n  const [filteredMessages, setFilteredMessages] = useState<MessageData[]>([])\r\n  const [searchTerm, setSearchTerm] = useState<string>('')\r\n  const [filters, setFilters] = useState<string[]>([])\r\n  const [selected, setSelected] = useState<string[]>([])\r\n  const [page, setPage] = useState(1)\r\n  const [perPage, setPerPage] = useState(10)\r\n  const [endpoints, setEndpoints] = useState<string[]>([])\r\n\r\n  useEffect(() => {\r\n    if (!selectedNode) {\r\n      return\r\n    }\r\n    const initLoad = async () => {\r\n      const messages = await getMessagesFromTheEndpoint(selectedNode, 0, -1)\r\n      updateMessages(messages)\r\n      const endps = await getEndpoints(selectedNode)\r\n      setEndpoints(endps.map(v => v.uri))\r\n    }\r\n    initLoad()\r\n  }, [selectedNode])\r\n\r\n  if (!selectedNode) {\r\n    return null\r\n  }\r\n\r\n  const loadMessages = async () => {\r\n    const messages = await getMessagesFromTheEndpoint(selectedNode, 0, -1)\r\n    updateMessages(messages)\r\n  }\r\n\r\n  const updateMessages = (messages: MessageData[]) => {\r\n    const data = messages.reverse()\r\n    setMessages(data)\r\n    setFilteredMessages(data)\r\n    setSelected([])\r\n    setFilters([])\r\n  }\r\n\r\n  const handleSearch = (value: string, filters: string[]) => {\r\n    setSearchTerm(value)\r\n    // filter with findTerm\r\n    let filtered: MessageData[] = []\r\n    if (value === '') {\r\n      filtered = [...messages]\r\n    } else {\r\n      filtered = messages.filter(\r\n        message => message.messageId.toLowerCase().includes(value.toLowerCase()) || message.body.includes(value),\r\n      )\r\n    }\r\n\r\n    // filter with the rest of the filters\r\n    filters.forEach(value => {\r\n      filtered = filtered.filter(\r\n        message => message.messageId.toLowerCase().includes(value.toLowerCase()) || message.body.includes(value),\r\n      )\r\n    })\r\n    setSearchTerm(value)\r\n    setPage(1)\r\n    setFilteredMessages([...filtered])\r\n  }\r\n\r\n  const addToFilters = () => {\r\n    setFilters([...filters, searchTerm])\r\n    setSearchTerm('')\r\n  }\r\n\r\n  const getFromIndex = (): number => {\r\n    return (page - 1) * perPage\r\n  }\r\n\r\n  const getToIndex = (): number => {\r\n    return getFromIndex() + perPage\r\n  }\r\n\r\n  const getPage = () => {\r\n    return filteredMessages.slice(getFromIndex(), getToIndex())\r\n  }\r\n\r\n  const handleNextMessage = (index: number): MessageData | null => {\r\n    return filteredMessages[index] ?? null\r\n  }\r\n\r\n  const getSubstring = (body: string): string => {\r\n    let res = body.substring(0, 100)\r\n    if (body.length > 100) {\r\n      res += '...'\r\n    }\r\n    return res\r\n  }\r\n\r\n  const onSelect = (messageId: string, isSelecting: boolean) => {\r\n    const selectedRoutes = selected.filter(m => messageId !== m)\r\n    setSelected(isSelecting ? [...selectedRoutes, messageId] : [...selectedRoutes])\r\n  }\r\n\r\n  const onSelectAll = (isSelected: boolean) => {\r\n    const selected = filteredMessages.map(m => m.messageId)\r\n    setSelected(isSelected ? selected : [])\r\n  }\r\n\r\n  const clearFilters = () => {\r\n    setFilters([])\r\n    setSearchTerm('')\r\n    setFilteredMessages([...messages])\r\n  }\r\n\r\n  const onDeleteFilter = (filter: string) => {\r\n    const newFilters = filters.filter(f => f !== filter)\r\n    setFilters(newFilters)\r\n    handleSearch(searchTerm, newFilters)\r\n  }\r\n\r\n  const isAllSelected = (): boolean => {\r\n    //  let res = true\r\n    for (const m of filteredMessages) {\r\n      if (!selected.includes(m.messageId)) {\r\n        return false\r\n      }\r\n    }\r\n    return true\r\n  }\r\n\r\n  const createNotification = (type: NotificationType, message: string) => {\r\n    eventService.notify({\r\n      type: type,\r\n      message: message,\r\n    })\r\n  }\r\n\r\n  const forwardMessages = async (uri: string, message?: MessageData) => {\r\n    if (selectedNode) {\r\n      let selectedMessages: MessageData[] = []\r\n      if (message) {\r\n        selectedMessages.push(message)\r\n      } else {\r\n        selectedMessages = messages.filter(m => selected.includes(m.messageId))\r\n      }\r\n      await forwardMessagesToEndpoint(selectedNode, uri, selectedMessages, createNotification)\r\n    }\r\n  }\r\n\r\n  const MessagesPagination = () => {\r\n    return (\r\n      <Pagination\r\n        itemCount={filteredMessages.length}\r\n        page={page}\r\n        perPage={perPage}\r\n        onSetPage={(_evt, value) => setPage(value)}\r\n        onPerPageSelect={(_evt, value) => setPerPage(value)}\r\n        variant='top'\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Panel>\r\n      <PanelHeader>\r\n        <Title headingLevel='h3'>Browse Messages</Title>\r\n      </PanelHeader>\r\n      <PanelMain>\r\n        <PanelMainBody>\r\n          <Toolbar clearAllFilters={clearFilters}>\r\n            <ToolbarContent>\r\n              <ToolbarGroup>\r\n                <ToolbarFilter\r\n                  chips={filters}\r\n                  deleteChip={(_e, filter) => onDeleteFilter(filter as string)}\r\n                  deleteChipGroup={clearFilters}\r\n                  categoryName='Filters'\r\n                >\r\n                  <SearchInput\r\n                    type='text'\r\n                    data-testid='filter-input'\r\n                    id='search-input'\r\n                    placeholder='Search...'\r\n                    value={searchTerm}\r\n                    onChange={(_event, value) => handleSearch(value, filters)}\r\n                    aria-label='Search input'\r\n                  />\r\n                </ToolbarFilter>\r\n                <Button variant='secondary' onClick={addToFilters}>\r\n                  Add Filter\r\n                </Button>\r\n              </ToolbarGroup>\r\n              <ToolbarItem>\r\n                <Button variant='secondary' onClick={loadMessages}>\r\n                  Refresh\r\n                </Button>\r\n              </ToolbarItem>\r\n              <ToolbarItem>\r\n                <ForwardMessagesModal\r\n                  endpoints={endpoints}\r\n                  enabled={selected.length > 0}\r\n                  onForwardMessages={forwardMessages}\r\n                />\r\n              </ToolbarItem>\r\n              <ToolbarItem variant='pagination'>\r\n                <MessagesPagination />\r\n              </ToolbarItem>\r\n            </ToolbarContent>\r\n          </Toolbar>\r\n\r\n          {filteredMessages.length > 0 && (\r\n            <FormGroup>\r\n              <TableComposable aria-label='Message Table' variant='compact' height='80vh'>\r\n                <Thead>\r\n                  <Tr>\r\n                    <Th\r\n                      select={{\r\n                        onSelect: (_event, isSelecting) => onSelectAll(isSelecting),\r\n                        isSelected: isAllSelected(),\r\n                      }}\r\n                    />\r\n                    <Th>Message ID</Th>\r\n                    <Th>Body</Th>\r\n                  </Tr>\r\n                </Thead>\r\n                <Tbody>\r\n                  {getPage().map((m, index) => {\r\n                    return (\r\n                      <Tr key={index}>\r\n                        <Td\r\n                          style={{ flex: 1 }}\r\n                          select={{\r\n                            rowIndex: index,\r\n                            onSelect: (_event, isSelected) => {\r\n                              onSelect(m.messageId, isSelected)\r\n                            },\r\n                            isSelected: selected.includes(m.messageId),\r\n                          }}\r\n                        />\r\n                        <Td style={{ width: '20%' }}>\r\n                          <MessageDetails\r\n                            aria-label={`message-details ${m.messageId}`}\r\n                            message={m}\r\n                            endpoints={endpoints}\r\n                            mid={m.messageId}\r\n                            index={getFromIndex() + index}\r\n                            getMessage={handleNextMessage}\r\n                            forwardMessages={forwardMessages}\r\n                            maxValue={filteredMessages.length}\r\n                          />\r\n                        </Td>\r\n                        <Td style={{ flex: 3 }}>{getSubstring(m.body)}</Td>\r\n                      </Tr>\r\n                    )\r\n                  })}\r\n                </Tbody>\r\n              </TableComposable>\r\n            </FormGroup>\r\n          )}\r\n          {filteredMessages.length === 0 && (\r\n            <Bullseye>\r\n              <EmptyState>\r\n                <EmptyStateIcon icon={SearchIcon} />\r\n                <EmptyStateBody>No results found.</EmptyStateBody>\r\n              </EmptyState>\r\n            </Bullseye>\r\n          )}\r\n        </PanelMainBody>\r\n      </PanelMain>\r\n    </Panel>\r\n  )\r\n}\r\n\r\nconst ForwardMessagesModal: React.FunctionComponent<{\r\n  onForwardMessages: (uri: string, message?: MessageData) => void\r\n  enabled: boolean\r\n  endpoints: string[]\r\n}> = ({ onForwardMessages, enabled, endpoints }) => {\r\n  const [isModalOpen, setIsModalOpen] = useState(false)\r\n\r\n  const handleModalToggle = () => {\r\n    setIsModalOpen(prevIsModalOpen => !prevIsModalOpen)\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Button isDisabled={!enabled} onClick={handleModalToggle}>\r\n        Forward\r\n      </Button>\r\n      <Modal\r\n        bodyAriaLabel='forward-message-modal'\r\n        aria-label='forward-message-modal'\r\n        position={Position.Top}\r\n        tabIndex={0}\r\n        variant={ModalVariant.small}\r\n        title={'Forward Messages'}\r\n        isOpen={isModalOpen}\r\n        onClose={handleModalToggle}\r\n        style={{ overflow: 'visible' }}\r\n      >\r\n        <ForwardMessagesComponent endpoints={endpoints} onForwardMessages={onForwardMessages} />\r\n      </Modal>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nconst ForwardMessagesComponent: React.FunctionComponent<{\r\n  onForwardMessages: (uri: string, message?: MessageData) => void\r\n  currentMessage?: MessageData\r\n  endpoints: string[]\r\n}> = ({ onForwardMessages, currentMessage, endpoints }) => {\r\n  const [uri, setUri] = useState('')\r\n\r\n  return (\r\n    <FormGroup label='URI:'>\r\n      <Flex>\r\n        <FlexItem flex={{ default: 'flexNone', md: 'flex_3' }}>\r\n          <InputWithSuggestions suggestions={endpoints} value={uri} onChange={setUri} />\r\n        </FlexItem>\r\n        <FlexItem flex={{ default: 'flexNone', md: 'flex_1' }}>\r\n          <Button key='confirm' variant='primary' onClick={() => onForwardMessages(uri, currentMessage)}>\r\n            Forward\r\n          </Button>\r\n        </FlexItem>\r\n      </Flex>\r\n    </FormGroup>\r\n  )\r\n}\r\n\r\nconst MessageDetails: React.FunctionComponent<{\r\n  message: MessageData\r\n  mid: string\r\n  index: number\r\n  maxValue: number\r\n  getMessage: (index: number) => MessageData | null\r\n  forwardMessages: (uri: string, message?: MessageData) => void\r\n  endpoints: string[]\r\n}> = ({ message, mid, index, maxValue, getMessage, forwardMessages, endpoints }) => {\r\n  const [isModalOpen, setIsModalOpen] = useState(false)\r\n  const [currentMessage, setCurrentMessage] = useState<MessageData>(message)\r\n  const [currentIndex, setCurrentIndex] = useState<number>(index)\r\n\r\n  const handleModalToggle = () => {\r\n    setIsModalOpen(prevIsModalOpen => !prevIsModalOpen)\r\n    setCurrentMessage(message)\r\n    setCurrentIndex(index)\r\n  }\r\n\r\n  const switchToMessage = (index: number) => {\r\n    const message = getMessage(index)\r\n    if (message) {\r\n      setCurrentMessage(message)\r\n      setCurrentIndex(index)\r\n    }\r\n  }\r\n  const MessageHeader = () => {\r\n    return (\r\n      <div\r\n        aria-label='message-details-header'\r\n        style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', width: '100%' }}\r\n      >\r\n        <Title aria-label='message-header-tittle' headingLevel='h2' style={{ marginRight: '10px' }}>\r\n          Message\r\n        </Title>\r\n        <MessageSelect\r\n          aria-label='message-header-messageSelector'\r\n          value={currentIndex + 1}\r\n          min={1}\r\n          max={maxValue}\r\n          onPrevious={() => switchToMessage(currentIndex - 1)}\r\n          onNext={() => switchToMessage(currentIndex + 1)}\r\n          onLast={() => switchToMessage(maxValue - 1)}\r\n          onFirst={() => switchToMessage(0)}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n      <Button variant='link' onClick={handleModalToggle}>\r\n        {mid}\r\n      </Button>\r\n      <Modal\r\n        aria-label='Message-details-label'\r\n        tabIndex={0}\r\n        data-testid={'message-details'}\r\n        position={Position.Top}\r\n        variant={ModalVariant.large}\r\n        title={'Message Details'}\r\n        isOpen={isModalOpen}\r\n        onClose={handleModalToggle}\r\n        header={<MessageHeader aria-label='header' />}\r\n      >\r\n        <br />\r\n        <ForwardMessagesComponent\r\n          endpoints={endpoints}\r\n          currentMessage={currentMessage}\r\n          onForwardMessages={forwardMessages}\r\n        />\r\n        <FormGroup label='ID' frameBorder={1}>\r\n          {currentMessage.messageId}\r\n        </FormGroup>\r\n        <br />\r\n        <FormGroup label='Body'>\r\n          <CodeBlock>\r\n            <CodeBlockCode>{currentMessage.body}</CodeBlockCode>\r\n          </CodeBlock>\r\n        </FormGroup>\r\n        <br />\r\n        <FormGroup label='Headers'>\r\n          <TableComposable variant='compact'>\r\n            <Thead aria-label='headers-table-header'>\r\n              <Tr>\r\n                <Td label='Key'>Key</Td>\r\n                <Td label='Type'>Type</Td>\r\n                <Td label='Value'>Value</Td>\r\n              </Tr>\r\n            </Thead>\r\n            <Tbody>\r\n              {currentMessage.headers.map((header, index) => {\r\n                return (\r\n                  <Tr key={index + 'row'}>\r\n                    <Td>{header.key}</Td>\r\n                    <Td>{header.type}</Td>\r\n                    <Td>{header.value}</Td>\r\n                  </Tr>\r\n                )\r\n              })}\r\n            </Tbody>\r\n          </TableComposable>\r\n        </FormGroup>\r\n      </Modal>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nconst MessageSelect: React.FunctionComponent<{\r\n  min: number\r\n  max: number\r\n  value: number\r\n  onNext: () => void\r\n  onPrevious: () => void\r\n  onFirst: () => void\r\n  onLast: () => void\r\n}> = ({ min, max, value, onNext, onPrevious, onFirst, onLast }) => {\r\n  return (\r\n    <div style={{ display: 'flex', alignItems: 'center', width: '300px' }}>\r\n      <Button data-testid='first-message-button' variant='plain' onClick={onFirst} isDisabled={value === min}>\r\n        {'<<'}\r\n      </Button>\r\n      <Button data-testid='previous-message-button' variant='plain' onClick={onPrevious} isDisabled={value === min}>\r\n        {'<'}\r\n      </Button>\r\n      <TextInput id='current-message-index' value={`${value}/${max}`} readOnly />\r\n      <Button data-testid='next-message-button' variant='plain' onClick={onNext} isDisabled={value === max}>\r\n        {'>'}\r\n      </Button>{' '}\r\n      <Button data-testid='last-message-button' variant='plain' onClick={onLast} isDisabled={value === max}>\r\n        {'>>'}\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { Menu, MenuContent, MenuItem, MenuList, Text, TextInput } from '@patternfly/react-core'\r\n\r\nexport const InputWithSuggestions: React.FunctionComponent<{\r\n  suggestions: string[]\r\n  value: string\r\n  onChange: (value: string) => void\r\n}> = ({ suggestions, value, onChange }) => {\r\n  const [menuIsOpen, setMenuIsOpen] = React.useState(false)\r\n  const suggestionsRef = useRef(null)\r\n\r\n  const handleOutsideClick = (event: MouseEvent) => {\r\n    if (suggestionsRef.current && !(suggestionsRef.current as HTMLElement).contains(event.target as Node)) {\r\n      setMenuIsOpen(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('mousedown', handleOutsideClick)\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleOutsideClick)\r\n    }\r\n  }, [])\r\n\r\n  const onSelect = (event: React.MouseEvent<Element, MouseEvent> | undefined, itemId: string | number | undefined) => {\r\n    const selectedText = itemId as string\r\n    onChange(selectedText)\r\n    setMenuIsOpen(false)\r\n    event?.stopPropagation()\r\n  }\r\n\r\n  const suggestionsList = suggestions\r\n    ?.filter(e => e.toLowerCase().includes(value.toLowerCase()))\r\n    .map((e, index) => {\r\n      const regex = value.replace(/[-\\\\/^$*+?.()|[\\]{}]/g, '\\\\$&')\r\n      const suggestion =\r\n        value !== ''\r\n          ? e\r\n              .split(new RegExp(`(${regex})`, 'gi'))\r\n              .map((part, i) =>\r\n                part.toLowerCase() === value.toLowerCase() ? <strong key={part + i}>{part}</strong> : part,\r\n              )\r\n          : e\r\n\r\n      return (\r\n        <MenuItem key={e} itemId={e}>\r\n          <Text>{suggestion}</Text>\r\n        </MenuItem>\r\n      )\r\n    })\r\n\r\n  const suggestionsElement = (\r\n    <div ref={suggestionsRef}>\r\n      <Menu\r\n        style={{ position: 'absolute', top: '100%', zIndex: '999' }}\r\n        onSelect={onSelect}\r\n        onBlur={() => setMenuIsOpen(false)}\r\n        isScrollable\r\n      >\r\n        <MenuContent menuHeight='250px'>\r\n          <MenuList data-testid='suggestions-menu-list'>{suggestionsList}</MenuList>\r\n        </MenuContent>\r\n      </Menu>\r\n    </div>\r\n  )\r\n\r\n  return (\r\n    <div style={{ position: 'relative' }}>\r\n      <TextInput\r\n        value={value}\r\n        onChange={onChange}\r\n        onFocus={() => setMenuIsOpen(true)}\r\n        placeholder=''\r\n        aria-label='Search input'\r\n      />\r\n      {suggestionsList.length > 0 && menuIsOpen && suggestionsElement}\r\n    </div>\r\n  )\r\n}\r\n","import React, { useContext, useEffect, useState } from 'react'\r\nimport { CamelContext } from '@hawtiosrc/plugins/camel/context'\r\nimport { EndpointStatistics, getEndpointStatistics } from '@hawtiosrc/plugins/camel/endpoints/endpoints-service'\r\nimport {\r\n  Bullseye,\r\n  Button,\r\n  Dropdown,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n  EmptyState,\r\n  EmptyStateBody,\r\n  EmptyStateIcon,\r\n  FormGroup,\r\n  PageSection,\r\n  SearchInput,\r\n  Title,\r\n  Toolbar,\r\n  ToolbarContent,\r\n  ToolbarFilter,\r\n  ToolbarGroup,\r\n} from '@patternfly/react-core'\r\nimport { TableComposable, Tbody, Td, Th, Thead, ThProps, Tr } from '@patternfly/react-table'\r\nimport { SearchIcon } from '@patternfly/react-icons'\r\nimport { objectSorter } from '@hawtiosrc/util/objects'\r\n\r\nexport const EndpointStats: React.FunctionComponent = () => {\r\n  const { selectedNode } = useContext(CamelContext)\r\n  const [stats, setStats] = useState<EndpointStatistics[]>([])\r\n  const [filteredStats, setFilteredStats] = useState<EndpointStatistics[]>([])\r\n  const [searchTerm, setSearchTerm] = useState<string>('')\r\n  const [filters, setFilters] = useState<string[]>([])\r\n  const [activeSortIndex, setActiveSortIndex] = React.useState<number>(-1)\r\n  const [activeSortDirection, setActiveSortDirection] = React.useState<'asc' | 'desc'>('asc')\r\n  const [attributeMenuItem, setAttributeMenuItem] = useState('url')\r\n  const [isDropdownOpen, setIsDropdownOpen] = React.useState(false)\r\n\r\n  useEffect(() => {\r\n    if (selectedNode) {\r\n      getEndpointStatistics(selectedNode).then(st => {\r\n        setStats(st)\r\n        setFilteredStats(st)\r\n      })\r\n    }\r\n  }, [selectedNode])\r\n\r\n  const clearFilters = () => {\r\n    setFilters([])\r\n    setSearchTerm('')\r\n    handleSearch('', attributeMenuItem, [])\r\n  }\r\n\r\n  const handleSearch = (value: string, attribute: string, filters: string[]) => {\r\n    setSearchTerm(value)\r\n    //filter with findTerm\r\n    let filtered: EndpointStatistics[] = []\r\n    if (value === '') {\r\n      filtered = [...stats]\r\n    } else {\r\n      filtered = stats.filter(stat => (stat[attribute] as string).toLowerCase().includes(value.toLowerCase()))\r\n    }\r\n\r\n    //filter with the rest of the filters\r\n    filters.forEach(value => {\r\n      const attr = value.split(':')[0] ?? ''\r\n      const searchTerm = value.split(':')[1] ?? ''\r\n      filtered = filtered.filter(stat => String(stat[attr]).toLowerCase().includes(searchTerm.toLowerCase()))\r\n    })\r\n\r\n    setSearchTerm(value)\r\n    setFilteredStats([...filtered])\r\n  }\r\n\r\n  const onDeleteFilter = (filter: string) => {\r\n    const newFilters = filters.filter(f => f !== filter)\r\n    setFilters(newFilters)\r\n    handleSearch(searchTerm, attributeMenuItem, newFilters)\r\n  }\r\n\r\n  const addToFilters = () => {\r\n    setFilters([...filters, `${attributeMenuItem}:${searchTerm}`])\r\n    setSearchTerm('')\r\n  }\r\n  const getSortableStats = (stat: EndpointStatistics): (number | string)[] => {\r\n    const { hits, routeId, dynamic, url, direction } = stat\r\n\r\n    return [url, routeId, direction, String(stat.static), String(dynamic), hits]\r\n  }\r\n  const getSortParams = (columnIndex: number): ThProps['sort'] => ({\r\n    sortBy: {\r\n      index: activeSortIndex,\r\n      direction: activeSortDirection,\r\n      defaultDirection: 'asc', // starting sort direction when first sorting a column. Defaults to 'asc'\r\n    },\r\n    onSort: (_event, index, direction) => {\r\n      setActiveSortIndex(index)\r\n      setActiveSortDirection(direction)\r\n    },\r\n    columnIndex,\r\n  })\r\n\r\n  const attributes = [\r\n    { key: 'url', value: 'URL' },\r\n    { key: 'routeId', value: 'Route ID' },\r\n    { key: 'direction', value: 'Direction' },\r\n  ]\r\n\r\n  const dropdownItems = attributes.map(a => (\r\n    <DropdownItem\r\n      onClick={() => {\r\n        setAttributeMenuItem(a.key)\r\n        handleSearch(searchTerm, a.key, filters)\r\n      }}\r\n      key={a.key}\r\n    >\r\n      {a.value}\r\n    </DropdownItem>\r\n  ))\r\n  const sortStatistics = (): EndpointStatistics[] => {\r\n    let sortedStats = filteredStats\r\n    if (activeSortIndex >= 0) {\r\n      sortedStats = filteredStats.sort((a, b) => {\r\n        const aValue = getSortableStats(a)[activeSortIndex]\r\n        const bValue = getSortableStats(b)[activeSortIndex]\r\n        return objectSorter(aValue, bValue, activeSortDirection === 'desc')\r\n      })\r\n    }\r\n    return sortedStats\r\n  }\r\n\r\n  return (\r\n    <PageSection variant='light'>\r\n      <Title headingLevel='h1'>Endpoints (in/out)</Title>\r\n\r\n      <Toolbar clearAllFilters={clearFilters}>\r\n        <ToolbarContent>\r\n          <ToolbarGroup>\r\n            <Dropdown\r\n              data-testid='attribute-select'\r\n              onSelect={() => setIsDropdownOpen(false)}\r\n              defaultValue='url'\r\n              toggle={\r\n                <DropdownToggle data-testid='attribute-select-toggle' id='toggle-basic' onToggle={setIsDropdownOpen}>\r\n                  {attributes.find(att => att.key === attributeMenuItem)?.value}\r\n                </DropdownToggle>\r\n              }\r\n              isOpen={isDropdownOpen}\r\n              dropdownItems={dropdownItems}\r\n            />\r\n\r\n            <ToolbarFilter\r\n              chips={filters}\r\n              deleteChip={(_e, filter) => onDeleteFilter(filter as string)}\r\n              deleteChipGroup={clearFilters}\r\n              categoryName='Filters'\r\n            >\r\n              <SearchInput\r\n                type='text'\r\n                data-testid='filter-input'\r\n                id='search-input'\r\n                placeholder='Search...'\r\n                value={searchTerm}\r\n                onChange={(_event, value) => {\r\n                  handleSearch(value, attributeMenuItem, filters)\r\n                }}\r\n                aria-label='Search input'\r\n              />\r\n            </ToolbarFilter>\r\n            <Button onClick={addToFilters}>Add Filter</Button>\r\n          </ToolbarGroup>\r\n        </ToolbarContent>\r\n      </Toolbar>\r\n\r\n      {sortStatistics().length > 0 ? (\r\n        <FormGroup>\r\n          <TableComposable aria-label='Endpoints Table' variant='compact' height='80vh'>\r\n            <Thead noWrap>\r\n              <Tr>\r\n                <Th data-testid={'url-header'} sort={getSortParams(0)}>\r\n                  URL\r\n                </Th>\r\n                <Th data-testid={'routeId-header'} sort={getSortParams(1)}>\r\n                  Route ID\r\n                </Th>\r\n                <Th data-testid={'direction-header'} sort={getSortParams(2)}>\r\n                  Direction\r\n                </Th>\r\n                <Th data-testid={'static-header'} sort={getSortParams(3)}>\r\n                  Static\r\n                </Th>\r\n                <Th data-testid={'dynamic-header'} sort={getSortParams(4)}>\r\n                  Dynamic\r\n                </Th>\r\n                <Th data-testid={'hits-header'} sort={getSortParams(5)}>\r\n                  Hits\r\n                </Th>\r\n              </Tr>\r\n            </Thead>\r\n            <Tbody>\r\n              {filteredStats.map((stat: EndpointStatistics, index) => {\r\n                return (\r\n                  <Tr key={'row' + index} data-testid={'row' + index}>\r\n                    <Td style={{ flex: 3 }}>{stat.url}</Td>\r\n                    <Td style={{ width: '20%' }}>{stat.routeId}</Td>\r\n                    <Td style={{ flex: 1 }}>{stat.direction}</Td>\r\n                    <Td style={{ flex: 1 }}>{stat.static + ''}</Td>\r\n                    <Td style={{ flex: 1 }}>{stat.dynamic + ''}</Td>\r\n                    <Td style={{ flex: 1 }}>{stat.hits}</Td>\r\n                  </Tr>\r\n                )\r\n              })}\r\n            </Tbody>\r\n          </TableComposable>\r\n        </FormGroup>\r\n      ) : (\r\n        <Bullseye>\r\n          <EmptyState>\r\n            <EmptyStateIcon icon={SearchIcon} />\r\n            <EmptyStateBody>No results found.</EmptyStateBody>\r\n          </EmptyState>\r\n        </Bullseye>\r\n      )}\r\n    </PageSection>\r\n  )\r\n}\r\n","import { NotificationType, eventService } from '@hawtiosrc/core'\r\nimport { isBlank } from '@hawtiosrc/util/strings'\r\nimport { CodeEditor, Language } from '@patternfly/react-code-editor'\r\nimport {\r\n  Button,\r\n  Flex,\r\n  FlexItem,\r\n  Form,\r\n  FormGroup,\r\n  Panel,\r\n  PanelHeader,\r\n  PanelMain,\r\n  PanelMainBody,\r\n  Select,\r\n  SelectOption,\r\n  SelectOptionObject,\r\n  SelectVariant,\r\n  TextInput,\r\n  Title,\r\n} from '@patternfly/react-core'\r\nimport { TrashIcon } from '@patternfly/react-icons'\r\nimport * as monacoEditor from 'monaco-editor'\r\nimport React, { FormEvent, useContext, useRef, useState } from 'react'\r\nimport xmlFormat from 'xml-formatter'\r\nimport { CamelContext } from '../context'\r\nimport { InputWithSuggestions } from './InputWithSuggestions'\r\nimport { doSendMessage } from './endpoints-service'\r\n// TODO: Parameterise the version of Camel mode for the exchange headers\r\nimport { headers as exchangeHeaders } from './exchange-headers-camel-model.json'\r\n\r\nexport const SendMessage: React.FunctionComponent = () => {\r\n  const { selectedNode } = useContext(CamelContext)\r\n  const messageHeaders = useRef<{ name: string; value: string }[]>([])\r\n  const messageBody = useRef('')\r\n\r\n  if (!selectedNode) {\r\n    return null\r\n  }\r\n\r\n  const updateHeaders = (headers: { name: string; value: string }[]) => {\r\n    messageHeaders.current = [...headers]\r\n  }\r\n\r\n  const updateTheMessageBody = (body: string) => {\r\n    messageBody.current = body\r\n  }\r\n\r\n  const createNotification = (type: NotificationType, message: string) => {\r\n    eventService.notify({\r\n      type: type,\r\n      message: message,\r\n    })\r\n  }\r\n\r\n  const handleSubmit = (event: FormEvent) => {\r\n    event.preventDefault()\r\n    doSendMessage(selectedNode, messageBody.current, messageHeaders.current, createNotification)\r\n  }\r\n\r\n  return (\r\n    <Panel>\r\n      <PanelHeader>\r\n        <Title headingLevel='h3'>Send Message</Title>\r\n      </PanelHeader>\r\n\r\n      <PanelMain>\r\n        <PanelMainBody>\r\n          <Form onSubmit={handleSubmit}>\r\n            <MessageHeaders onHeadersChange={updateHeaders} />\r\n            <MessageBody onBodyChange={updateTheMessageBody} />\r\n            <FormGroup>\r\n              <Button type='submit' className='pf-m-1-col'>\r\n                Send\r\n              </Button>\r\n            </FormGroup>\r\n          </Form>\r\n        </PanelMainBody>\r\n      </PanelMain>\r\n    </Panel>\r\n  )\r\n}\r\n\r\nconst MessageHeaders: React.FunctionComponent<{\r\n  onHeadersChange: (headers: { name: string; value: string }[]) => void\r\n}> = ({ onHeadersChange }) => {\r\n  const [headers, setHeaders] = useState<{ name: string; value: string }[]>([])\r\n  const headersSuggestions = Object.keys(exchangeHeaders as Record<string, { type: string }>)\r\n\r\n  const handleInputChange = (index: number, newValue: string, headerName: string) => {\r\n    const updatedHeaders = [...headers]\r\n    const updatedHeader = updatedHeaders[index]\r\n    if (updatedHeader) {\r\n      updatedHeaders[index] = { ...updatedHeader, [headerName]: newValue }\r\n      setHeaders(updatedHeaders)\r\n      onHeadersChange(updatedHeaders)\r\n    }\r\n  }\r\n  const handleAddHeader = () => {\r\n    const updatedHeaders = [...headers, { name: '', value: '' }]\r\n    setHeaders(updatedHeaders)\r\n    onHeadersChange(updatedHeaders)\r\n  }\r\n\r\n  const handleRemoveHeader = (index: number) => {\r\n    const updatedHeaders = [...headers]\r\n    updatedHeaders.splice(index, 1)\r\n    setHeaders(updatedHeaders)\r\n    onHeadersChange(updatedHeaders)\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <FormGroup>\r\n        {/* eslint-disable-next-line react/jsx-no-undef */}\r\n        <Button variant='link' onClick={handleAddHeader}>\r\n          Add Headers\r\n        </Button>\r\n      </FormGroup>\r\n      <FormGroup>\r\n        {headers.length > 0 && (\r\n          <Flex>\r\n            <FlexItem flex={{ default: 'flexNone', md: 'flex_2' }}>Name</FlexItem>\r\n            <FlexItem flex={{ default: 'flexNone', md: 'flex_2' }}>Value</FlexItem>\r\n            <FlexItem flex={{ default: 'flexNone', md: 'flex_1' }}></FlexItem>\r\n          </Flex>\r\n        )}\r\n\r\n        {headers.length > 0 &&\r\n          headers.map((header, index) => (\r\n            <Flex key={index}>\r\n              <FlexItem flex={{ default: 'flexNone', md: 'flex_2' }}>\r\n                <InputWithSuggestions\r\n                  aria-label={'name-input-' + index}\r\n                  suggestions={headersSuggestions}\r\n                  value={header.name}\r\n                  onChange={newValue => handleInputChange(index, newValue, 'name')}\r\n                />\r\n              </FlexItem>\r\n              <FlexItem flex={{ default: 'flexNone', md: 'flex_2' }}>\r\n                <TextInput\r\n                  type='text'\r\n                  name='value'\r\n                  aria-label={'value-input-' + index}\r\n                  value={header.value}\r\n                  onChange={(newValue, event) => handleInputChange(index, newValue, 'value')}\r\n                />\r\n              </FlexItem>\r\n              <FlexItem flex={{ default: 'flexNone', md: 'flex_1' }} span={4}>\r\n                <Button variant='link' onClick={() => handleRemoveHeader(index)} aria-label='Remove Header'>\r\n                  <TrashIcon />\r\n                </Button>\r\n              </FlexItem>\r\n            </Flex>\r\n          ))}\r\n      </FormGroup>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nconst MessageBody: React.FunctionComponent<{\r\n  onBodyChange: (body: string) => void\r\n}> = ({ onBodyChange }) => {\r\n  const [messageBody, setMessageBody] = useState<string>('')\r\n  const [selectedFormat, setSelectedFormat] = useState<Language>(Language.xml)\r\n  const [isDropdownOpen, setDropdownOpen] = useState(false)\r\n  const editorRef = useRef<monacoEditor.editor.IStandaloneCodeEditor | null>(null)\r\n\r\n  const editorDidMount = (editor: monacoEditor.editor.IStandaloneCodeEditor) => {\r\n    editorRef.current = editor\r\n  }\r\n\r\n  const handleAutoFormat = () => {\r\n    if (isBlank(messageBody)) {\r\n      return\r\n    }\r\n\r\n    if (editorRef.current) {\r\n      const model = editorRef.current.getModel()\r\n      if (model) {\r\n        if (selectedFormat === Language.xml) {\r\n          // monaco doesn't have built in xml formatter\r\n          updateMessageBody(xmlFormat(messageBody))\r\n        } else {\r\n          const range = model.getFullModelRange()\r\n          editorRef.current.trigger('', 'editor.action.formatDocument', { range })\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const updateMessageBody = (body: string) => {\r\n    setMessageBody(body)\r\n    onBodyChange(body)\r\n  }\r\n  const handleToggle = () => {\r\n    setDropdownOpen(!isDropdownOpen)\r\n  }\r\n  const handleFormatChange = (event: React.MouseEvent | React.ChangeEvent, value: string | SelectOptionObject) => {\r\n    setSelectedFormat(value as Language)\r\n    setDropdownOpen(false)\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <FormGroup label='Message'>\r\n        <CodeEditor\r\n          code={messageBody}\r\n          onEditorDidMount={editorDidMount}\r\n          language={selectedFormat}\r\n          height='300px'\r\n          onChange={updateMessageBody}\r\n        />\r\n      </FormGroup>\r\n      <FormGroup>\r\n        <Flex>\r\n          <FlexItem flex={{ default: 'flexNone', md: 'flex_2' }}>\r\n            {' '}\r\n            <Select\r\n              variant={SelectVariant.single}\r\n              aria-label='Select Format'\r\n              onToggle={handleToggle}\r\n              onSelect={handleFormatChange}\r\n              selections={selectedFormat}\r\n              isOpen={isDropdownOpen}\r\n            >\r\n              <SelectOption label='xml' value={Language.xml} />\r\n              <SelectOption label='json' value={Language.json} />\r\n              <SelectOption label='plaintext' value={Language.plaintext} />\r\n            </Select>\r\n          </FlexItem>{' '}\r\n          <FlexItem flex={{ default: 'flexNone', md: 'flex_1' }}>\r\n            <Button variant='secondary' isSmall onClick={handleAutoFormat}>\r\n              Format\r\n            </Button>\r\n          </FlexItem>\r\n        </Flex>\r\n      </FormGroup>\r\n    </React.Fragment>\r\n  )\r\n}\r\n","{\r\n  \"headers\": {\r\n    \"CamelAuthenticationFailurePolicyId\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelAcceptContentType\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelAggregatedSize\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelAggregatedTimeout\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelAggregatedCompletedBy\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelAggregatedCorrelationKey\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelAggregatedCollectionGuard\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelAggregationStrategy\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelAggregationCompleteCurrentGroup\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelAggregationCompleteAllGroups\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelAggregationCompleteAllGroupsInclusive\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelAsyncWait\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelBatchIndex\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelBatchSize\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelBatchComplete\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelBeanMethodName\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelBinding\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"breadcrumbId\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelCharsetName\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelCircuitBreakerState\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelCreatedTimestamp\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelClaimCheckRepository\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"Content-Encoding\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"Content-Length\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"Content-Type\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelCookieHandler\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelCorrelationId\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelContentSchema\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelContentSchemaType\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelDataSetIndex\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"org.apache.camel.default.charset\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelDestinationOverrideUrl\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelDisableHttpStreamCache\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelDuplicateMessage\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelDocumentBuilderFactory\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelExceptionCaught\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelExceptionHandled\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelEvaluateExpressionResult\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelErrorHandlerBridge\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelErrorHandlerCircuitDetected\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelErrorHandlerHandled\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelExternalRedelivered\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelFailureHandled\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelFailureEndpoint\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelFailureRouteId\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelFatalFallbackErrorHandler\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelFileContentType\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelFileLocalWorkPath\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelFileName\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelFileNameOnly\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelFileNameProduced\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelFileNameConsumed\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelFilePath\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelFileParent\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelFileLastModified\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelFileLength\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelFileLockFileAcquired\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelFileLockFileName\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelFileLockExclusiveLock\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelFileLockRandomAccessFile\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelFileLockChannelFile\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelFilterMatched\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelFilterNonXmlChars\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelGroupedExchange\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelHttpScheme\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelHttpHost\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelHttpPort\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelHttpBaseUri\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelHttpCharacterEncoding\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelHttpMethod\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelHttpPath\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelHttpProtocolVersion\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelHttpQuery\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelHttpRawQuery\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelHttpResponseCode\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelHttpResponseText\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelHttpUri\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelHttpUrl\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelHttpChunked\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelHttpServletRequest\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelHttpServletResponse\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelInterceptedEndpoint\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelInterceptSendToEndpointWhenMatched\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelInterrupted\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelLanguageScript\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelLogDebugBodyMaxChars\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelLogDebugStreams\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelLogEipName\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelLoopIndex\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelLoopSize\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"Long-Running-Action\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelMaximumCachePoolSize\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelMaximumEndpointCacheSize\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelMaximumSimpleCacheSize\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelMaximumTransformerCacheSize\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelMaximumValidatorCacheSize\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelMessageHistory\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelMessageHistoryHeaderFormat\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelMessageHistoryOutputFormat\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelMessageTimestamp\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelMulticastIndex\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelMulticastComplete\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelNotifyEvent\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelOnCompletion\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelOnCompletionRouteIds\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelOffset\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelOverruleFileName\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelParentUnitOfWork\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelStreamCacheUnitOfWork\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelRecipientListEndpoint\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelReceivedTimestamp\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelRedelivered\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelRedeliveryCounter\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelRedeliveryMaxCounter\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelRedeliveryExhausted\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelRedeliveryDelay\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelRestHttpUri\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelRestHttpQuery\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelRollbackOnly\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelRollbackOnlyLast\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelRouteStop\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelReuseScripteEngine\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelCompileScript\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelSAXParserFactory\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelSchedulerPolledMessages\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelSoapAction\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelSkipGzipEncoding\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelSkipWwwFormUrlEncoding\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelSlipEndpoint\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelSlipProducer\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelSplitIndex\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelSplitComplete\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelSplitSize\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelStepId\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelTimerCounter\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelTimerFiredTime\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelTimerName\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelTimerPeriod\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelTimerTime\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelToEndpoint\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelTraceEvent\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelTraceEventNodeId\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelTraceEventTimestamp\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelTraceEventExchange\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelTracingHeaderFormat\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelTracingOutputFormat\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelTransactionContextData\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"TryRouteBlock\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"Transfer-Encoding\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelUnitOfWorkExhausted\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelXsltFileName\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelXsltError\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelXsltFatalError\": {\r\n      \"type\": \"java.lang.String\"\r\n    },\r\n    \"CamelXsltWarning\": {\r\n      \"type\": \"java.lang.String\"\r\n    }\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { BlockedExchanges } from './BlockedExchanges'\r\nimport { InflightExchanges } from './InflightExchanges'\r\n\r\nexport const Exchanges: React.FunctionComponent = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <InflightExchanges />\r\n      <BlockedExchanges />\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import { CamelContext } from '@hawtiosrc/plugins/camel/context'\r\nimport { HawtioEmptyCard, HawtioLoadingCard, MBeanNode } from '@hawtiosrc/plugins/shared'\r\nimport { Button, Modal, ModalVariant, Panel, PanelMainBody, Title } from '@patternfly/react-core'\r\nimport { TableComposable, Tbody, Td, Th, Thead, Tr } from '@patternfly/react-table'\r\nimport React, { useContext, useEffect, useRef, useState } from 'react'\r\nimport * as exs from './exchanges-service'\r\nimport { PanelHeader } from '@patternfly/react-core'\r\nimport { PanelMain } from '@patternfly/react-core'\r\n\r\nexport const BlockedExchanges: React.FunctionComponent = () => {\r\n  const { selectedNode } = useContext(CamelContext)\r\n  const [isReading, setIsReading] = useState(false)\r\n  const [exchanges, setExchanges] = useState<exs.Exchange[]>([])\r\n  const [isConfirmUnblockOpen, setIsConfirmUnblockOpen] = useState(false)\r\n  const [exchangeToUnblock, setExchangeToUnblock] = useState<exs.Exchange | null>(null)\r\n  const timerRef = useRef<NodeJS.Timeout | null>(null)\r\n\r\n  /*\r\n   * setTimeout will cache the original state so need to use a ref\r\n   * to allow fetchExchanges() to retrieve the latest value\r\n   */\r\n  const isConfirmUnblockOpenRef = useRef(isConfirmUnblockOpen)\r\n  isConfirmUnblockOpenRef.current = isConfirmUnblockOpen\r\n\r\n  const handleConfirmUnblockToggle = () => {\r\n    setIsConfirmUnblockOpen(!isConfirmUnblockOpen)\r\n  }\r\n\r\n  const onUnblockClicked = (exchange: exs.Exchange) => {\r\n    if (timerRef.current) clearTimeout(timerRef.current)\r\n    setExchangeToUnblock(exchange)\r\n    handleConfirmUnblockToggle()\r\n  }\r\n\r\n  const onUnblockConfirmClicked = () => {\r\n    if (!exchangeToUnblock) return\r\n    exs.unblockExchange(selectedNode as MBeanNode, exchangeToUnblock).then(() => {\r\n      handleConfirmUnblockToggle()\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!selectedNode) return\r\n\r\n    const fetchExchanges = async () => {\r\n      if (!selectedNode) return\r\n\r\n      if (!isConfirmUnblockOpenRef.current) {\r\n        setIsReading(true)\r\n        setExchanges(await exs.getBlockedExchanges(selectedNode))\r\n        setIsReading(false)\r\n\r\n        timerRef.current = setTimeout(fetchExchanges, 10000)\r\n      } else if (isConfirmUnblockOpen && timerRef.current) {\r\n        clearTimeout(timerRef.current)\r\n        timerRef.current = null\r\n      }\r\n    }\r\n\r\n    fetchExchanges()\r\n\r\n    return () => {\r\n      if (timerRef.current) clearTimeout(timerRef.current)\r\n    }\r\n  }, [selectedNode, isConfirmUnblockOpen])\r\n\r\n  if (isReading) {\r\n    return <HawtioLoadingCard />\r\n  }\r\n  if (exchanges.length === 0) {\r\n    return <HawtioEmptyCard title='Blocked Exchanges' message='No blocked exchanges found.' testid='no-exchanges' />\r\n  }\r\n\r\n  const ConfirmUnblockModal = () => (\r\n    <Modal\r\n      variant={ModalVariant.small}\r\n      title='Unblock Exchange'\r\n      titleIconVariant='danger'\r\n      isOpen={isConfirmUnblockOpen}\r\n      onClose={handleConfirmUnblockToggle}\r\n      actions={[\r\n        <Button key='unblock' variant='danger' data-testid='confirm-unblock' onClick={onUnblockConfirmClicked}>\r\n          Unblock\r\n        </Button>,\r\n        <Button key='cancel' variant='link' data-testid='confirm-cancel' onClick={handleConfirmUnblockToggle}>\r\n          Cancel\r\n        </Button>,\r\n      ]}\r\n    >\r\n      <p>You are about to unblock the selected thread.</p>\r\n      <p>This operation cannot be undone so please be careful.</p>\r\n    </Modal>\r\n  )\r\n\r\n  return (\r\n    <Panel>\r\n      <PanelHeader>\r\n        <Title headingLevel='h3'>Blocked Exchanges</Title>\r\n      </PanelHeader>\r\n      <PanelMain>\r\n        <PanelMainBody>\r\n          <TableComposable variant={'compact'} data-testid='exchange-table' aria-label='Blocked Exchanges'>\r\n            <Thead>\r\n              <Tr>\r\n                <Th modifier='wrap'>Exchange ID</Th>\r\n                <Th modifier='wrap'>Route ID</Th>\r\n                <Th modifier='wrap'>Node ID</Th>\r\n                <Th modifier='wrap'>Duration (ms)</Th>\r\n                <Th modifier='wrap'>Elapsed (ms)</Th>\r\n                <Th dataLabel='Action' wrap=''></Th>\r\n              </Tr>\r\n            </Thead>\r\n            <Tbody>\r\n              {exchanges.map((ex, index) => (\r\n                <Tr key={ex.exchangeId + '-' + index}>\r\n                  <Td>{ex.exchangeId}</Td>g <Td>{ex.routeId}</Td>\r\n                  <Td>{ex.nodeId}</Td>\r\n                  <Td>{ex.duration}</Td>\r\n                  <Td>{ex.elapsed}</Td>\r\n                  <Td>\r\n                    <Button variant='link' onClick={() => onUnblockClicked(ex)}>\r\n                      Unblock\r\n                    </Button>\r\n                  </Td>\r\n                </Tr>\r\n              ))}\r\n            </Tbody>\r\n          </TableComposable>\r\n          <ConfirmUnblockModal />\r\n        </PanelMainBody>\r\n      </PanelMain>\r\n    </Panel>\r\n  )\r\n}\r\n","import { jolokiaService } from '@hawtiosrc/plugins/shared'\r\nimport { MBeanNode } from '@hawtiosrc/plugins/shared/tree'\r\nimport { findContext } from '../camel-service'\r\nimport { mbeansType, routeNodeType } from '../globals'\r\n\r\nexport type Exchange = {\r\n  exchangeId: string\r\n  routeId: string\r\n  nodeId: string\r\n  duration: string\r\n  elapsed: string\r\n  fromRouteId: string\r\n}\r\n\r\nexport const INFLIGHT_SERVICE = 'DefaultInflightRepository'\r\nexport const BLOCKED_SERVICE = 'DefaultAsyncProcessorAwaitManager'\r\n\r\nexport async function getInflightExchanges(node: MBeanNode): Promise<Exchange[]> {\r\n  return await getExchanges(node, INFLIGHT_SERVICE)\r\n}\r\n\r\nexport async function getBlockedExchanges(node: MBeanNode): Promise<Exchange[]> {\r\n  return await getExchanges(node, BLOCKED_SERVICE)\r\n}\r\n\r\nexport async function getExchanges(node: MBeanNode, serviceName: string): Promise<Exchange[]> {\r\n  const ctxNode = findContext(node)\r\n  if (!ctxNode) return Promise.resolve([])\r\n\r\n  const service = ctxNode.navigate(mbeansType, 'services', serviceName + '*') as MBeanNode\r\n  if (!service) return Promise.resolve([])\r\n\r\n  const response = await jolokiaService.execute(service.objectName as string, 'browse()')\r\n  let exchanges = Object.values(response as object) as Exchange[]\r\n  if (node.getType() === routeNodeType) {\r\n    exchanges = exchanges.filter(ex => ex.routeId === node.name)\r\n  }\r\n\r\n  exchanges.sort((a: Exchange, b: Exchange) => a.exchangeId.localeCompare(b.exchangeId))\r\n  return exchanges\r\n}\r\n\r\nexport async function unblockExchange(node: MBeanNode, exchange: Exchange): Promise<unknown> {\r\n  const ctxNode = findContext(node)\r\n  // TODO Do we need to reject here if context cannot be found?\r\n  if (!ctxNode) return Promise.resolve(null)\r\n\r\n  const service = ctxNode.navigate(mbeansType, 'services', BLOCKED_SERVICE + '*') as MBeanNode\r\n  // TODO Do we need to reject here if service cannot be found?\r\n  if (!service) return Promise.resolve(null)\r\n\r\n  const response = await jolokiaService.execute(service.objectName as string, 'interrupt(java.lang.String)', [\r\n    exchange.exchangeId,\r\n  ])\r\n  return Promise.resolve(response)\r\n}\r\n\r\n/**\r\n * Checks the inflight repository service if browsing has been enabled.\r\n * See the Camel InflightRepository#isInflightBrowseEnabled for details\r\n */\r\nexport async function canBrowseInflightExchanges(node: MBeanNode): Promise<boolean> {\r\n  const ctxNode = findContext(node)\r\n  if (!ctxNode) return Promise.resolve(false)\r\n\r\n  const service = ctxNode.navigate(mbeansType, 'services', INFLIGHT_SERVICE + '*') as MBeanNode\r\n  if (!service) return Promise.resolve(false)\r\n\r\n  const response = await jolokiaService.readAttribute(service.objectName as string, 'InflightBrowseEnabled')\r\n  return response as boolean\r\n}\r\n","import { CamelContext } from '@hawtiosrc/plugins/camel/context'\r\nimport { HawtioEmptyCard, HawtioLoadingCard } from '@hawtiosrc/plugins/shared'\r\nimport { Panel, PanelHeader, PanelMain, PanelMainBody, Title } from '@patternfly/react-core'\r\nimport { TableComposable, Tbody, Th, Td, Thead, Tr } from '@patternfly/react-table'\r\nimport React, { useContext, useEffect, useState } from 'react'\r\nimport * as exs from './exchanges-service'\r\n\r\nexport const InflightExchanges: React.FunctionComponent = () => {\r\n  const { selectedNode } = useContext(CamelContext)\r\n  const [isReading, setIsReading] = useState(false)\r\n  const [canDisplayInflight, setCanDisplayInflight] = useState(false)\r\n  const [exchanges, setExchanges] = useState<exs.Exchange[]>([])\r\n\r\n  useEffect(() => {\r\n    if (!selectedNode) {\r\n      return\r\n    }\r\n\r\n    setIsReading(true)\r\n\r\n    let timeoutHandle: NodeJS.Timeout\r\n    const fetchExchanges = async () => {\r\n      const cb = await exs.canBrowseInflightExchanges(selectedNode)\r\n      setCanDisplayInflight(cb)\r\n      if (cb) setExchanges(await exs.getInflightExchanges(selectedNode))\r\n\r\n      setIsReading(false)\r\n\r\n      timeoutHandle = setTimeout(fetchExchanges, 10000)\r\n    }\r\n\r\n    fetchExchanges()\r\n\r\n    return () => {\r\n      clearTimeout(timeoutHandle)\r\n    }\r\n  }, [selectedNode])\r\n\r\n  if (isReading) {\r\n    return <HawtioLoadingCard />\r\n  }\r\n\r\n  if (!canDisplayInflight) {\r\n    return (\r\n      <HawtioEmptyCard\r\n        title='Inflight Exchanges'\r\n        message='Browsing of Inflight Exchanges has not been enabled.'\r\n        testid='exchanges-denied'\r\n      />\r\n    )\r\n  }\r\n\r\n  if (exchanges.length === 0) {\r\n    return <HawtioEmptyCard title='Inflight Exchanges' message='No inflight exchanges found.' testid='no-exchanges' />\r\n  }\r\n\r\n  return (\r\n    <Panel>\r\n      <PanelHeader>\r\n        <Title headingLevel='h3'> Inflight Exchanges</Title>\r\n      </PanelHeader>\r\n      <PanelMain>\r\n        <PanelMainBody>\r\n          <TableComposable data-testid='exchange-table' aria-label='Inflight Exchanges' variant='compact'>\r\n            <Thead>\r\n              <Tr>\r\n                <Th modifier='wrap'>Exchange ID</Th>\r\n                <Th modifier='wrap'>Route ID</Th>\r\n                <Th modifier='wrap'>Node ID</Th>\r\n                <Th modifier='wrap'>Duration (ms)</Th>\r\n                <Th modifier='wrap'>Elapsed (ms)</Th>\r\n              </Tr>\r\n            </Thead>\r\n            <Tbody>\r\n              {exchanges.map(ex => (\r\n                <Tr key={ex.exchangeId}>\r\n                  <Td>{ex.exchangeId}</Td>\r\n                  <Td>{ex.routeId}</Td>\r\n                  <Td>{ex.nodeId}</Td>\r\n                  <Td>{ex.duration}</Td>\r\n                  <Td>{ex.elapsed}</Td>\r\n                </Tr>\r\n              ))}\r\n            </Tbody>\r\n          </TableComposable>\r\n        </PanelMainBody>\r\n      </PanelMain>\r\n    </Panel>\r\n  )\r\n}\r\n","import { HawtioEmptyCard, HawtioLoadingCard } from '@hawtiosrc/plugins/shared'\r\nimport { Panel, PanelHeader, PanelMain, PanelMainBody, Title } from '@patternfly/react-core'\r\nimport { TableComposable, Tbody, Td, Th, Thead, Tr } from '@patternfly/react-table'\r\nimport { Response } from 'jolokia.js'\r\nimport React, { useContext, useEffect, useState } from 'react'\r\nimport { CamelContext } from '../context'\r\nimport { log } from '../globals'\r\nimport { ProfileData, profileService } from './profile-service'\r\n\r\nexport const Profile: React.FunctionComponent = () => {\r\n  const { selectedNode } = useContext(CamelContext)\r\n  const [isReading, setIsReading] = useState(true)\r\n  const [profileData, setProfileData] = useState<ProfileData[]>([])\r\n\r\n  useEffect(() => {\r\n    if (!selectedNode) return\r\n\r\n    setIsReading(true)\r\n\r\n    const profile = async () => {\r\n      setProfileData(await profileService.getProfile(selectedNode))\r\n      setIsReading(false)\r\n    }\r\n\r\n    profile()\r\n\r\n    /*\r\n     * Sets up polling and live updating of tracing\r\n     */\r\n    profileService.register(\r\n      {\r\n        type: 'exec',\r\n        mbean: selectedNode.objectName as string,\r\n        operation: 'dumpRouteStatsAsXml()',\r\n      },\r\n      (response: Response) => {\r\n        log.debug('Scheduler - Debug:', response.value)\r\n        profile()\r\n      },\r\n    )\r\n\r\n    // Unregister old handles\r\n    return () => profileService.unregisterAll()\r\n  }, [selectedNode])\r\n\r\n  if (!selectedNode) {\r\n    return <HawtioEmptyCard message='No selection has been made.' />\r\n  }\r\n\r\n  if (isReading) {\r\n    return <HawtioLoadingCard />\r\n  }\r\n\r\n  return (\r\n    <Panel>\r\n      <PanelHeader>\r\n        <Title headingLevel='h3'>Profiling</Title>\r\n      </PanelHeader>\r\n      <PanelMain>\r\n        <PanelMainBody>\r\n          <TableComposable aria-label='message table' variant='compact' isStriped>\r\n            <Thead>\r\n              <Tr>\r\n                <Th>ID</Th>\r\n                <Th>Count</Th>\r\n                <Th>Last</Th>\r\n                <Th>Delta</Th>\r\n                <Th>Mean</Th>\r\n                <Th>Min</Th>\r\n                <Th>Max</Th>\r\n                <Th>Total</Th>\r\n                <Th>Self</Th>\r\n              </Tr>\r\n            </Thead>\r\n            <Tbody isOddStriped>\r\n              {profileData.map(pd => (\r\n                <Tr key={pd.id}>\r\n                  <Td dataLabel='ID'>{pd.id}</Td>\r\n                  <Td dataLabel='Count'>{pd.count}</Td>\r\n                  <Td dataLabel='Last'>{pd.last}</Td>\r\n                  <Td dataLabel='Delta'>{pd.delta}</Td>\r\n                  <Td dataLabel='Mean'>{pd.mean}</Td>\r\n                  <Td dataLabel='Min'>{pd.min}</Td>\r\n                  <Td dataLabel='Max'>{pd.max}</Td>\r\n                  <Td dataLabel='Total'>{pd.total}</Td>\r\n                  <Td dataLabel='Self'>{pd.self}</Td>\r\n                </Tr>\r\n              ))}\r\n            </Tbody>\r\n          </TableComposable>\r\n        </PanelMainBody>\r\n      </PanelMain>\r\n    </Panel>\r\n  )\r\n}\r\n","import { MBeanNode, jolokiaService } from '@hawtiosrc/plugins/shared'\r\nimport { Request, Response } from 'jolokia.js'\r\nimport { log } from '../globals'\r\nimport { routesService } from '../routes-service'\r\n\r\nexport type ProfileData = {\r\n  id: string\r\n  count: number\r\n  last: number\r\n  delta: number\r\n  mean: number\r\n  min: number\r\n  max: number\r\n  total: number\r\n  self: number\r\n}\r\n\r\nclass ProfileService {\r\n  private handles: number[] = []\r\n\r\n  async register(request: Request, callback: (response: Response) => void) {\r\n    const handle = await jolokiaService.register(request, callback)\r\n    log.debug('Register handle:', handle)\r\n    this.handles.push(handle)\r\n  }\r\n\r\n  unregisterAll() {\r\n    log.debug('Unregister all handles:', this.handles)\r\n    this.handles.forEach(handle => jolokiaService.unregister(handle))\r\n    this.handles = []\r\n  }\r\n\r\n  async getProfile(node: MBeanNode): Promise<ProfileData[]> {\r\n    const xml = await routesService.dumpRoutesStatsXML(node)\r\n    if (!xml) return []\r\n\r\n    const profile: ProfileData[] = []\r\n    const stats = routesService.processRoutesStats(xml)\r\n\r\n    stats.forEach(stat => {\r\n      const routeData: ProfileData = {\r\n        id: stat.id,\r\n        count:\r\n          (!stat.exchangesCompleted ? 0 : +stat.exchangesCompleted) +\r\n          (!stat.exchangesFailed ? 0 : +stat.exchangesFailed),\r\n        last: !stat.lastProcessingTime ? 0 : +stat.lastProcessingTime,\r\n        delta: !stat.deltaProcessingTime ? 0 : +stat.deltaProcessingTime,\r\n        mean: !stat.meanProcessingTime ? 0 : +stat.meanProcessingTime,\r\n        min: !stat.minProcessingTime ? 0 : +stat.minProcessingTime,\r\n        max: !stat.maxProcessingTime ? 0 : +stat.maxProcessingTime,\r\n        total: !stat.totalProcessingTime ? 0 : +stat.totalProcessingTime,\r\n        self: !stat.selfProcessingTime ? 0 : +stat.selfProcessingTime,\r\n      }\r\n\r\n      profile.push(routeData)\r\n\r\n      stat.processorStats.forEach(processor => {\r\n        const processorData: ProfileData = {\r\n          id: processor.id,\r\n          count:\r\n            (!processor.exchangesCompleted ? 0 : +processor.exchangesCompleted) +\r\n            (!processor.exchangesFailed ? 0 : +processor.exchangesFailed),\r\n          last: !processor.lastProcessingTime ? 0 : +processor.lastProcessingTime,\r\n          delta: !processor.deltaProcessingTime ? 0 : +processor.deltaProcessingTime,\r\n          mean: !processor.meanProcessingTime ? 0 : +processor.meanProcessingTime,\r\n          min: !processor.minProcessingTime ? 0 : +processor.minProcessingTime,\r\n          max: !processor.maxProcessingTime ? 0 : +processor.maxProcessingTime,\r\n          total: !processor.accumulatedProcessingTime ? 0 : +processor.accumulatedProcessingTime,\r\n\r\n          // self time for processors is their total time\r\n          self: !processor.totalProcessingTime ? 0 : +processor.totalProcessingTime,\r\n        }\r\n\r\n        profile.push(processorData)\r\n      })\r\n    })\r\n\r\n    return profile\r\n  }\r\n}\r\n\r\nexport const profileService = new ProfileService()\r\n","import { HawtioEmptyCard, HawtioLoadingCard } from '@hawtiosrc/plugins/shared'\r\nimport { Label, LabelGroup, Panel, PanelMain, PanelMainBody } from '@patternfly/react-core'\r\nimport { InfoCircleIcon } from '@patternfly/react-icons'\r\nimport React, { useContext, useEffect, useState } from 'react'\r\nimport { CamelContext } from '../context'\r\nimport { log, xmlNodeLocalName } from '../globals'\r\nimport { routesService } from '../routes-service'\r\nimport { schemaService } from '../schema-service'\r\nimport './Properties.css'\r\nimport { PropertiesList } from './PropertiesList'\r\nimport * as pps from './properties-service'\r\nimport { Property } from './property'\r\n\r\nexport const Properties: React.FunctionComponent = () => {\r\n  const { selectedNode } = useContext(CamelContext)\r\n  const [isReading, setIsReading] = useState(true)\r\n\r\n  const [title, setTitle] = useState('')\r\n  const [icon, setIcon] = useState<React.ReactNode>()\r\n  const [labels, setLabels] = useState<string[]>([])\r\n  const [description, setDescription] = useState('')\r\n  const [definedProperties, setDefinedProperties] = useState<Property[]>([])\r\n  const [defaultProperties, setDefaultProperties] = useState<Property[]>([])\r\n  const [undefinedProperties, setUndefinedProperties] = useState<Property[]>([])\r\n\r\n  useEffect(() => {\r\n    if (!selectedNode) return\r\n\r\n    setIsReading(true)\r\n\r\n    const init = async () => {\r\n      const localName = selectedNode.getMetadata(xmlNodeLocalName) ?? ''\r\n      const schemaKey = localName ? localName : selectedNode.name\r\n      const schema = await schemaService.getSchema(selectedNode, schemaKey)\r\n\r\n      let newTitle = localName\r\n      let newIcon = selectedNode.icon\r\n      let newDescription = ''\r\n      let groups: string[] = []\r\n\r\n      if (schema) {\r\n        newTitle = schema['title'] as string\r\n        newIcon = await routesService.getIcon(selectedNode, schema, 24)\r\n        newDescription = schema['description'] as string\r\n        const groupStr = schema['group'] as string\r\n        groups = groupStr.split(',')\r\n\r\n        log.debug('Properties - schema:', schema)\r\n\r\n        const schemaProps = schema['properties'] as Record<string, Record<string, string>>\r\n        pps.populateProperties(selectedNode, schemaProps)\r\n\r\n        setDefinedProperties(pps.getDefinedProperties(schemaProps))\r\n        setDefaultProperties(pps.getDefaultProperties(schemaProps))\r\n        setUndefinedProperties(pps.getUndefinedProperties(schemaProps))\r\n      }\r\n\r\n      setIcon(newIcon)\r\n      setTitle(newTitle)\r\n      setDescription(newDescription)\r\n      setLabels(groups)\r\n\r\n      setIsReading(false)\r\n    }\r\n\r\n    init()\r\n  }, [selectedNode])\r\n\r\n  if (!selectedNode) {\r\n    return <HawtioEmptyCard message='No selection has been made.' />\r\n  }\r\n\r\n  if (isReading) {\r\n    return <HawtioLoadingCard />\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Panel id='properties-card-body'>\r\n        <PanelMain>\r\n          <PanelMainBody id='properties-card-title-panel'>\r\n            {icon}\r\n            <span>{title}</span>\r\n            <LabelGroup id='properties-card-title-panel-labelgroup'>\r\n              {labels.map(label => (\r\n                <Label key={label} icon={<InfoCircleIcon />}>\r\n                  {label}\r\n                </Label>\r\n              ))}\r\n            </LabelGroup>\r\n          </PanelMainBody>\r\n        </PanelMain>\r\n      </Panel>\r\n      {description && (\r\n        <Panel>\r\n          <PanelMain>\r\n            <PanelMainBody id='properties-card-description-panel'>{description}</PanelMainBody>\r\n          </PanelMain>\r\n        </Panel>\r\n      )}\r\n      <PropertiesList title='Defined Properties' values={definedProperties} />\r\n      <PropertiesList title='Default Properties' values={defaultProperties} />\r\n      <PropertiesList title='Undefined Properties' values={undefinedProperties} />\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import {\r\n  DescriptionList,\r\n  DescriptionListDescription,\r\n  DescriptionListGroup,\r\n  DescriptionListTerm,\r\n  Divider,\r\n  Panel,\r\n  PanelHeader,\r\n  PanelMain,\r\n  PanelMainBody,\r\n} from '@patternfly/react-core'\r\nimport React from 'react'\r\nimport './Properties.css'\r\nimport { PropertiesTooltippedName } from './PropertiesTooltippedName'\r\nimport { Property } from './property'\r\n\r\ninterface PropertiesListProps {\r\n  title: string\r\n  values: Property[]\r\n}\r\n\r\nexport const PropertiesList: React.FunctionComponent<PropertiesListProps> = props => {\r\n  return (\r\n    <React.Fragment>\r\n      <Divider />\r\n      <Panel className='properties-list-panel'>\r\n        <PanelHeader>{props.title}</PanelHeader>\r\n        <PanelMain>\r\n          {(!props.values || props.values.length === 0) && (\r\n            <PanelMainBody className='properties-no-properties'>No properties</PanelMainBody>\r\n          )}\r\n          {props.values && props.values.length > 0 && (\r\n            <PanelMainBody>\r\n              <DescriptionList columnModifier={{ default: '2Col' }}>\r\n                {props.values.map(p => {\r\n                  return (\r\n                    <DescriptionListGroup key={p.name}>\r\n                      <DescriptionListTerm>\r\n                        <PropertiesTooltippedName property={p} />\r\n                      </DescriptionListTerm>\r\n                      <DescriptionListDescription>{p.value}</DescriptionListDescription>\r\n                    </DescriptionListGroup>\r\n                  )\r\n                })}\r\n              </DescriptionList>\r\n            </PanelMainBody>\r\n          )}\r\n        </PanelMain>\r\n      </Panel>\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import { Tooltip } from '@patternfly/react-core'\r\nimport { InfoCircleIcon } from '@patternfly/react-icons'\r\nimport React, { useRef } from 'react'\r\nimport './Properties.css'\r\nimport { Property } from './property'\r\n\r\nexport const PropertiesTooltippedName: React.FunctionComponent<{\r\n  property: Property\r\n}> = ({ property }) => {\r\n  const tooltipRef = useRef<HTMLSpanElement>(null)\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {property.name}\r\n\r\n      <span ref={tooltipRef} className='properties-name-tooltip-button'>\r\n        <InfoCircleIcon />\r\n      </span>\r\n      <Tooltip\r\n        id={`camel-properties-${property.id}-tooltip`}\r\n        reference={tooltipRef}\r\n        content={<div>{property.description}</div>}\r\n        removeFindDomNode\r\n      />\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import { escapeHtmlId } from '@hawtiosrc/util/htmls'\r\n\r\nexport class Property {\r\n  readonly id: string\r\n  constructor(\r\n    public name: string,\r\n    public value: string | null,\r\n    public description: string,\r\n  ) {\r\n    this.id = escapeHtmlId(name)\r\n  }\r\n\r\n  static sortByName(a: Property, b: Property) {\r\n    if (a.name < b.name) return -1\r\n    if (a.name > b.name) return 1\r\n\r\n    return 0\r\n  }\r\n}\r\n","import { MBeanNode } from '@hawtiosrc/plugins/shared'\r\nimport { parseXML } from '@hawtiosrc/util/xml'\r\nimport { xmlNodeLocalName } from '../globals'\r\nimport { Property } from './property'\r\n\r\nexport function populateProperties(node: MBeanNode, schemaProperties: Record<string, Record<string, string>>) {\r\n  // Extract the xml fragment from the node's property stash\r\n  const xml = node.getMetadata('xml')\r\n  if (!xml) return\r\n\r\n  // Extract the xml tag name from the node's property stash\r\n  const localName = node.getMetadata(xmlNodeLocalName)\r\n  if (!localName) return\r\n\r\n  // Parse the xml and find the root element using the localname\r\n  const xmlDoc = parseXML(xml)\r\n  const elements = xmlDoc.getElementsByTagName(localName)\r\n\r\n  // Iterate the elements found (should only be 1)\r\n  for (const element of elements) {\r\n    // Iterate the element attributes\r\n    for (const attribute of element.attributes) {\r\n      // If any xml attribute has the same name as a schema property\r\n      // then assign the schema property the value, meaning this will\r\n      // become a defined property\r\n      const property = schemaProperties[attribute.name]\r\n      if (!property) continue\r\n\r\n      property.value = attribute.value\r\n    }\r\n  }\r\n}\r\n\r\nexport function getDefinedProperties(schemaProperties: Record<string, Record<string, string>>): Property[] {\r\n  return Object.keys(schemaProperties)\r\n    .filter(key => {\r\n      const obj = schemaProperties[key] ?? {}\r\n      return Object.keys(obj).includes('value')\r\n    })\r\n    .map(key => {\r\n      const propertySchema = schemaProperties[key]\r\n      const name = propertySchema?.['title'] ?? key\r\n      return new Property(name, propertySchema?.['value'] ?? null, propertySchema?.['description'] ?? '')\r\n    })\r\n    .sort(Property.sortByName)\r\n}\r\n\r\nexport function getDefaultProperties(schemaProperties: Record<string, Record<string, string>>): Property[] {\r\n  return Object.keys(schemaProperties)\r\n    .filter(key => {\r\n      const obj = schemaProperties[key] ?? {}\r\n      return !Object.keys(obj).includes('value') && Object.keys(obj).includes('defaultValue')\r\n    })\r\n    .map(key => {\r\n      const propertySchema = schemaProperties[key]\r\n      const name = propertySchema?.['title'] ?? key\r\n      return new Property(name, propertySchema?.['defaultValue'] ?? null, propertySchema?.['description'] ?? '')\r\n    })\r\n    .sort(Property.sortByName)\r\n}\r\n\r\nexport function getUndefinedProperties(schemaProperties: Record<string, Record<string, string>>): Property[] {\r\n  return Object.keys(schemaProperties)\r\n    .filter(key => {\r\n      const obj = schemaProperties[key] ?? {}\r\n      return !Object.keys(obj).includes('value') && !Object.keys(obj).includes('defaultValue')\r\n    })\r\n    .map(key => {\r\n      const propertySchema = schemaProperties[key]\r\n      const name = propertySchema?.['title'] ?? key\r\n      return new Property(name, null, propertySchema?.['description'] ?? '')\r\n    })\r\n    .sort(Property.sortByName)\r\n}\r\n","import { HawtioEmptyCard, HawtioLoadingCard } from '@hawtiosrc/plugins/shared'\r\nimport {\r\n  Panel,\r\n  PanelMain,\r\n  PanelMainBody,\r\n  SearchInput,\r\n  Select,\r\n  SelectDirection,\r\n  SelectOption,\r\n  SelectOptionObject,\r\n  SelectVariant,\r\n  Toolbar,\r\n  ToolbarContent,\r\n  ToolbarFilter,\r\n  ToolbarGroup,\r\n  ToolbarItem,\r\n} from '@patternfly/react-core'\r\nimport { TableComposable, Tbody, Td, Th, Thead, Tr } from '@patternfly/react-table'\r\nimport { Response } from 'jolokia.js'\r\nimport React, { ChangeEvent, MouseEvent, useCallback, useContext, useEffect, useRef, useState } from 'react'\r\nimport { CamelContext } from '../context'\r\nimport { log } from '../globals'\r\nimport { RestService, restServicesService } from './rest-services-service'\r\nimport './rest-services.css'\r\n\r\nconst defaultFilterInputPlaceholder = 'Filter by URL ...'\r\n\r\ninterface TypeFilter {\r\n  type: string\r\n  value: string\r\n}\r\n\r\nconst headers = ['URL', 'Method', 'Consumes', 'Produces', 'Route ID']\r\n\r\nexport const RestServices: React.FunctionComponent = () => {\r\n  const { selectedNode } = useContext(CamelContext)\r\n  const [isReading, setIsReading] = useState(true)\r\n  const [restSvcData, setRestSvcData] = useState<RestService[]>([])\r\n\r\n  // Ref for toggle of filter type Select control\r\n  const filterTypeToggleRef = useRef<HTMLButtonElement | null>()\r\n  // Set of filters created by filter control and displayed as chips\r\n  const [filters, setFilters] = useState<TypeFilter[]>([])\r\n  // The type of filter to be created - chosen by the Select control\r\n  const [filterType, setFilterType] = useState(headers[0] ?? '')\r\n  // Flag to determine whether the Select control is open or closed\r\n  const [isFilterTypeOpen, setIsFilterTypeOpen] = useState(false)\r\n  // The text value of the filter to be created\r\n  const [filterInput, setFilterInput] = useState<string>()\r\n  // The placeholder of the filter input\r\n  const [filterInputPlaceholder, setFilterInputPlaceholder] = useState<string>(defaultFilterInputPlaceholder)\r\n  // The filtered rest services\r\n  const [filteredRestSvcData, setFilteredRestSvcData] = useState<RestService[]>([])\r\n\r\n  useEffect(() => {\r\n    if (!selectedNode) return\r\n\r\n    setIsReading(true)\r\n\r\n    const fetchRest = async () => {\r\n      const restServices = await restServicesService.getRestServices(selectedNode)\r\n      setRestSvcData(restServices)\r\n      setIsReading(false)\r\n    }\r\n\r\n    fetchRest()\r\n\r\n    /*\r\n     * Sets up polling and live updating of tracing\r\n     */\r\n    restServicesService.register(\r\n      {\r\n        type: 'exec',\r\n        mbean: selectedNode.objectName as string,\r\n        operation: 'listRestServices()',\r\n      },\r\n      (response: Response) => {\r\n        log.debug('Scheduler - Debug:', response.value)\r\n        fetchRest()\r\n      },\r\n    )\r\n\r\n    // Unregister old handles\r\n    return () => restServicesService.unregisterAll()\r\n  }, [selectedNode])\r\n\r\n  const applyFilter = useCallback((filter: TypeFilter, restService: RestService): boolean => {\r\n    type RestSvcKey = keyof typeof restService\r\n\r\n    const restSvcProp = restService[filter.type.toLowerCase() as RestSvcKey]\r\n\r\n    // Want to filter on this property but value\r\n    // is null so filter fails\r\n    if (!restSvcProp) return false\r\n\r\n    return restSvcProp.toLowerCase().includes(filter.value.toLowerCase())\r\n  }, [])\r\n\r\n  const filterRestSvcData = useCallback(\r\n    (restServices: RestService[], theFilters: TypeFilter[]) => {\r\n      const filtered = restServices.filter(restSvc => {\r\n        let status = true\r\n        for (const filter of theFilters) {\r\n          if (!applyFilter(filter, restSvc)) {\r\n            // service fails filter so return\r\n            status = false\r\n            break\r\n          }\r\n\r\n          // service passes this filter so continue\r\n        }\r\n        return status\r\n      })\r\n\r\n      setFilteredRestSvcData(filtered)\r\n    },\r\n    [setFilteredRestSvcData, applyFilter],\r\n  )\r\n\r\n  useEffect(() => {\r\n    filterRestSvcData(restSvcData, filters)\r\n  }, [filterRestSvcData, restSvcData, filters])\r\n\r\n  if (!selectedNode) {\r\n    return <HawtioEmptyCard message='No selection has been made.' />\r\n  }\r\n\r\n  if (isReading) {\r\n    return <HawtioLoadingCard />\r\n  }\r\n\r\n  const clearFilters = () => {\r\n    setFilters([])\r\n    setFilterInput('')\r\n    setFilteredRestSvcData([...restSvcData])\r\n  }\r\n\r\n  const createFilter = (value: string) => {\r\n    setFilterInput(value)\r\n\r\n    if (!filterType) return\r\n\r\n    const filter = {\r\n      type: filterType.toLowerCase(),\r\n      value: value,\r\n    }\r\n\r\n    if (filters.includes(filter)) return\r\n\r\n    const newFilters = filters.concat(filter)\r\n    setFilters(newFilters)\r\n    filterRestSvcData(restSvcData, newFilters)\r\n  }\r\n\r\n  const deleteFilter = (filterChip: string) => {\r\n    const removed = filters.filter(filter => {\r\n      return filterChip !== filter.type + ':' + filter.value\r\n    })\r\n\r\n    setFilters(removed)\r\n    filterRestSvcData(restSvcData, removed)\r\n  }\r\n\r\n  const onSelectFilterType = (\r\n    event: ChangeEvent<Element> | MouseEvent<Element>,\r\n    value: string | SelectOptionObject,\r\n    isPlaceholder?: boolean,\r\n  ) => {\r\n    if (isPlaceholder || !value) return\r\n\r\n    setFilterType(value as string)\r\n    setFilterInputPlaceholder('Filter by ' + value + ' ...')\r\n    setIsFilterTypeOpen(false)\r\n    filterTypeToggleRef?.current?.focus()\r\n  }\r\n\r\n  const onSelectFilterTypeToggle = (isOpen: boolean) => {\r\n    setIsFilterTypeOpen(isOpen)\r\n  }\r\n\r\n  const filterChips = (): string[] => {\r\n    const chips: string[] = []\r\n    filters.forEach(filter => {\r\n      chips.push(filter.type + ':' + filter.value)\r\n    })\r\n\r\n    return chips\r\n  }\r\n\r\n  return (\r\n    <Panel>\r\n      <PanelMain>\r\n        <PanelMainBody id='rest-services-card-body'>\r\n          <Toolbar clearAllFilters={clearFilters}>\r\n            <ToolbarContent>\r\n              <ToolbarGroup variant='filter-group'>\r\n                <ToolbarItem>\r\n                  <Select\r\n                    toggleRef={() => filterTypeToggleRef}\r\n                    variant={SelectVariant.single}\r\n                    id='select-filter-type'\r\n                    aria-label='select-filter-type'\r\n                    onToggle={onSelectFilterTypeToggle}\r\n                    onSelect={onSelectFilterType}\r\n                    selections={filterType}\r\n                    isOpen={isFilterTypeOpen}\r\n                    direction={SelectDirection.down}\r\n                  >\r\n                    {headers.map((name, index) => (\r\n                      <SelectOption key={name + '-' + index} value={name} />\r\n                    ))}\r\n                  </Select>\r\n                </ToolbarItem>\r\n                <ToolbarFilter\r\n                  chips={filterChips()}\r\n                  deleteChip={(_e, filter) => deleteFilter(filter as string)}\r\n                  deleteChipGroup={clearFilters}\r\n                  categoryName='Filters'\r\n                >\r\n                  <SearchInput\r\n                    type='text'\r\n                    id='search-filter-input'\r\n                    aria-label='filter input value'\r\n                    placeholder={filterInputPlaceholder}\r\n                    value={filterInput}\r\n                    onChange={(_event, value) => setFilterInput(value)}\r\n                    onClear={() => setFilterInput('')}\r\n                    onSearch={(_event, value) => createFilter(value)}\r\n                  />\r\n                </ToolbarFilter>\r\n              </ToolbarGroup>\r\n            </ToolbarContent>\r\n          </Toolbar>\r\n          <TableComposable aria-label='message table' variant='compact' isStriped>\r\n            <Thead>\r\n              <Tr>\r\n                {headers.map(header => (\r\n                  <Th key={header}>{header}</Th>\r\n                ))}\r\n              </Tr>\r\n            </Thead>\r\n            <Tbody isOddStriped>\r\n              {filteredRestSvcData.map(rsdata => (\r\n                <Tr key={rsdata.url + '_' + rsdata.method}>\r\n                  <Td dataLabel='URL'>{rsdata.url}</Td>\r\n                  <Td dataLabel='Method'>{rsdata.method}</Td>\r\n                  <Td dataLabel='Consumes'>{rsdata.consumes}</Td>\r\n                  <Td dataLabel='Produces'>{rsdata.produces}</Td>\r\n                  <Td dataLabel='Route ID'>{rsdata.routeId}</Td>\r\n                </Tr>\r\n              ))}\r\n            </Tbody>\r\n          </TableComposable>\r\n        </PanelMainBody>\r\n      </PanelMain>\r\n    </Panel>\r\n  )\r\n}\r\n","import { MBeanNode, jolokiaService } from '@hawtiosrc/plugins/shared'\r\nimport { isObject } from '@hawtiosrc/util/objects'\r\nimport { Request, Response } from 'jolokia.js'\r\nimport * as camelService from '../camel-service'\r\nimport { log } from '../globals'\r\n\r\nexport interface RestService {\r\n  url: string\r\n  method: string\r\n  consumes: string\r\n  produces: string\r\n  routeId: string\r\n}\r\n\r\nclass RestServicesService {\r\n  private handles: number[] = []\r\n\r\n  async register(request: Request, callback: (response: Response) => void) {\r\n    const handle = await jolokiaService.register(request, callback)\r\n    log.debug('Register handle:', handle)\r\n    this.handles.push(handle)\r\n  }\r\n\r\n  unregisterAll() {\r\n    log.debug('Unregister all handles:', this.handles)\r\n    this.handles.forEach(handle => jolokiaService.unregister(handle))\r\n    this.handles = []\r\n  }\r\n\r\n  async getRestServices(node: MBeanNode): Promise<RestService[]> {\r\n    if (!node) return []\r\n\r\n    const registry = camelService.findRestRegistryBean(node)\r\n    if (!registry || !registry.objectName) return []\r\n\r\n    const obj = await jolokiaService.execute(registry.objectName, 'listRestServices()')\r\n    if (!obj || !isObject(obj)) return []\r\n\r\n    const restServices: RestService[] = []\r\n\r\n    //\r\n    // the JMX tabular data has 2 indexes so\r\n    // need to dive 2 levels down to extract the data\r\n    //\r\n    for (const [, svc] of Object.entries(obj)) {\r\n      if (!svc || !isObject(svc)) continue\r\n      for (const [, svcType] of Object.entries(svc)) {\r\n        if (!svcType || !isObject(svcType)) continue\r\n        restServices.push(svcType as RestService)\r\n      }\r\n    }\r\n\r\n    return restServices\r\n  }\r\n}\r\n\r\nexport const restServicesService = new RestServicesService()\r\n","import { eventService } from '@hawtiosrc/core'\r\nimport { HawtioEmptyCard, HawtioLoadingCard, workspace } from '@hawtiosrc/plugins/shared'\r\nimport { objectSorter } from '@hawtiosrc/util/objects'\r\nimport {\r\n  Button,\r\n  Dropdown,\r\n  DropdownItem,\r\n  KebabToggle,\r\n  Label,\r\n  Modal,\r\n  Toolbar,\r\n  ToolbarContent,\r\n  ToolbarItem,\r\n} from '@patternfly/react-core'\r\nimport { AsleepIcon, PlayIcon, Remove2Icon } from '@patternfly/react-icons'\r\nimport { TableComposable, Tbody, Td, Th, ThProps, Thead, Tr } from '@patternfly/react-table'\r\nimport React, { useContext, useEffect, useState } from 'react'\r\nimport { CamelContext } from '../context'\r\nimport { CamelRoute } from './route'\r\nimport { routesService } from './routes-service'\r\n\r\nconst ROUTES_REFRESH_INTERVAL = 10000 // milliseconds\r\n\r\nexport const RouteStateLabel: React.FunctionComponent<{ state: string | null }> = ({ state }) => {\r\n  if (!state) {\r\n    return <Label color='grey'>Unknown</Label>\r\n  }\r\n  return state === 'Started' ? <Label color='green'>{state}</Label> : <Label color='red'>{state}</Label>\r\n}\r\n\r\nexport const CamelRoutes: React.FunctionComponent = () => {\r\n  const { selectedNode } = useContext(CamelContext)\r\n  const [routes, setRoutes] = useState<CamelRoute[]>([])\r\n  const [isReading, setIsReading] = useState(true)\r\n  const [selected, setSelected] = useState<string[]>([])\r\n  const [isConfirmDeleteOpen, setIsConfirmDeleteOpen] = useState(false)\r\n  const [activeSortIndex, setActiveSortIndex] = useState(-1)\r\n  const [activeSortDirection, setActiveSortDirection] = useState<'asc' | 'desc'>('asc')\r\n\r\n  useEffect(() => {\r\n    if (!selectedNode) {\r\n      return\r\n    }\r\n\r\n    setIsReading(true)\r\n    let timeoutHandle: NodeJS.Timeout\r\n    const getRouteAttributes = async () => {\r\n      const routes = await routesService.getRoutesAttributes(selectedNode)\r\n      setRoutes(routes)\r\n      setIsReading(false)\r\n\r\n      timeoutHandle = setTimeout(getRouteAttributes, ROUTES_REFRESH_INTERVAL)\r\n    }\r\n\r\n    getRouteAttributes()\r\n\r\n    return () => timeoutHandle && clearTimeout(timeoutHandle)\r\n  }, [selectedNode])\r\n\r\n  if (!selectedNode) {\r\n    return null\r\n  }\r\n\r\n  if (isReading) {\r\n    return <HawtioLoadingCard />\r\n  }\r\n\r\n  if (routes.length === 0) {\r\n    return <HawtioEmptyCard message='This context does not have any routes.' />\r\n  }\r\n\r\n  // Sort routes in place\r\n  if (activeSortIndex >= 0) {\r\n    routes.sort((a, b) => {\r\n      const aValue = a.toArrayForSort()[activeSortIndex]\r\n      const bValue = b.toArrayForSort()[activeSortIndex]\r\n      return objectSorter(aValue, bValue, activeSortDirection === 'desc')\r\n    })\r\n  }\r\n\r\n  const onSelect = (routeId: string, isSelecting: boolean) => {\r\n    const selectedRoutes = selected.filter(r => routeId !== r)\r\n    setSelected(isSelecting ? [...selectedRoutes, routeId] : [...selectedRoutes])\r\n  }\r\n\r\n  const onSelectAll = (isSelected: boolean) => {\r\n    const selected = routes.map(r => r.routeId)\r\n    setSelected(isSelected ? selected : [])\r\n  }\r\n\r\n  const isAllSelected = (): boolean => {\r\n    return selected.length === routes.length\r\n  }\r\n\r\n  const handleConfirmDeleteToggle = () => {\r\n    setIsConfirmDeleteOpen(!isConfirmDeleteOpen)\r\n  }\r\n\r\n  const getSortParams = (columnIndex: number): ThProps['sort'] => ({\r\n    sortBy: {\r\n      index: activeSortIndex,\r\n      direction: activeSortDirection,\r\n      defaultDirection: 'asc', // starting sort direction when first sorting a column. Defaults to 'asc'\r\n    },\r\n    onSort: (_event, index, direction) => {\r\n      setActiveSortIndex(index)\r\n      setActiveSortDirection(direction)\r\n    },\r\n    columnIndex,\r\n  })\r\n\r\n  const deleteRoutes = async () => {\r\n    let deleted = 0\r\n    for (const routeId of selected) {\r\n      const route = routes.find(r => r.routeId === routeId && r.state === 'Stopped')\r\n      if (!route) {\r\n        continue\r\n      }\r\n      try {\r\n        await routesService.deleteRoute(route.node)\r\n        deleted++\r\n        workspace.refreshTree()\r\n      } catch (error) {\r\n        eventService.notify({\r\n          type: 'danger',\r\n          message: `Couldn't delete the route: ${error}`,\r\n        })\r\n      }\r\n    }\r\n    if (deleted > 0) {\r\n      eventService.notify({\r\n        type: 'success',\r\n        message: `${deleted} routes deleted successfully`,\r\n      })\r\n    }\r\n    setSelected([])\r\n    setRoutes([])\r\n    setIsConfirmDeleteOpen(false)\r\n  }\r\n\r\n  const ConfirmDeleteModal = () => (\r\n    <Modal\r\n      variant='small'\r\n      title='Delete Camel Routes'\r\n      titleIconVariant='danger'\r\n      isOpen={isConfirmDeleteOpen}\r\n      onClose={handleConfirmDeleteToggle}\r\n      actions={[\r\n        <Button key='delete' variant='danger' onClick={deleteRoutes}>\r\n          Delete\r\n        </Button>,\r\n        <Button key='cancel' variant='link' onClick={handleConfirmDeleteToggle}>\r\n          Cancel\r\n        </Button>,\r\n      ]}\r\n    >\r\n      <p>You are about to delete the selected camel routes.</p>\r\n      <p>This operation cannot be undone so please be careful.</p>\r\n    </Modal>\r\n  )\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <CamelRoutesToolbar\r\n        routes={routes}\r\n        selectedRoutes={selected}\r\n        handleConfirmDeleteToggle={handleConfirmDeleteToggle}\r\n      />\r\n      <TableComposable\r\n        id='camel-routes-table'\r\n        data-testid='camel-routes-table'\r\n        aria-label='Camel routes table'\r\n        variant='compact'\r\n      >\r\n        <Thead noWrap>\r\n          <Tr>\r\n            <Th\r\n              select={{\r\n                onSelect: (_event, isSelecting) => onSelectAll(isSelecting),\r\n                isSelected: isAllSelected(),\r\n              }}\r\n            />\r\n            <Th data-testid='name-header' sort={getSortParams(0)}>\r\n              Name\r\n            </Th>\r\n            <Th data-testid='state-header' sort={getSortParams(1)}>\r\n              State\r\n            </Th>\r\n            <Th data-testid='uptime-header' sort={getSortParams(2)}>\r\n              Uptime\r\n            </Th>\r\n            <Th data-testid='completed-header' sort={getSortParams(3)}>\r\n              Completed\r\n            </Th>\r\n            <Th data-testid='failed-header' sort={getSortParams(4)}>\r\n              Failed\r\n            </Th>\r\n            <Th data-testid='handled-header' sort={getSortParams(5)}>\r\n              Handled\r\n            </Th>\r\n            <Th data-testid='total-header' sort={getSortParams(6)}>\r\n              Total\r\n            </Th>\r\n            <Th data-testid='inflight-header' sort={getSortParams(7)}>\r\n              InFlight\r\n            </Th>\r\n            <Th data-testid='meantime-header' sort={getSortParams(8)}>\r\n              Meantime\r\n            </Th>\r\n          </Tr>\r\n        </Thead>\r\n        <Tbody>\r\n          {routes.map((route, rowIndex) => {\r\n            return (\r\n              <Tr data-testid={'row' + rowIndex} key={route.routeId}>\r\n                <Td\r\n                  select={{\r\n                    rowIndex,\r\n                    onSelect: (_event, isSelected) => {\r\n                      onSelect(route.routeId, isSelected)\r\n                    },\r\n                    isSelected: selected.includes(route.routeId),\r\n                  }}\r\n                />\r\n                <Td dataLabel='Name'>{route.routeId}</Td>\r\n                <Td dataLabel='State'>\r\n                  <RouteStateLabel state={route.state} />\r\n                </Td>\r\n                <Td dataLabel='Uptime'>{route.uptime}</Td>\r\n                <Td dataLabel='Completed'>{route.exchangesCompleted}</Td>\r\n                <Td dataLabel='Failed'>{route.exchangesFailed}</Td>\r\n                <Td dataLabel='Handled'>{route.failuresHandled}</Td>\r\n                <Td dataLabel='Total'>{route.exchangesTotal}</Td>\r\n                <Td dataLabel='InFlight'>{route.exchangesInflight}</Td>\r\n                <Td dataLabel='Meantime'>{route.meanProcessingTime}</Td>\r\n              </Tr>\r\n            )\r\n          })}\r\n        </Tbody>\r\n      </TableComposable>\r\n      <ConfirmDeleteModal />\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nconst CamelRoutesToolbar: React.FunctionComponent<{\r\n  routes: CamelRoute[]\r\n  selectedRoutes: string[]\r\n  handleConfirmDeleteToggle: () => void\r\n}> = ({ routes, selectedRoutes, handleConfirmDeleteToggle }) => {\r\n  const { selectedNode } = useContext(CamelContext)\r\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false)\r\n\r\n  if (!selectedNode) {\r\n    return null\r\n  }\r\n\r\n  // The first route is sampled only to check RBAC on the route MBean\r\n  const firstRoute = routes[0]\r\n  if (!firstRoute) {\r\n    return null\r\n  }\r\n\r\n  const isSuspendEnabled = (state: string): boolean => {\r\n    let res = false\r\n    selectedRoutes.forEach(id => {\r\n      const route = routes.find(r => r.routeId === id)\r\n      if (route && route.state === state) res = true\r\n    })\r\n    return res\r\n  }\r\n\r\n  const startRoutes = async () => {\r\n    let startedCount = 0\r\n    for (const routeId of selectedRoutes) {\r\n      const route = routes.find(r => r.routeId === routeId && r.state === 'Stopped')\r\n      if (!route) {\r\n        continue\r\n      }\r\n      try {\r\n        await routesService.startRoute(route.node)\r\n        startedCount++\r\n      } catch (error) {\r\n        eventService.notify({\r\n          type: 'danger',\r\n          message: `Couldn't start the route: ${error}`,\r\n        })\r\n      }\r\n    }\r\n\r\n    if (startedCount > 0) {\r\n      eventService.notify({\r\n        type: 'success',\r\n        message: `${startedCount} routes started successfully`,\r\n      })\r\n    }\r\n  }\r\n\r\n  const stopRoutes = async () => {\r\n    let stoppedCount = 0\r\n    for (const routeId of selectedRoutes) {\r\n      const route = routes.find(r => r.routeId === routeId && r.state === 'Started')\r\n      if (!route) {\r\n        continue\r\n      }\r\n      try {\r\n        await routesService.stopRoute(route.node)\r\n        stoppedCount++\r\n      } catch (error) {\r\n        eventService.notify({\r\n          type: 'danger',\r\n          message: `Couldn't stop the route: ${error}`,\r\n        })\r\n      }\r\n    }\r\n\r\n    if (stoppedCount > 0) {\r\n      eventService.notify({\r\n        type: 'success',\r\n        message: `${stoppedCount} routes stopped successfully`,\r\n      })\r\n    }\r\n  }\r\n\r\n  const onDeleteClicked = () => {\r\n    handleConfirmDeleteToggle()\r\n    setIsDropdownOpen(false)\r\n  }\r\n\r\n  const onDropdownToggle = (isOpen: boolean) => {\r\n    setIsDropdownOpen(isOpen)\r\n  }\r\n\r\n  const toolbarButtons = (\r\n    <React.Fragment>\r\n      <ToolbarItem>\r\n        <Button\r\n          variant='primary'\r\n          isSmall={true}\r\n          isDisabled={!routesService.canStartRoute(firstRoute.node) || !isSuspendEnabled('Stopped')}\r\n          icon={<PlayIcon />}\r\n          onClick={startRoutes}\r\n        >\r\n          Start\r\n        </Button>\r\n      </ToolbarItem>\r\n      <ToolbarItem>\r\n        <Button\r\n          variant='danger'\r\n          isSmall={true}\r\n          isDisabled={!routesService.canStopRoute(firstRoute.node) || !isSuspendEnabled('Started')}\r\n          icon={<AsleepIcon />}\r\n          onClick={stopRoutes}\r\n        >\r\n          Stop\r\n        </Button>\r\n      </ToolbarItem>\r\n    </React.Fragment>\r\n  )\r\n\r\n  const dropdownItems = [\r\n    <DropdownItem\r\n      key='action'\r\n      component={\r\n        <Button\r\n          variant='plain'\r\n          isDisabled={!routesService.canDeleteRoute(firstRoute.node) || !isSuspendEnabled('Stopped')}\r\n          onClick={onDeleteClicked}\r\n        >\r\n          <Remove2Icon /> Delete\r\n        </Button>\r\n      }\r\n    />,\r\n  ]\r\n\r\n  return (\r\n    <Toolbar id='camel-routes-toolbar'>\r\n      <ToolbarContent>\r\n        {toolbarButtons}\r\n        <ToolbarItem id='camel-routes-toolbar-item-dropdown'>\r\n          <Dropdown\r\n            toggle={<KebabToggle id='camel-routes-toolbar-item-dropdown-toggle' onToggle={onDropdownToggle} />}\r\n            isOpen={isDropdownOpen}\r\n            dropdownItems={dropdownItems}\r\n            isPlain\r\n          />\r\n        </ToolbarItem>\r\n      </ToolbarContent>\r\n    </Toolbar>\r\n  )\r\n}\r\n","import { MBeanNode } from '@hawtiosrc/plugins/shared'\r\n\r\nexport class CamelRoute {\r\n  constructor(\r\n    public node: MBeanNode,\r\n    public routeId: string,\r\n    public state: string | null,\r\n    public uptime: string,\r\n    public exchangesCompleted: number,\r\n    public exchangesFailed: number,\r\n    public failuresHandled: number,\r\n    public exchangesTotal: number,\r\n    public exchangesInflight: number,\r\n    public meanProcessingTime: number,\r\n  ) {}\r\n\r\n  toArrayForSort(): (number | string)[] {\r\n    const {\r\n      routeId,\r\n      state,\r\n      uptime,\r\n      exchangesCompleted,\r\n      exchangesFailed,\r\n      failuresHandled,\r\n      exchangesTotal,\r\n      exchangesInflight,\r\n      meanProcessingTime,\r\n    } = this\r\n\r\n    return [\r\n      routeId,\r\n      state ?? '',\r\n      uptime,\r\n      exchangesCompleted,\r\n      exchangesFailed,\r\n      failuresHandled,\r\n      exchangesTotal,\r\n      exchangesInflight,\r\n      meanProcessingTime,\r\n    ]\r\n  }\r\n}\r\n","import { jolokiaService } from '@hawtiosrc/plugins/shared/jolokia-service'\r\nimport { MBeanNode } from '@hawtiosrc/plugins/shared/tree'\r\nimport { routeGroupsType, routeNodeType } from '../globals'\r\nimport { CamelRoute } from './route'\r\n\r\nexport const ROUTE_OPERATIONS = {\r\n  start: 'start()',\r\n  stop: 'stop()',\r\n  remove: 'remove()',\r\n} as const\r\n\r\ninterface IRoutesService {\r\n  getRoutesAttributes(routeFolder: MBeanNode | null): Promise<CamelRoute[]>\r\n  canStartRoute(node: MBeanNode): boolean\r\n  startRoute(node: MBeanNode): Promise<void>\r\n  canStopRoute(node: MBeanNode): boolean\r\n  stopRoute(node: MBeanNode): Promise<void>\r\n  canDeleteRoute(node: MBeanNode): boolean\r\n  deleteRoute(node: MBeanNode): Promise<void>\r\n}\r\n\r\nclass RoutesService implements IRoutesService {\r\n  async getRoutesAttributes(routesFolder: MBeanNode): Promise<CamelRoute[]> {\r\n    const children = routesFolder.getChildren()\r\n    if (children.length === 0) return []\r\n\r\n    /*\r\n     * If the children are route groups then it recurses\r\n     * to return the contents of the groups\r\n     */\r\n    const routes: CamelRoute[] = []\r\n    for (const child of children) {\r\n      if (child.getType() === routeNodeType) {\r\n        // read attributes of route\r\n        const camelRoute = await this.readRouteAttributes(child)\r\n        if (camelRoute) routes.push(camelRoute)\r\n      } else if (child.getType() === routeGroupsType) {\r\n        // recurse into route group\r\n        const camelRoutes = await this.getRoutesAttributes(child)\r\n        routes.push(...camelRoutes)\r\n      }\r\n    }\r\n\r\n    return routes\r\n  }\r\n\r\n  private async readRouteAttributes(routeNode: MBeanNode): Promise<CamelRoute | null> {\r\n    const { objectName } = routeNode\r\n    if (!objectName) return null\r\n\r\n    const attributes = await jolokiaService.readAttributes(objectName)\r\n    return new CamelRoute(\r\n      routeNode,\r\n      attributes['RouteId'] as string,\r\n      attributes['State'] as string,\r\n      attributes['Uptime'] as string,\r\n      attributes['ExchangesCompleted'] as number,\r\n      attributes['ExchangesFailed'] as number,\r\n      attributes['FailuresHandled'] as number,\r\n      attributes['ExchangesTotal'] as number,\r\n      attributes['ExchangesInflight'] as number,\r\n      attributes['MeanProcessingTime'] as number,\r\n    )\r\n  }\r\n\r\n  canStartRoute(node: MBeanNode): boolean {\r\n    return node.hasInvokeRights(ROUTE_OPERATIONS.start)\r\n  }\r\n\r\n  async startRoute(node: MBeanNode) {\r\n    const { objectName } = node\r\n    if (!objectName) return\r\n\r\n    await jolokiaService.execute(objectName, ROUTE_OPERATIONS.start)\r\n  }\r\n\r\n  canStopRoute(node: MBeanNode): boolean {\r\n    return node.hasInvokeRights(ROUTE_OPERATIONS.stop)\r\n  }\r\n\r\n  async stopRoute(node: MBeanNode) {\r\n    const { objectName } = node\r\n    if (!objectName) return\r\n\r\n    await jolokiaService.execute(objectName, ROUTE_OPERATIONS.stop)\r\n  }\r\n\r\n  canDeleteRoute(node: MBeanNode): boolean {\r\n    return node.hasInvokeRights(ROUTE_OPERATIONS.remove)\r\n  }\r\n\r\n  async deleteRoute(node: MBeanNode) {\r\n    const { objectName } = node\r\n    if (!objectName) return\r\n\r\n    await jolokiaService.execute(objectName, ROUTE_OPERATIONS.remove)\r\n  }\r\n}\r\n\r\nexport const routesService = new RoutesService()\r\n","import { CamelContext } from '@hawtiosrc/plugins/camel/context'\r\nimport { CodeEditor, Language } from '@patternfly/react-code-editor'\r\nimport React, { useContext, useEffect, useState } from 'react'\r\nimport { log } from '../globals'\r\n\r\nexport const Source: React.FunctionComponent = () => {\r\n  const { selectedNode } = useContext(CamelContext)\r\n  const [xmlSource, setXmlSource] = useState('')\r\n\r\n  useEffect(() => {\r\n    const xml = selectedNode?.getMetadata('xml')\r\n    if (xml) {\r\n      setXmlSource(xml)\r\n    } else {\r\n      log.warn('Source - Unable to fetch XML from', selectedNode)\r\n    }\r\n  }, [selectedNode])\r\n\r\n  return (\r\n    <div style={{ height: '100%' }}>\r\n      <CodeEditor isReadOnly code={xmlSource} language={Language.xml} height={'75vh'} />\r\n    </div>\r\n  )\r\n}\r\n","import { HawtioEmptyCard, HawtioLoadingCard, MBeanNode } from '@hawtiosrc/plugins/shared'\r\nimport { childText, parseXML } from '@hawtiosrc/util/xml'\r\nimport { Button, Divider, Panel, PanelHeader, PanelMain, PanelMainBody, Text, Title } from '@patternfly/react-core'\r\nimport { BanIcon, PlayIcon } from '@patternfly/react-icons'\r\nimport { TableComposable, Tbody, Td, Th, Thead, Tr } from '@patternfly/react-table'\r\nimport { Response } from 'jolokia.js'\r\nimport React, { useCallback, useContext, useEffect, useRef, useState } from 'react'\r\nimport * as camelService from '../camel-service'\r\nimport { CamelContext } from '../context'\r\nimport { debugService as ds } from '../debug'\r\nimport { MessageDrawer } from '../debug/MessageDrawer'\r\nimport { MessageData } from '../debug/debug-service'\r\nimport { log } from '../globals'\r\nimport { RouteDiagram } from '../route-diagram/RouteDiagram'\r\nimport { RouteDiagramContext, useRouteDiagramContext } from '../route-diagram/context'\r\nimport './Tracing.css'\r\nimport { tracingService as ts } from './tracing-service'\r\n\r\nconst MESSAGES_LIMIT = 500\r\n\r\nexport const Trace: React.FunctionComponent = () => {\r\n  const { selectedNode } = useContext(CamelContext)\r\n  const { graphNodeData, setGraphNodeData, graphSelection, setGraphSelection, setShowStatistics } =\r\n    useRouteDiagramContext()\r\n  const [isReading, setIsReading] = useState(true)\r\n  const [isTracing, setIsTracing] = useState(false)\r\n  const messages = useRef<MessageData[]>([])\r\n  const [message, setMessage] = useState<MessageData>()\r\n\r\n  const [msgPanelExpanded, setMsgPanelExpanded] = React.useState(false)\r\n\r\n  const setMessages = (newMessages: MessageData[]) => {\r\n    messages.current = newMessages\r\n  }\r\n\r\n  const populateRouteMessages = useCallback((value: string, routeNode: MBeanNode) => {\r\n    log.debug('Populating response', value)\r\n\r\n    if (!value) return\r\n\r\n    // lets parse the XML DOM here...\r\n    const xmlDoc = parseXML(value)\r\n    let allMessages = xmlDoc.getElementsByTagName('fabricTracerEventMessage')\r\n    if (!allMessages || !allMessages.length) {\r\n      // lets try find another element name\r\n      allMessages = xmlDoc.getElementsByTagName('backlogTracerEventMessage')\r\n    }\r\n\r\n    if (allMessages.length === 0) return // nothing new to add\r\n\r\n    const newMsgs = []\r\n    for (let idx = allMessages.length - 1; idx >= 0; --idx) {\r\n      const message = allMessages[idx]\r\n      if (!message) continue\r\n\r\n      const routeId = childText(message, 'routeId')\r\n      if (routeId !== routeNode.name) continue\r\n\r\n      const msgData = ds.createMessageFromXml(message)\r\n      if (!msgData) continue\r\n\r\n      const toNode = childText(message, 'toNode')\r\n      if (toNode) msgData.toNode = toNode\r\n\r\n      newMsgs.push(msgData)\r\n    }\r\n\r\n    /*\r\n     * Adds new messages to existing stack\r\n     */\r\n    const msgs = [...newMsgs, ...messages.current]\r\n\r\n    /*\r\n     * Remove messages when the array reaches its limit\r\n     * and the user isn't looking at a message details\r\n     */\r\n    if (msgs.length > MESSAGES_LIMIT) msgs.splice(MESSAGES_LIMIT)\r\n\r\n    // TODO\r\n    // Do we still need tracer status??\r\n    // keep state of the traced messages on tracerStatus\r\n    // tracerStatus.messages = $scope.messages;\r\n\r\n    setMessages(msgs)\r\n  }, [])\r\n\r\n  /**\r\n   * Called when isTracing is changed to reload tracing properties\r\n   */\r\n  const tracingChanges = useCallback(\r\n    async (isTracing: boolean) => {\r\n      if (!selectedNode) return\r\n\r\n      // Unregister old handles\r\n      ts.unregisterAll()\r\n\r\n      setIsTracing(isTracing)\r\n      await ts.setTracing(selectedNode, isTracing)\r\n\r\n      const tracingNode = ts.getTracingBean(selectedNode)\r\n      if (!tracingNode) return\r\n\r\n      if (isTracing) {\r\n        /*\r\n         * Sets up polling and live updating of tracing\r\n         */\r\n        ts.register(\r\n          {\r\n            type: 'exec',\r\n            mbean: tracingNode.objectName as string,\r\n            operation: 'dumpAllTracedMessagesAsXml()',\r\n          },\r\n          (response: Response) => {\r\n            log.debug('Scheduler - Debug:', response.value)\r\n            populateRouteMessages(response?.value as string, selectedNode)\r\n          },\r\n        )\r\n      } else {\r\n        setMessages([])\r\n        ts.unregisterAll()\r\n      }\r\n    },\r\n    [selectedNode, populateRouteMessages],\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (!selectedNode) return\r\n\r\n    setIsReading(true)\r\n\r\n    ts.isTracing(selectedNode).then((value: boolean) => {\r\n      ts.getTracedMessages(selectedNode).then((response: string) => populateRouteMessages(response, selectedNode))\r\n\r\n      tracingChanges(value)\r\n      setIsReading(false)\r\n    })\r\n  }, [selectedNode, tracingChanges, populateRouteMessages])\r\n\r\n  /*********************************\r\n   *\r\n   * Functions called by events handlers in toolbars\r\n   *\r\n   *********************************/\r\n  const onTracing = async () => {\r\n    tracingChanges(!isTracing)\r\n  }\r\n\r\n  const onRowSelected = (message: MessageData) => {\r\n    let nodeId = message.toNode ? message.toNode : ''\r\n    const firstData = graphNodeData[0]\r\n    if (nodeId === selectedNode?.name && firstData) {\r\n      nodeId = firstData.cid\r\n    }\r\n\r\n    setMessage(message)\r\n    setGraphSelection(nodeId)\r\n  }\r\n\r\n  const isRowSelected = (msg: MessageData): boolean => {\r\n    return msg.uid === message?.uid\r\n  }\r\n\r\n  if (!selectedNode) {\r\n    return <HawtioEmptyCard message='No selection has been made.' />\r\n  }\r\n\r\n  if (isReading) {\r\n    return <HawtioLoadingCard />\r\n  }\r\n\r\n  /**\r\n   * Button callback for opening and closing the message panel drawer\r\n   */\r\n  const onMessagePanelToggle = () => {\r\n    setMsgPanelExpanded(!msgPanelExpanded)\r\n  }\r\n\r\n  return (\r\n    <Panel>\r\n      <PanelHeader id='trace-header-container'>\r\n        <Title headingLevel='h3'>Tracing</Title>\r\n        <Button\r\n          variant='primary'\r\n          isSmall={true}\r\n          icon={!isTracing ? React.createElement(PlayIcon) : React.createElement(BanIcon)}\r\n          onClick={onTracing}\r\n          isDisabled={!camelService.canTrace(selectedNode)}\r\n        >\r\n          {!isTracing ? 'Start Tracing' : 'Stop Tracing'}\r\n        </Button>\r\n      </PanelHeader>\r\n      <PanelMain>\r\n        <PanelMainBody>\r\n          {!isTracing && (\r\n            <React.Fragment>\r\n              <Text className='noTracing' data-testid='no-tracing' component='p'>\r\n                Tracing allows you to send messages to a route and then step through and see the messages flow through a\r\n                route to aid debugging and to help diagnose issues.\r\n              </Text>\r\n              <Text className='noTracing' data-testid='no-tracing2' component='p'>\r\n                Once you start tracing, you can send messages to the input endpoints, then come back to this page and\r\n                see the flow of messages through your route.\r\n              </Text>\r\n              <Text className='noTracing' data-testid='no-tracing3' component='p'>\r\n                As you click on the message table, you can see which node in the flow it came through; moving the\r\n                selection up and down in the message table lets you see the flow of the message through the diagram.\r\n              </Text>\r\n            </React.Fragment>\r\n          )}\r\n          {isTracing && (\r\n            <MessageDrawer\r\n              messages={message ? [message] : []}\r\n              expanded={msgPanelExpanded}\r\n              setExpanded={setMsgPanelExpanded}\r\n            >\r\n              <div id='trace-content'>\r\n                <Panel id='route-diagram-tracing-view'>\r\n                  <PanelMain>\r\n                    <PanelMainBody>\r\n                      <RouteDiagramContext.Provider\r\n                        value={{\r\n                          graphNodeData,\r\n                          setGraphNodeData,\r\n                          graphSelection,\r\n                          setGraphSelection,\r\n                          setShowStatistics,\r\n                        }}\r\n                      >\r\n                        <RouteDiagram />\r\n                      </RouteDiagramContext.Provider>\r\n                    </PanelMainBody>\r\n                  </PanelMain>\r\n                </Panel>\r\n                <Panel id='route-message-table'>\r\n                  <PanelHeader>Messages</PanelHeader>\r\n                  <Divider />\r\n                  <PanelMain>\r\n                    <PanelMainBody id='route-message-table-body'>\r\n                      <TableComposable aria-label='message table' variant='compact' isStriped>\r\n                        <Thead>\r\n                          <Tr>\r\n                            <Th>ID</Th>\r\n                            <Th>To Node</Th>\r\n                          </Tr>\r\n                        </Thead>\r\n                        <Tbody isOddStriped>\r\n                          {messages.current.map(message => (\r\n                            <Tr\r\n                              key={message.uid}\r\n                              onRowClick={() => onRowSelected(message)}\r\n                              isRowSelected={isRowSelected(message)}\r\n                            >\r\n                              <Td dataLabel='ID'>\r\n                                <Button variant='link' isDisabled={!message} onClick={onMessagePanelToggle}>\r\n                                  {message.headers.breadcrumbId ? message.headers.breadcrumbId : message.uid}\r\n                                </Button>\r\n                              </Td>\r\n                              <Td dataLabel='ToNode'>{message.toNode}</Td>\r\n                            </Tr>\r\n                          ))}\r\n                        </Tbody>\r\n                      </TableComposable>\r\n                    </PanelMainBody>\r\n                  </PanelMain>\r\n                </Panel>\r\n              </div>\r\n            </MessageDrawer>\r\n          )}\r\n        </PanelMainBody>\r\n      </PanelMain>\r\n    </Panel>\r\n  )\r\n}\r\n","import { MBeanNode, jolokiaService } from '@hawtiosrc/plugins/shared'\r\nimport { Request, Response } from 'jolokia.js'\r\nimport { camelPreferencesService } from '../camel-preferences-service'\r\nimport * as camelService from '../camel-service'\r\nimport { log } from '../globals'\r\n\r\nclass TracingService {\r\n  private handles: number[] = []\r\n\r\n  async register(request: Request, callback: (response: Response) => void) {\r\n    const handle = await jolokiaService.register(request, callback)\r\n    log.debug('Register handle:', handle)\r\n    this.handles.push(handle)\r\n  }\r\n\r\n  unregisterAll() {\r\n    log.debug('Unregister all handles:', this.handles)\r\n    this.handles.forEach(handle => jolokiaService.unregister(handle))\r\n    this.handles = []\r\n  }\r\n\r\n  getTracingBean(node: MBeanNode) {\r\n    const db = camelService.findTraceBean(node) as MBeanNode\r\n    if (!db || !db.objectName) camelService.notifyError('Could not find the tracing bean')\r\n\r\n    return db\r\n  }\r\n\r\n  async isTracing(node: MBeanNode): Promise<boolean> {\r\n    const tb = this.getTracingBean(node)\r\n    if (!tb) return false\r\n\r\n    const result = await jolokiaService.readAttribute(tb.objectName as string, 'Enabled')\r\n    if (!result) return false\r\n\r\n    return result as boolean\r\n  }\r\n\r\n  async setTracing(node: MBeanNode, flag: boolean): Promise<boolean> {\r\n    const tb = this.getTracingBean(node)\r\n    if (!tb) return false\r\n\r\n    const options = camelPreferencesService.loadOptions()\r\n    await jolokiaService.writeAttribute(tb.objectName as string, 'BodyMaxChars', options.maximumTraceOrDebugBodyLength)\r\n    await jolokiaService.writeAttribute(\r\n      tb.objectName as string,\r\n      'BodyIncludeStreams',\r\n      options.traceOrDebugIncludeStreams,\r\n    )\r\n    await jolokiaService.writeAttribute(tb.objectName as string, 'BodyIncludeFiles', options.traceOrDebugIncludeStreams)\r\n\r\n    await jolokiaService.execute(tb.objectName as string, 'setEnabled', [flag])\r\n\r\n    return await this.isTracing(node)\r\n  }\r\n\r\n  async getTracedMessages(node: MBeanNode): Promise<string> {\r\n    const tb = this.getTracingBean(node)\r\n    if (!tb) return ''\r\n\r\n    const result = await jolokiaService.execute(tb.objectName as string, 'dumpAllTracedMessagesAsXml()')\r\n    return result as string\r\n  }\r\n}\r\n\r\nexport const tracingService = new TracingService()\r\n","import React from 'react'\r\nimport { Card, CardTitle, CardBody } from '@patternfly/react-core'\r\nimport { TypeConvertersStatistics } from './TypeConvertersStatistics'\r\nimport './TypeConverters.css'\r\n\r\nexport const TypeConverters: React.FunctionComponent = () => {\r\n  return (\r\n    <Card isFullHeight>\r\n      <CardTitle>Type Converters</CardTitle>\r\n      <CardBody>\r\n        <TypeConvertersStatistics></TypeConvertersStatistics>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n","import { eventService } from '@hawtiosrc/core'\r\nimport { CamelContext } from '@hawtiosrc/plugins/camel/context'\r\nimport { HawtioEmptyCard, HawtioLoadingCard } from '@hawtiosrc/plugins/shared'\r\nimport { MBeanNode } from '@hawtiosrc/plugins/shared/tree'\r\nimport {\r\n  Button,\r\n  DescriptionList,\r\n  DescriptionListDescription,\r\n  DescriptionListGroup,\r\n  DescriptionListTerm,\r\n  Toolbar,\r\n  ToolbarContent,\r\n  ToolbarItem,\r\n} from '@patternfly/react-core'\r\nimport { RedoIcon, TrendUpIcon } from '@patternfly/react-icons'\r\nimport React, { useContext, useEffect, useState } from 'react'\r\nimport * as tcs from './type-converters-service'\r\n\r\nconst enableButtonLabelValue = 'Enable Statistics'\r\nconst disableButtonLabelValue = 'Disable Statistics'\r\n\r\nexport const TypeConvertersStatistics: React.FunctionComponent = () => {\r\n  const { selectedNode } = useContext(CamelContext)\r\n  const [isReading, setIsReading] = useState(true)\r\n  const [statistics, setStatistics] = useState<tcs.TypeConvertersStats>(new tcs.TypeConvertersStats())\r\n  const [statisticsEnabled, setStatisticsEnabled] = useState(false)\r\n\r\n  const onModeStatisticsClicked = () => {\r\n    tcs.setStatisticsEnablement(selectedNode as MBeanNode, !statisticsEnabled).then(_ => {\r\n      setStatisticsEnabled(!statisticsEnabled)\r\n    })\r\n  }\r\n\r\n  const onResetStatisticsClicked = () => {\r\n    setStatistics(new tcs.TypeConvertersStats())\r\n    tcs.resetStatistics(selectedNode as MBeanNode)\r\n  }\r\n\r\n  const modeStatisticsValue = (value: number): string => {\r\n    return statisticsEnabled ? `${value}` : '-'\r\n  }\r\n\r\n  /**\r\n   * Runs on load to determine if statistics are enabled\r\n   * and set the flag accordingly\r\n   */\r\n  useEffect(() => {\r\n    setIsReading(true)\r\n\r\n    const checkEnabled = async () => {\r\n      const enabled = await tcs.getStatisticsEnablement(selectedNode)\r\n      setStatisticsEnabled(enabled)\r\n      setIsReading(false)\r\n    }\r\n\r\n    checkEnabled()\r\n  }, [selectedNode])\r\n\r\n  /**\r\n   * Executes on change of statisticsEnabled flag in that\r\n   * statistics are only fetched when that flag is true\r\n   * Importantly, the timeout is not executed in the background\r\n   * if statistic collection is disabled\r\n   */\r\n  useEffect(() => {\r\n    if (!statisticsEnabled) return\r\n\r\n    let timeoutHandle: NodeJS.Timeout\r\n    const readStats = async () => {\r\n      try {\r\n        if (statisticsEnabled) {\r\n          const stats = await tcs.getStatistics(selectedNode)\r\n          setStatistics(stats)\r\n        }\r\n\r\n        timeoutHandle = setTimeout(readStats, 10000)\r\n      } catch (error) {\r\n        eventService.notify({\r\n          type: 'warning',\r\n          message: error as string,\r\n        })\r\n      }\r\n    }\r\n    readStats()\r\n\r\n    return () => {\r\n      clearTimeout(timeoutHandle)\r\n    }\r\n  }, [selectedNode, statisticsEnabled])\r\n\r\n  if (!selectedNode) {\r\n    return <HawtioEmptyCard message='No statistics available.' testid='no-stats-available' />\r\n  }\r\n\r\n  if (isReading) {\r\n    return <HawtioLoadingCard />\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Toolbar data-testid='stats-view-toolbar' id='toolbar-items'>\r\n        <ToolbarContent>\r\n          <ToolbarItem>\r\n            <Button\r\n              variant='secondary'\r\n              isSmall={true}\r\n              icon={React.createElement(TrendUpIcon)}\r\n              onClick={onModeStatisticsClicked}\r\n            >\r\n              {statisticsEnabled ? disableButtonLabelValue : enableButtonLabelValue}\r\n            </Button>\r\n          </ToolbarItem>\r\n          <ToolbarItem>\r\n            <Button\r\n              variant='secondary'\r\n              isSmall={true}\r\n              isDisabled={!statisticsEnabled}\r\n              icon={React.createElement(RedoIcon)}\r\n              onClick={onResetStatisticsClicked}\r\n            >\r\n              Reset Statistics\r\n            </Button>\r\n          </ToolbarItem>\r\n          <ToolbarItem variant='separator' />\r\n        </ToolbarContent>\r\n      </Toolbar>\r\n      <DescriptionList\r\n        isHorizontal\r\n        isCompact\r\n        className='camel-type-converters-statistics'\r\n        data-testid='stats-view-list'\r\n      >\r\n        <DescriptionListGroup>\r\n          <DescriptionListTerm>Attempts</DescriptionListTerm>\r\n          <DescriptionListDescription data-testid='attemptCounter'>\r\n            {modeStatisticsValue(statistics.attemptCounter)}\r\n          </DescriptionListDescription>\r\n        </DescriptionListGroup>\r\n        <DescriptionListGroup>\r\n          <DescriptionListTerm>Hits</DescriptionListTerm>\r\n          <DescriptionListDescription data-testid='hitCounter'>\r\n            {modeStatisticsValue(statistics.hitCounter)}\r\n          </DescriptionListDescription>\r\n        </DescriptionListGroup>\r\n        <DescriptionListGroup>\r\n          <DescriptionListTerm>Misses</DescriptionListTerm>\r\n          <DescriptionListDescription data-testid='missesCounter'>\r\n            {modeStatisticsValue(statistics.missCounter)}\r\n          </DescriptionListDescription>\r\n        </DescriptionListGroup>\r\n        <DescriptionListGroup>\r\n          <DescriptionListTerm>Failures</DescriptionListTerm>\r\n          <DescriptionListDescription data-testid='failedCounter'>\r\n            {modeStatisticsValue(statistics.failedCounter)}\r\n          </DescriptionListDescription>\r\n        </DescriptionListGroup>\r\n      </DescriptionList>\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import { jolokiaService } from '@hawtiosrc/plugins/shared'\r\nimport { MBeanNode } from '@hawtiosrc/plugins/shared/tree'\r\nimport { findContext } from '../camel-service'\r\nimport { mbeansType } from '../globals'\r\n\r\nexport class TypeConvertersStats {\r\n  attemptCounter: number\r\n  hitCounter: number\r\n  missCounter: number\r\n  failedCounter: number\r\n\r\n  constructor() {\r\n    this.attemptCounter = 0\r\n    this.hitCounter = 0\r\n    this.missCounter = 0\r\n    this.failedCounter = 0\r\n  }\r\n}\r\n\r\nexport class TypeConverter {\r\n  constructor(\r\n    public from: string,\r\n    public to: string,\r\n  ) {\r\n    this.from = from\r\n    this.to = to\r\n  }\r\n}\r\n\r\nfunction getTypeConverterObjectName(node: MBeanNode): string | null {\r\n  const ctxNode = findContext(node)\r\n  if (!ctxNode) return null\r\n\r\n  const service = ctxNode.navigate(mbeansType, 'services', '*TypeConverter') as MBeanNode\r\n  if (!service) return null\r\n\r\n  return service.objectName as string\r\n}\r\n\r\n/**\r\n * Get the TypeConverter 'StatisticsEnabled' attribute\r\n * @param node the node selected\r\n */\r\nexport async function getStatisticsEnablement(node: MBeanNode | null): Promise<boolean> {\r\n  if (!node) return false\r\n\r\n  const serviceName = getTypeConverterObjectName(node)\r\n  if (!serviceName) return Promise.reject()\r\n\r\n  const response = await jolokiaService.readAttribute(serviceName, 'StatisticsEnabled')\r\n  return response as boolean\r\n}\r\n\r\n/**\r\n * Set the TypeConverter 'StatisticsEnabled' attribute\r\n * @param node the node selected\r\n * @param state the state of the attribute\r\n */\r\nexport async function setStatisticsEnablement(node: MBeanNode, state: boolean): Promise<unknown> {\r\n  const serviceName = getTypeConverterObjectName(node)\r\n  if (!serviceName) return Promise.reject()\r\n\r\n  return jolokiaService.writeAttribute(serviceName, 'StatisticsEnabled', state)\r\n}\r\n\r\n/**\r\n * Reset the TypeConverters counters\r\n * @param node the node selected\r\n */\r\nexport async function resetStatistics(node: MBeanNode): Promise<unknown> {\r\n  const serviceName = getTypeConverterObjectName(node)\r\n  if (!serviceName) return false\r\n\r\n  return await jolokiaService.execute(serviceName, 'resetTypeConversionCounters')\r\n}\r\n\r\n/**\r\n * Get the TypeConverters statistics\r\n * @param node the node selected\r\n */\r\nexport async function getStatistics(node: MBeanNode | null): Promise<TypeConvertersStats> {\r\n  const stats = new TypeConvertersStats()\r\n  if (!node) return stats\r\n\r\n  const serviceName = getTypeConverterObjectName(node)\r\n  if (!serviceName) return stats\r\n\r\n  const response = await jolokiaService.readAttributes(serviceName)\r\n  stats.attemptCounter = response['AttemptCounter'] as number\r\n  stats.hitCounter = response['HitCounter'] as number\r\n  stats.missCounter = response['MissCounter'] as number\r\n  stats.failedCounter = response['FailedCounter'] as number\r\n  return stats\r\n}\r\n","import { MBeanNode, MBeanTree, PluginTreeViewToolbar } from '@hawtiosrc/plugins/shared'\r\nimport { TreeView, TreeViewDataItem } from '@patternfly/react-core'\r\nimport React, { ChangeEvent, useContext, useEffect, useState } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport './CamelTreeView.css'\r\nimport { CamelContext } from './context'\r\nimport { pluginPath } from './globals'\r\n\r\n/**\r\n * Expansion requires more than 2 states since the expandAll\r\n * must be removed completely to defer to the expanded state\r\n * of each data node\r\n */\r\nenum ExpansionValue {\r\n  /**\r\n   * should revert to the expanded state of the data\r\n   */\r\n  Default,\r\n  /**\r\n   * all data should be expanded\r\n   */\r\n  ExpandAll,\r\n  /**\r\n   * all data should be collapsed\r\n   */\r\n  CollapseAll,\r\n}\r\n\r\nexport const CamelTreeView: React.FunctionComponent = () => {\r\n  const { tree, selectedNode, setSelectedNode } = useContext(CamelContext)\r\n  const [expanded, setExpanded] = useState(ExpansionValue.Default)\r\n  const navigate = useNavigate()\r\n\r\n  const [filteredTree, setFilteredTree] = useState(tree.getTree())\r\n\r\n  /**\r\n   * Listen for changes to the tree that may occur as a result\r\n   * of events being monitored by the Tree:Watcher in workspace\r\n   * eg. new endpoint being created\r\n   */\r\n  useEffect(() => {\r\n    setFilteredTree(tree.getTree())\r\n  }, [tree])\r\n\r\n  const onSearch = (event: ChangeEvent<HTMLInputElement>) => {\r\n    // Ensure no node from the 'old' filtered is lingering\r\n    setSelectedNode(null)\r\n    setExpanded(ExpansionValue.Default)\r\n\r\n    const input = event.target.value\r\n    if (input === '') {\r\n      setFilteredTree(tree.getTree())\r\n    } else {\r\n      setFilteredTree(\r\n        MBeanTree.filter(tree.getTree(), (node: MBeanNode) => node.name.toLowerCase().includes(input.toLowerCase())),\r\n      )\r\n      setExpanded(ExpansionValue.ExpandAll)\r\n    }\r\n  }\r\n\r\n  const onSelect = (event: React.MouseEvent<Element, MouseEvent>, item: TreeViewDataItem) => {\r\n    setSelectedNode(item as MBeanNode)\r\n    /* On change of node selection update the url to the base plugin path */\r\n    navigate(pluginPath)\r\n  }\r\n\r\n  const getActiveItems = (): TreeViewDataItem[] => {\r\n    if (!selectedNode) {\r\n      return []\r\n    } else {\r\n      return [selectedNode as TreeViewDataItem]\r\n    }\r\n  }\r\n\r\n  const setAllExpanded = (value: boolean) => {\r\n    setExpanded(value ? ExpansionValue.ExpandAll : ExpansionValue.CollapseAll)\r\n  }\r\n\r\n  const expandedProp = (): object => {\r\n    switch (expanded) {\r\n      case ExpansionValue.ExpandAll:\r\n        return { allExpanded: true }\r\n      case ExpansionValue.CollapseAll:\r\n        return { allExpanded: false }\r\n      default:\r\n        return {}\r\n    }\r\n  }\r\n\r\n  return (\r\n    <TreeView\r\n      id='camel-tree-view'\r\n      data={filteredTree}\r\n      hasGuides={true}\r\n      onSelect={onSelect}\r\n      hasSelectableNodes={true}\r\n      activeItems={getActiveItems()}\r\n      {...expandedProp()}\r\n      toolbar={<PluginTreeViewToolbar onSearch={onSearch} onSetExpanded={setAllExpanded} />}\r\n    />\r\n  )\r\n}\r\n","import { Icon, Tooltip } from '@patternfly/react-core'\r\nimport { HelpIcon } from '@patternfly/react-icons'\r\n\r\nexport const TooltipHelpIcon: React.FunctionComponent<{ tooltip: string }> = ({ tooltip }) => (\r\n  <Icon size='md'>\r\n    <Tooltip content={tooltip} removeFindDomNode>\r\n      <HelpIcon />\r\n    </Tooltip>\r\n  </Icon>\r\n)\r\n","import { TooltipHelpIcon } from '@hawtiosrc/ui/icons'\r\nimport { CardBody, Checkbox, Form, FormGroup, FormSection, TextInput } from '@patternfly/react-core'\r\nimport React, { useState } from 'react'\r\nimport './CamelPreferences.css'\r\nimport { CamelOptions, camelPreferencesService } from './camel-preferences-service'\r\n\r\nexport const CamelPreferences: React.FunctionComponent = () => {\r\n  const [options, setOptions] = useState(camelPreferencesService.loadOptions())\r\n\r\n  const updateOptions = (key: keyof CamelOptions, value: boolean | number) => {\r\n    const updated = { ...options, ...{ [key]: value } }\r\n    camelPreferencesService.saveOptions(updated)\r\n    setOptions(updated)\r\n  }\r\n\r\n  const updateNumberValueFor = (key: keyof CamelOptions) => (value: string) => {\r\n    const intValue = parseInt(value)\r\n    if (!intValue) return\r\n    updateOptions(key, intValue)\r\n  }\r\n\r\n  const updateCheckboxValueFor = (key: keyof CamelOptions) => (value: boolean) => {\r\n    updateOptions(key, value)\r\n  }\r\n\r\n  return (\r\n    <CardBody>\r\n      <Form isHorizontal>\r\n        <FormSection title='Route diagram' titleElement='h2'>\r\n          <FormGroup\r\n            hasNoPaddingTop\r\n            label='Maximum label width'\r\n            fieldId='camel-form-maximum-label-width'\r\n            labelIcon={\r\n              <TooltipHelpIcon tooltip='The maximum length of a label in Camel diagrams before it is clipped' />\r\n            }\r\n          >\r\n            <TextInput\r\n              id='camel-form-maximum-label-width-input'\r\n              type='number'\r\n              value={options.maximumLabelWidth}\r\n              onChange={updateNumberValueFor('maximumLabelWidth')}\r\n            />\r\n          </FormGroup>\r\n          <FormGroup\r\n            hasNoPaddingTop\r\n            label='Ignore ID for label'\r\n            fieldId='camel-form-ignore-id-for-label'\r\n            labelIcon={\r\n              <TooltipHelpIcon tooltip='If enabled then we will ignore the ID value when viewing a pattern in a Camel diagram; otherwise we will use the ID value as the label (the tooltip will show the actual detail)' />\r\n            }\r\n          >\r\n            <Checkbox\r\n              id='camel-form-ignore-id-for-label-input'\r\n              isChecked={options.ignoreIdForLabel}\r\n              onChange={updateCheckboxValueFor('ignoreIdForLabel')}\r\n            />\r\n          </FormGroup>\r\n          <FormGroup\r\n            hasNoPaddingTop\r\n            label='Show inflight counter'\r\n            fieldId='camel-show-inflight-counter'\r\n            labelIcon={<TooltipHelpIcon tooltip='Whether to show inflight counter in route diagram' />}\r\n          >\r\n            <Checkbox\r\n              id='camel-show-inflight-counter-input'\r\n              isChecked={options.showInflightCounter}\r\n              onChange={updateCheckboxValueFor('showInflightCounter')}\r\n            />\r\n          </FormGroup>\r\n        </FormSection>\r\n        <FormSection title='Trace / debug' titleElement='h2'>\r\n          <FormGroup\r\n            hasNoPaddingTop\r\n            label='Include streams'\r\n            fieldId='camel-form-include-streams'\r\n            labelIcon={\r\n              <TooltipHelpIcon tooltip='Whether to include stream based message body when using the tracer and debugger' />\r\n            }\r\n          >\r\n            <Checkbox\r\n              id='camel-form-include-streams-input'\r\n              isChecked={options.traceOrDebugIncludeStreams}\r\n              onChange={updateCheckboxValueFor('traceOrDebugIncludeStreams')}\r\n            />\r\n          </FormGroup>\r\n          <FormGroup\r\n            hasNoPaddingTop\r\n            label='Maximum body length'\r\n            fieldId='camel-form-maximum-body-length'\r\n            labelIcon={\r\n              <TooltipHelpIcon tooltip='The maximum length of the body before its clipped when using the tracer and debugger' />\r\n            }\r\n          >\r\n            <TextInput\r\n              id='camel-form-maximum-body-length-input'\r\n              type='number'\r\n              value={options.maximumTraceOrDebugBodyLength}\r\n              onChange={updateNumberValueFor('maximumTraceOrDebugBodyLength')}\r\n            />\r\n          </FormGroup>\r\n        </FormSection>\r\n      </Form>\r\n    </CardBody>\r\n  )\r\n}\r\n","## Camel\r\n\r\nClick [Camel](camel/contexts) in the top navigation bar to view all the running Camel Contexts in the current JVM. (The selection will not appear on the navigation bar if there is no Camel running).\r\n\r\nThe Camel plugin allows you to view all the running Camel applications in the current JVM.\r\nYou can among others see the following details:\r\n\r\n- Lists of all running Camel applications\r\n- Detailed information of each Camel Context such as Camel version number, runtime statics\r\n- Lists of all routes in each Camel applications and their runtime statistics\r\n- Manage the lifecycle of all Camel applications and their routes, so you can restart / stop / pause / resume, etc.\r\n- Graphical representation of the running routes along with real time metrics\r\n- Live tracing and debugging of running routes\r\n- Profile the running routes with real time runtime statics; detailed specified per processor\r\n- Browsing and sending messages to Camel endpoint\r\n","import { MBeanNode, MBeanTree, TreeProcessor } from '@hawtiosrc/plugins/shared/tree'\r\nimport { ReactNode } from 'react'\r\nimport * as camelService from './camel-service'\r\nimport {\r\n  camelContexts,\r\n  componentNodeType,\r\n  componentsType,\r\n  contextNodeType,\r\n  contextsType,\r\n  dataformatsType,\r\n  defaultRouteGroupsType,\r\n  domainNodeType,\r\n  endpointNodeType,\r\n  endpointsType,\r\n  jmxDomain,\r\n  mbeansType,\r\n  routeGroupsType,\r\n  routeNodeType,\r\n  routesType,\r\n} from './globals'\r\nimport { IconNames, getIcon } from './icons'\r\nimport { routesService } from './routes-service'\r\n\r\nfunction adoptChild(parent: MBeanNode, child: MBeanNode, type: string, childIcon: ReactNode) {\r\n  parent.adopt(child)\r\n  child.setIcons(childIcon)\r\n  if (camelService.isContext(parent)) {\r\n    child.addMetadata(contextNodeType, parent.objectName ?? '')\r\n  }\r\n  child.setType(type)\r\n  camelService.setDomain(child)\r\n}\r\n\r\nfunction setChildIcon(node: MBeanNode, childIcon: ReactNode) {\r\n  node.getChildren().forEach(child => {\r\n    child.setIcons(childIcon)\r\n  })\r\n}\r\n\r\nfunction groupRoutes(routesNode: MBeanNode) {\r\n  let haveGroups = false\r\n  for (const routeNode of routesNode.getChildren()) {\r\n    const groupId = routeNode.getMetadata('group')\r\n    if (groupId) {\r\n      haveGroups = true\r\n      break\r\n    }\r\n  }\r\n\r\n  if (!haveGroups) return // Nothing to do - leave routes as not being grouped\r\n\r\n  const routeIcon = getIcon(IconNames.CamelRouteIcon)\r\n  const routeNodes = [...routesNode.getChildren()]\r\n\r\n  for (const routeNode of routeNodes) {\r\n    if (routeNode.getType() === routeGroupsType) continue\r\n\r\n    const groupId = routeNode.getMetadata('group')\r\n    let groupNode: MBeanNode\r\n    if (groupId) {\r\n      groupNode = routesNode.getOrCreate(groupId, true)\r\n    } else {\r\n      groupNode = routesNode.getOrCreate(defaultRouteGroupsType, true)\r\n    }\r\n\r\n    groupNode.setType(routeGroupsType)\r\n    camelService.setDomain(groupNode)\r\n\r\n    adoptChild(groupNode, routeNode, routeNodeType, routeIcon)\r\n  }\r\n\r\n  setChildIcon(routesNode, routeIcon)\r\n}\r\n\r\nexport const camelTreeProcessor: TreeProcessor = async (tree: MBeanTree) => {\r\n  const camelDomain = tree.get(jmxDomain)\r\n  if (!camelDomain) {\r\n    return\r\n  }\r\n\r\n  camelDomain.setIcons(getIcon(IconNames.CamelIcon))\r\n  camelDomain.setType(domainNodeType)\r\n  camelService.setDomain(camelDomain)\r\n\r\n  // Detach current children from domain node\r\n  const oldContexts = camelDomain.removeChildren()\r\n\r\n  // Create the initial contexts group node\r\n  const groupCtxsNode = camelDomain.getOrCreate(camelContexts, true)\r\n  groupCtxsNode.setIcons(getIcon(IconNames.CamelIcon))\r\n  groupCtxsNode.addMetadata('class', 'org-apache-camel-context-folder')\r\n  groupCtxsNode.addMetadata('key', camelContexts)\r\n  groupCtxsNode.addMetadata('name', camelContexts)\r\n  groupCtxsNode.setType(contextsType)\r\n  camelService.setDomain(groupCtxsNode)\r\n\r\n  for (const context of oldContexts) {\r\n    const contextCategory = context.get(contextNodeType, true)\r\n    let newCtxNode: MBeanNode | null = null\r\n    if (contextCategory && contextCategory.childCount() === 1) {\r\n      newCtxNode = contextCategory.getIndex(0)\r\n    }\r\n\r\n    if (!newCtxNode) return\r\n\r\n    newCtxNode.setType(contextNodeType)\r\n    camelService.setDomain(newCtxNode)\r\n    // Set the camel version as a property on the context\r\n    await camelService.fetchCamelVersion(newCtxNode)\r\n    newCtxNode.setIcons(getIcon(IconNames.CamelIcon))\r\n\r\n    const endpointsFolderIcon = getIcon(IconNames.EndpointsFolderIcon)\r\n    const endpointsIcon = getIcon(IconNames.EndpointsNodeIcon)\r\n    const routeIcon = getIcon(IconNames.CamelRouteIcon)\r\n\r\n    const routesNode = context.get(routesType, true)\r\n    if (routesNode) {\r\n      adoptChild(newCtxNode, routesNode, routesType, endpointsFolderIcon)\r\n      setChildIcon(routesNode, routeIcon)\r\n      camelService.setChildProperties(routesNode, routeNodeType)\r\n      routesNode.addMetadata(contextNodeType, newCtxNode.objectName ?? '')\r\n\r\n      await routesService.loadRoutesXml(newCtxNode, routesNode)\r\n\r\n      // Once XML has been processed then group the routes if they have groupIds\r\n      groupRoutes(routesNode)\r\n    }\r\n\r\n    const endpointsNode = context.get(endpointsType, true)\r\n    if (endpointsNode) {\r\n      adoptChild(newCtxNode, endpointsNode, endpointsType, endpointsFolderIcon)\r\n      setChildIcon(endpointsNode, endpointsIcon)\r\n      camelService.setChildProperties(endpointsNode, endpointNodeType)\r\n    }\r\n\r\n    const componentsNode = context.get(componentsType, true)\r\n    if (componentsNode) {\r\n      adoptChild(newCtxNode, componentsNode, componentsType, endpointsFolderIcon)\r\n      setChildIcon(componentsNode, endpointsIcon)\r\n      camelService.setChildProperties(componentsNode, componentNodeType)\r\n    }\r\n\r\n    const dataFormatsNode = context.get(dataformatsType, true)\r\n    if (dataFormatsNode) {\r\n      adoptChild(newCtxNode, dataFormatsNode, dataformatsType, endpointsFolderIcon)\r\n    }\r\n\r\n    //\r\n    // Add all other entries which are not one of\r\n    // context/routes/endpoints/components/dataformats as MBeans\r\n    //\r\n    const mBeansNode = newCtxNode.getOrCreate(mbeansType, true)\r\n    mBeansNode.setType(mbeansType)\r\n    camelService.setDomain(mBeansNode)\r\n\r\n    const predefinedTypes = new Set([contextNodeType, routesType, endpointsType, componentsType, dataformatsType])\r\n    context\r\n      .getChildren()\r\n      .filter(child => !predefinedTypes.has(child.name))\r\n      .forEach(child => mBeansNode.adopt(child))\r\n\r\n    mBeansNode.sort(false)\r\n\r\n    // Finally add the new context to the group of contexts node\r\n    groupCtxsNode.adopt(newCtxNode)\r\n    // Reinitialise HTML ids for the new Camel tree\r\n    groupCtxsNode.initId(true)\r\n  }\r\n}\r\n","import { hawtio, HawtioPlugin } from '@hawtiosrc/core'\r\nimport { helpRegistry } from '@hawtiosrc/help/registry'\r\nimport { treeProcessorRegistry, workspace } from '@hawtiosrc/plugins/shared'\r\nimport { preferencesRegistry } from '@hawtiosrc/preferences/registry'\r\nimport { Camel } from './Camel'\r\nimport { getCamelVersions } from './camel-service'\r\nimport { CamelPreferences } from './CamelPreferences'\r\nimport { jmxDomain, log, pluginPath } from './globals'\r\nimport help from './help.md'\r\nimport { camelTreeProcessor } from './tree-processor'\r\n\r\nconst order = 12\r\n\r\nexport const camel: HawtioPlugin = () => {\r\n  hawtio.addPlugin({\r\n    id: 'camel',\r\n    title: 'Camel',\r\n    path: pluginPath,\r\n    order,\r\n    component: Camel,\r\n    isActive: async () => {\r\n      return workspace.treeContainsDomainAndProperties(jmxDomain)\r\n    },\r\n  })\r\n\r\n  treeProcessorRegistry.add('camel', camelTreeProcessor)\r\n  helpRegistry.add('camel', 'Camel', help, order)\r\n  preferencesRegistry.add('camel', 'Camel', CamelPreferences, order)\r\n\r\n  getCamelVersions().then(versions => {\r\n    log.info('Using Camel versions:', versions)\r\n  })\r\n}\r\n","import {\r\n  Alert,\r\n  Divider,\r\n  Nav,\r\n  NavItem,\r\n  NavList,\r\n  PageGroup,\r\n  PageSection,\r\n  PageSectionVariants,\r\n  Popover,\r\n  Text,\r\n  TextContent,\r\n  Title,\r\n} from '@patternfly/react-core'\r\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons'\r\nimport React from 'react'\r\nimport { NavLink, Navigate, Route, Routes, useLocation } from 'react-router-dom'\r\nimport './Connect.css'\r\nimport { ConnectContext, useConnections } from './context'\r\nimport { Discover } from './discover/Discover'\r\nimport { pluginPath } from './globals'\r\nimport { ConnectLogin } from './login/ConnectLogin'\r\nimport { Remote } from './remote/Remote'\r\n\r\nexport const Connect: React.FunctionComponent = () => {\r\n  const { connections, dispatch } = useConnections()\r\n  const { pathname, search } = useLocation()\r\n\r\n  const navItems = [\r\n    { id: 'remote', title: 'Remote', component: Remote },\r\n    { id: 'discover', title: 'Discover', component: Discover },\r\n  ]\r\n\r\n  const nav = (\r\n    <Nav aria-label='Connect Nav' variant='tertiary'>\r\n      <NavList>\r\n        {navItems.map(({ id, title }) => (\r\n          <NavItem key={id} isActive={pathname === `${pluginPath}/${id}`}>\r\n            <NavLink to={{ pathname: id, search }}>{title}</NavLink>\r\n          </NavItem>\r\n        ))}\r\n      </NavList>\r\n    </Nav>\r\n  )\r\n\r\n  const routes = navItems.map(({ id, component }) => (\r\n    <Route key={id} path={id} element={React.createElement(component)} />\r\n  ))\r\n\r\n  const secure = window.isSecureContext\r\n\r\n  return (\r\n    <ConnectContext.Provider value={{ connections, dispatch }}>\r\n      <PageGroup>\r\n        <PageSection id='connect-header' variant='light'>\r\n          <Title id='connect-header-title' headingLevel='h1'>\r\n            Connect <ConnectHint />\r\n          </Title>\r\n          {!secure ? (\r\n            <>\r\n              <Alert variant='danger' isInline title='Insecure browsing context'>\r\n                <p>\r\n                  Remote connections may require authentication. In{' '}\r\n                  <a\r\n                    href='https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts'\r\n                    target='_blank'\r\n                    rel='noreferrer'\r\n                  >\r\n                    secure browsing contexts\r\n                  </a>{' '}\r\n                  it is possible to store credentials in secure manner using{' '}\r\n                  <a href='https://developer.mozilla.org/en-US/docs/Web/API/Crypto' target='_blank' rel='noreferrer'>\r\n                    Crypto API\r\n                  </a>{' '}\r\n                  and send them securely.\r\n                </p>\r\n                <p>\r\n                  Hawtio is not running in secure browsing context, thus connection to remote Jolokia agents with\r\n                  security enabled is not possible.\r\n                </p>\r\n              </Alert>\r\n            </>\r\n          ) : (\r\n            ''\r\n          )}\r\n        </PageSection>\r\n        <Divider />\r\n        <PageSection type='tabs' variant={PageSectionVariants.light} hasShadowBottom>\r\n          {nav}\r\n        </PageSection>\r\n        <Divider />\r\n      </PageGroup>\r\n      <PageSection id='connect-main' variant={PageSectionVariants.light}>\r\n        <Routes>\r\n          {routes}\r\n          {/* connect/login should be hidden to nav */}\r\n          <Route key='login' path='login' element={<ConnectLogin />} />\r\n          <Route key='root' path='/' element={<Navigate to={navItems[0]?.id ?? ''} />} />\r\n        </Routes>\r\n      </PageSection>\r\n    </ConnectContext.Provider>\r\n  )\r\n}\r\n\r\nconst ConnectHint: React.FunctionComponent = () => {\r\n  const content = (\r\n    <TextContent>\r\n      <Text component='p'>\r\n        This page allows you to connect to remote processes which{' '}\r\n        <strong>\r\n          already have a{' '}\r\n          <a href='https://jolokia.org/agent.html' target='_blank' rel='noreferrer'>\r\n            Jolokia agent\r\n          </a>{' '}\r\n          running inside them\r\n        </strong>\r\n        . You will need to know the host name, port and path of the Jolokia agent to be able to connect.\r\n      </Text>\r\n      <Text component='p'>\r\n        If the process you wish to connect to does not have a Jolokia agent inside, please refer to the{' '}\r\n        <a href='https://jolokia.org/agent.html' target='_blank' rel='noreferrer'>\r\n          Jolokia documentation\r\n        </a>{' '}\r\n        for how to add a JVM, servlet, or OSGi based agent inside it.\r\n      </Text>\r\n      <Text component='p'>\r\n        Some Java applications such as{' '}\r\n        <a href='https://activemq.apache.org/components/artemis/' target='_blank' rel='noreferrer'>\r\n          Apache ActiveMQ Artemis\r\n        </a>{' '}\r\n        include a Jolokia agent by default (use context path of Jolokia agent, usually <code>jolokia</code>). Or you can\r\n        always just deploy Hawtio inside the process, which includes the Jolokia servlet agent (use Jolokia servlet\r\n        mapping inside Hawtio context path, usually <code>hawtio/jolokia</code>).\r\n      </Text>\r\n    </TextContent>\r\n  )\r\n\r\n  return (\r\n    <Popover\r\n      aria-label='Connect hint popover'\r\n      position='auto'\r\n      hasAutoWidth\r\n      maxWidth='60rem'\r\n      bodyContent={content}\r\n      removeFindDomNode\r\n    >\r\n      <OutlinedQuestionCircleIcon />\r\n    </Popover>\r\n  )\r\n}\r\n","import { Connections, connectService } from '@hawtiosrc/plugins/shared/connect-service'\r\nimport React, { createContext, useEffect, useReducer } from 'react'\r\nimport { ConnectionsAction, reducer } from './connections'\r\n\r\n/**\r\n * Custom React hook for using connections and their reducer.\r\n */\r\nexport function useConnections() {\r\n  const [connections, dispatch] = useReducer(reducer, connectService.loadConnections())\r\n\r\n  useEffect(() => {\r\n    connectService.saveConnections(connections)\r\n  }, [connections])\r\n\r\n  return { connections, dispatch }\r\n}\r\n\r\ntype ConnectContext = {\r\n  connections: Connections\r\n  dispatch: React.Dispatch<ConnectionsAction>\r\n}\r\n\r\nexport const ConnectContext = createContext<ConnectContext>({\r\n  connections: {},\r\n  dispatch: () => {\r\n    /* no-op */\r\n  },\r\n})\r\n","import { Connection, Connections } from '@hawtiosrc/plugins/shared'\r\nimport { connectService } from '@hawtiosrc/plugins/shared/connect-service'\r\n\r\nexport const ADD = 'ADD'\r\nexport const UPDATE = 'UPDATE'\r\nexport const DELETE = 'DELETE'\r\nexport const IMPORT = 'IMPORT'\r\nexport const RESET = 'RESET'\r\n\r\nexport type ConnectionsAction =\r\n  | { type: typeof ADD; connection: Connection }\r\n  | { type: typeof UPDATE; id: string; connection: Connection }\r\n  | { type: typeof DELETE; id: string }\r\n  | { type: typeof IMPORT; connections: Connection[] }\r\n  | { type: typeof RESET }\r\n\r\nfunction addConnection(state: Connections, connection: Connection): Connections {\r\n  // generate ID\r\n  if (!connection.id) {\r\n    connectService.generateId(connection, state)\r\n  }\r\n\r\n  return { ...state, [connection.id]: connection }\r\n}\r\n\r\nfunction updateConnection(state: Connections, id: string, connection: Connection): Connections {\r\n  // name change is handled correctly, because we use id\r\n  return { ...state, [id]: connection }\r\n}\r\n\r\nfunction deleteConnection(state: Connections, id: string): Connections {\r\n  const newState = { ...state }\r\n  delete newState[id]\r\n  return newState\r\n}\r\n\r\nfunction importConnections(state: Connections, imported: Connection[]): Connections {\r\n  return imported.reduce((newState, conn) => {\r\n    // if there's a connection with given ID, change it, otherwise, add new one\r\n    if (!conn.id) {\r\n      // importing old format without ID\r\n      connectService.generateId(conn, state)\r\n    }\r\n    let exists = false\r\n    for (const c in state) {\r\n      if (c === conn.id) {\r\n        exists = true\r\n        break\r\n      }\r\n    }\r\n    if (exists) {\r\n      return updateConnection(state, conn.id, conn)\r\n    } else {\r\n      return addConnection(newState, conn)\r\n    }\r\n  }, state)\r\n}\r\n\r\nexport function reducer(state: Connections, action: ConnectionsAction): Connections {\r\n  switch (action.type) {\r\n    case ADD: {\r\n      const { connection } = action\r\n      return addConnection(state, connection)\r\n    }\r\n    case UPDATE: {\r\n      const { id, connection } = action\r\n      return updateConnection(state, id, connection)\r\n    }\r\n    case DELETE: {\r\n      const { id } = action\r\n      return deleteConnection(state, id)\r\n    }\r\n    case IMPORT: {\r\n      const { connections } = action\r\n      return importConnections(state, connections)\r\n    }\r\n    case RESET:\r\n      return {}\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import { Connection, HawtioEmptyCard, HawtioLoadingCard, connectService } from '@hawtiosrc/plugins/shared'\r\nimport { formatTimestamp } from '@hawtiosrc/util/dates'\r\nimport {\r\n  ActionList,\r\n  ActionListItem,\r\n  Alert,\r\n  Button,\r\n  Card,\r\n  CardActions,\r\n  CardBody,\r\n  CardFooter,\r\n  CardHeader,\r\n  CardTitle,\r\n  DescriptionList,\r\n  DescriptionListDescription,\r\n  DescriptionListGroup,\r\n  DescriptionListTerm,\r\n  Gallery,\r\n  Label,\r\n  SearchInput,\r\n  Select,\r\n  SelectOption,\r\n  SelectProps,\r\n  Text,\r\n  Toolbar,\r\n  ToolbarContent,\r\n  ToolbarGroup,\r\n  ToolbarItem,\r\n} from '@patternfly/react-core'\r\nimport React, { useContext, useEffect, useState } from 'react'\r\nimport { ADD, UPDATE } from '../connections'\r\nimport { ConnectContext } from '../context'\r\nimport { log } from '../globals'\r\nimport javaLogo from '../img/java-logo.svg'\r\nimport jettyLogo from '../img/jetty-logo.svg'\r\nimport tomcatLogo from '../img/tomcat-logo.svg'\r\nimport { Agent, Jvm, discoverService } from './discover-service'\r\n\r\nexport const Discover: React.FunctionComponent = () => {\r\n  const { connections, dispatch } = useContext(ConnectContext)\r\n\r\n  const [agentDiscoverable, setAgentDiscoverable] = useState(false)\r\n  const [jvmListable, setJvmListable] = useState(false)\r\n  const [discovering, setDiscovering] = useState(true)\r\n  const [agents, setAgents] = useState<Agent[]>([])\r\n  const [jvms, setJvms] = useState<Jvm[]>([])\r\n\r\n  // Filter\r\n  const [filter, setFilter] = useState('')\r\n  const [label, setLabel] = useState<'Agent' | 'JVM'>('Agent')\r\n  const [isSelectLabelOpen, setIsSelectLabelOpen] = useState(false)\r\n  const [filteredAgents, setFilteredAgents] = useState<Agent[]>([])\r\n  const [filteredJvms, setFilteredJvms] = useState<Jvm[]>([])\r\n\r\n  useEffect(() => {\r\n    const isDiscoverable = async () => {\r\n      const discoverable = await discoverService.hasDiscoveryMBean()\r\n      setAgentDiscoverable(discoverable)\r\n      const listable = await discoverService.hasLocalMBean()\r\n      setJvmListable(listable)\r\n\r\n      if (!discoverable && listable) {\r\n        setLabel('JVM')\r\n      }\r\n\r\n      if (!discoverable && !listable) {\r\n        setDiscovering(false)\r\n      }\r\n    }\r\n    isDiscoverable()\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (!discovering) {\r\n      return\r\n    }\r\n\r\n    const discover = async () => {\r\n      const agents = await discoverService.discoverAgents()\r\n      log.debug('Discover - agents:', agents)\r\n      setAgents(agents)\r\n      setFilteredAgents(agents)\r\n\r\n      const jvms = await discoverService.listJvms()\r\n      log.debug('Discover - JVMs:', jvms)\r\n      setJvms(jvms)\r\n      setFilteredJvms(jvms)\r\n\r\n      setDiscovering(false)\r\n    }\r\n    discover()\r\n  }, [discovering])\r\n\r\n  if (!agentDiscoverable && !jvmListable) {\r\n    return <HawtioEmptyCard message='Agent discovery is not available' />\r\n  }\r\n\r\n  if (discovering) {\r\n    return <HawtioLoadingCard message='Please wait, discovering agents...' />\r\n  }\r\n\r\n  const selectLabel: SelectProps['onSelect'] = (_, value) => {\r\n    setLabel(value as typeof label)\r\n    setIsSelectLabelOpen(!isSelectLabelOpen)\r\n  }\r\n\r\n  const applyFilter = () => {\r\n    const matchesIgnoringCase = (value: unknown) =>\r\n      typeof value === 'string' && value.toLowerCase().includes(filter.toLowerCase())\r\n\r\n    const filteredAgents = agents.filter(agent => Object.values(agent).some(matchesIgnoringCase))\r\n    setFilteredAgents(filteredAgents)\r\n\r\n    const filteredJvms = jvms.filter(jvm => Object.values(jvm).some(matchesIgnoringCase))\r\n    setFilteredJvms(filteredJvms)\r\n\r\n    log.debug('Discover - apply filter:', filter, 'agents:', filteredAgents, 'JVMs:', filteredJvms)\r\n  }\r\n\r\n  const clearFilter = () => {\r\n    setFilter('')\r\n    setFilteredAgents(agents)\r\n    setFilteredJvms(jvms)\r\n  }\r\n\r\n  const reset = () => {\r\n    setAgents([])\r\n    setFilteredAgents([])\r\n    setJvms([])\r\n    setFilteredJvms([])\r\n  }\r\n\r\n  const refresh = (delay = false) => {\r\n    reset()\r\n    if (delay) {\r\n      // Delay refreshing to show users a pseudo-sense of updating\r\n      setTimeout(() => setDiscovering(true), 100)\r\n    } else {\r\n      setDiscovering(true)\r\n    }\r\n  }\r\n\r\n  const connect = (conn: Connection) => {\r\n    log.debug('Discover - connect to:', conn)\r\n\r\n    // Save the connection before connecting\r\n    if (connections[conn.id]) {\r\n      dispatch({ type: UPDATE, id: conn.id, connection: conn })\r\n    } else {\r\n      dispatch({ type: ADD, connection: conn })\r\n    }\r\n\r\n    connectService.connect(conn)\r\n  }\r\n\r\n  const toolbar = (\r\n    <Toolbar id='connect-discover-toolbar'>\r\n      <ToolbarContent>\r\n        <ToolbarGroup id='connect-discover-toolbar-filters'>\r\n          <ToolbarItem id='connect-discover-toolbar-label'>\r\n            <Select\r\n              id='connect-discover-toolbar-label-select'\r\n              variant='single'\r\n              aria-label='Filter Label'\r\n              selections={label}\r\n              isOpen={isSelectLabelOpen}\r\n              onToggle={() => setIsSelectLabelOpen(!isSelectLabelOpen)}\r\n              onSelect={selectLabel}\r\n            >\r\n              <SelectOption key='agent' value='Agent' isDisabled={!agentDiscoverable} />\r\n              <SelectOption key='jvm' value='JVM' isDisabled={!jvmListable} />\r\n            </Select>\r\n          </ToolbarItem>\r\n          <ToolbarItem id='connect-discover-toolbar-filter'>\r\n            <SearchInput\r\n              id='connect-discover-toolbar-filter-input'\r\n              aria-label='Filter Agents'\r\n              placeholder='Filter by text...'\r\n              value={filter}\r\n              onChange={(_, value) => setFilter(value)}\r\n              onSearch={applyFilter}\r\n              onClear={clearFilter}\r\n            />\r\n          </ToolbarItem>\r\n        </ToolbarGroup>\r\n        <ToolbarItem variant='separator' />\r\n        <ToolbarItem>\r\n          <Button variant='secondary' onClick={() => refresh(true)} isSmall>\r\n            Refresh\r\n          </Button>\r\n        </ToolbarItem>\r\n      </ToolbarContent>\r\n    </Toolbar>\r\n  )\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Card style={{ marginBottom: '1rem' }} isFlat>\r\n        {toolbar}\r\n      </Card>\r\n      <Gallery hasGutter minWidths={{ default: '400px' }}>\r\n        {label === 'Agent' &&\r\n          filteredAgents.map((agent, index) => (\r\n            <AgentCard key={`agent-${index}-${agent.agent_id}`} agent={agent} connect={connect} />\r\n          ))}\r\n        {label === 'JVM' &&\r\n          filteredJvms.map((jvm, index) => (\r\n            <JvmCard key={`jvm-${index}-${jvm.id}`} jvm={jvm} connect={connect} refresh={refresh} />\r\n          ))}\r\n      </Gallery>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nconst PRODUCT_LOGO: Record<string, string> = {\r\n  jetty: jettyLogo,\r\n  tomcat: tomcatLogo,\r\n  generic: javaLogo,\r\n}\r\n\r\nexport const AgentCard: React.FunctionComponent<{\r\n  agent: Agent\r\n  connect: (conn: Connection) => void\r\n}> = ({ agent, connect }) => {\r\n  const productLogo = (agent: Agent) => {\r\n    return PRODUCT_LOGO[agent.server_product?.toLowerCase() ?? 'generic'] ?? PRODUCT_LOGO.generic\r\n  }\r\n\r\n  const title = discoverService.hasName(agent) ? (\r\n    `${agent.server_vendor} ${agent.server_product} ${agent.server_version}`\r\n  ) : (\r\n    <Text component='pre'>{agent.command}</Text>\r\n  )\r\n\r\n  return (\r\n    <Card isCompact id={`connect-discover-agent-card-${agent.agent_id}`}>\r\n      <CardHeader>\r\n        <img src={productLogo(agent)} alt={agent.server_product} style={{ maxWidth: '30px', paddingRight: '0.5rem' }} />\r\n        <CardTitle style={{ whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis' }}>{title}</CardTitle>\r\n        <CardActions>\r\n          <Label color='blue'>Agent</Label>\r\n        </CardActions>\r\n      </CardHeader>\r\n      <CardBody>\r\n        <DescriptionList isCompact isHorizontal>\r\n          <DescriptionListGroup>\r\n            <DescriptionListTerm>Agent ID</DescriptionListTerm>\r\n            <DescriptionListDescription>{agent.agent_id}</DescriptionListDescription>\r\n          </DescriptionListGroup>\r\n          <DescriptionListGroup>\r\n            <DescriptionListTerm>Agent Version</DescriptionListTerm>\r\n            <DescriptionListDescription>{agent.agent_version}</DescriptionListDescription>\r\n          </DescriptionListGroup>\r\n          <DescriptionListGroup>\r\n            <DescriptionListTerm>Agent Description</DescriptionListTerm>\r\n            <DescriptionListDescription>{agent.agent_description}</DescriptionListDescription>\r\n          </DescriptionListGroup>\r\n          {agent.startTime && (\r\n            <DescriptionListGroup>\r\n              <DescriptionListTerm>JVM Started</DescriptionListTerm>\r\n              <DescriptionListDescription>{formatTimestamp(new Date(agent.startTime))}</DescriptionListDescription>\r\n            </DescriptionListGroup>\r\n          )}\r\n          {agent.url && (\r\n            <DescriptionListGroup>\r\n              <DescriptionListTerm>Agent URL</DescriptionListTerm>\r\n              <DescriptionListDescription>\r\n                <Text component='a' href={agent.url} target='_blank'>\r\n                  {agent.url}\r\n                </Text>\r\n              </DescriptionListDescription>\r\n            </DescriptionListGroup>\r\n          )}\r\n          {!window.isSecureContext && agent.secured ? (\r\n            <Alert\r\n              variant='danger'\r\n              isInline\r\n              isPlain\r\n              title=\"Can't connect to secured agent in non-secure browsing context\"\r\n            />\r\n          ) : (\r\n            ''\r\n          )}\r\n        </DescriptionList>\r\n      </CardBody>\r\n      <CardFooter>\r\n        <Button\r\n          variant='primary'\r\n          onClick={() => connect(discoverService.agentToConnection(agent))}\r\n          isSmall\r\n          isDisabled={!window.isSecureContext && agent.secured}\r\n        >\r\n          Connect\r\n        </Button>\r\n      </CardFooter>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport const JvmCard: React.FunctionComponent<{\r\n  jvm: Jvm\r\n  connect: (conn: Connection) => void\r\n  refresh: () => void\r\n}> = ({ jvm, connect, refresh }) => {\r\n  const stopAgent = () => {\r\n    discoverService.stopAgent(jvm.id)\r\n    refresh()\r\n  }\r\n\r\n  const startAgent = () => {\r\n    discoverService.startAgent(jvm.id)\r\n    refresh()\r\n  }\r\n\r\n  return (\r\n    <Card isCompact id={`connect-discover-jvm-card-${jvm.id}`}>\r\n      <CardHeader>\r\n        <img src={PRODUCT_LOGO.generic} alt={jvm.alias} style={{ maxWidth: '30px', paddingRight: '0.5rem' }} />\r\n        <CardTitle style={{ whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis' }}>\r\n          {jvm.alias}\r\n        </CardTitle>\r\n        <CardActions>\r\n          <Label color='green'>JVM</Label>\r\n        </CardActions>\r\n      </CardHeader>\r\n      <CardBody>\r\n        <DescriptionList isCompact isHorizontal>\r\n          <DescriptionListGroup>\r\n            <DescriptionListTerm>PID</DescriptionListTerm>\r\n            <DescriptionListDescription>{jvm.id}</DescriptionListDescription>\r\n          </DescriptionListGroup>\r\n          <DescriptionListGroup>\r\n            <DescriptionListTerm>Name</DescriptionListTerm>\r\n            <DescriptionListDescription>{jvm.displayName}</DescriptionListDescription>\r\n          </DescriptionListGroup>\r\n          {jvm.agentUrl && (\r\n            <DescriptionListGroup>\r\n              <DescriptionListTerm>Agent URL</DescriptionListTerm>\r\n              <DescriptionListDescription>\r\n                <Text component='a' href={jvm.agentUrl} target='_blank'>\r\n                  {jvm.agentUrl}\r\n                </Text>\r\n              </DescriptionListDescription>\r\n            </DescriptionListGroup>\r\n          )}\r\n        </DescriptionList>\r\n      </CardBody>\r\n      <CardFooter>\r\n        <ActionList>\r\n          <ActionListItem>\r\n            <Button\r\n              variant='primary'\r\n              onClick={() => connect(discoverService.jvmToConnection(jvm))}\r\n              isSmall\r\n              isDisabled={!discoverService.isConnectable(jvm)}\r\n            >\r\n              Connect\r\n            </Button>\r\n          </ActionListItem>\r\n          {jvm.agentUrl && (\r\n            <React.Fragment>\r\n              <ActionListItem>\r\n                <Button variant='secondary' onClick={startAgent} isSmall>\r\n                  Start agent\r\n                </Button>\r\n              </ActionListItem>\r\n              <ActionListItem>\r\n                <Button variant='danger' onClick={stopAgent} isSmall>\r\n                  Stop agent\r\n                </Button>\r\n              </ActionListItem>\r\n            </React.Fragment>\r\n          )}\r\n        </ActionList>\r\n      </CardFooter>\r\n    </Card>\r\n  )\r\n}\r\n","import { Logger } from '@hawtiosrc/core/logging'\r\n\r\nexport const pluginId = 'connect'\r\nexport const statusPluginId = 'connectStatus'\r\nexport const pluginTitle = 'Connect'\r\nexport const pluginPath = '/connect'\r\nexport const pluginName = 'hawtio-connect'\r\nexport const log = Logger.get(pluginName)\r\n\r\nexport const PATH_PROXY_ENABLED = 'proxy/enabled'\r\n","import { Connection, INITIAL_CONNECTION, connectService, jolokiaService, workspace } from '@hawtiosrc/plugins/shared'\r\nimport { isBlank } from '@hawtiosrc/util/strings'\r\nimport { log } from '../globals'\r\n\r\n/**\r\n * @see https://jolokia.org/reference/html/manual/jolokia_mbeans.html#mbean-discovery\r\n */\r\nexport type Agent = {\r\n  // Properties from Jolokia API\r\n  agent_id?: string\r\n  agent_description?: string\r\n  agent_version?: string\r\n  url?: string\r\n  secured?: boolean\r\n  server_vendor?: string\r\n  server_product?: string\r\n  server_version?: string\r\n\r\n  // Properties that Hawtio attaches\r\n  startTime?: number\r\n  command?: string\r\n}\r\n\r\n/**\r\n * @see https://github.com/hawtio/hawtio/blob/3.x/plugins/hawtio-local-jvm-mbean/src/main/java/io/hawt/jvm/local/VMDescriptorDTO.java\r\n */\r\nexport type Jvm = {\r\n  id: string\r\n  alias: string\r\n  displayName: string\r\n  agentUrl: string | null\r\n  port: number\r\n  hostname: string | null\r\n  scheme: string | null\r\n  path: string | null\r\n}\r\n\r\nclass DiscoverService {\r\n  hasDiscoveryMBean(): Promise<boolean> {\r\n    return workspace.treeContainsDomainAndProperties('jolokia', { type: 'Discovery' })\r\n  }\r\n\r\n  hasLocalMBean(): Promise<boolean> {\r\n    return workspace.treeContainsDomainAndProperties('hawtio', { type: 'JVMList' })\r\n  }\r\n\r\n  async discoverAgents(): Promise<Agent[]> {\r\n    // Jolokia 1.x: 'jolokia:type=Discovery'\r\n    // Jolokia 2.x: 'jolokia:type=Discovery,agent=...'\r\n    const discoveryMBean = (await workspace.findMBeans('jolokia', { type: 'Discovery' }))[0]\r\n    if (!discoveryMBean?.objectName) {\r\n      return []\r\n    }\r\n\r\n    // Use 10 sec timeout\r\n    const agents = (await jolokiaService.execute(discoveryMBean.objectName, 'lookupAgentsWithTimeout(int)', [\r\n      10 * 1000,\r\n    ])) as Agent[]\r\n    await this.fetchMoreJvmDetails(agents)\r\n    return agents\r\n  }\r\n\r\n  async listJvms(): Promise<Jvm[]> {\r\n    const jvmListMBean = (await workspace.findMBeans('hawtio', { type: 'JVMList' }))[0]\r\n    if (!jvmListMBean?.objectName) {\r\n      return []\r\n    }\r\n\r\n    return (await jolokiaService.execute(jvmListMBean.objectName, 'listLocalJVMs()')) as Jvm[]\r\n  }\r\n\r\n  private async fetchMoreJvmDetails(agents: Agent[]) {\r\n    for (const agent of agents) {\r\n      if (!agent.url || agent.secured) {\r\n        continue\r\n      }\r\n      // One-off Jolokia instance to connect to the agent\r\n      const jolokia = connectService.createJolokia(this.agentToConnection(agent))\r\n      agent.startTime = jolokia.getAttribute('java.lang:type=Runtime', 'StartTime') as number\r\n      if (!this.hasName(agent)) {\r\n        // Only look for command if agent vm is not known\r\n        agent.command = jolokia.getAttribute('java.lang:type=Runtime', 'SystemProperties', 'sun.java.command') as string\r\n      }\r\n    }\r\n  }\r\n\r\n  hasName(agent: Agent): boolean {\r\n    return [agent.server_vendor, agent.server_product, agent.server_version].every(s => !isBlank(s))\r\n  }\r\n\r\n  agentToConnection(agent: Agent): Connection {\r\n    const conn = {\r\n      ...INITIAL_CONNECTION,\r\n      id: agent.agent_id ?? `discover-${agent.agent_id}`,\r\n      name: agent.agent_description ?? `discover-${agent.agent_id}`,\r\n    }\r\n    if (!agent.url) {\r\n      log.warn('No URL available to connect to agent:', agent)\r\n      return conn\r\n    }\r\n\r\n    const url = new URL(agent.url)\r\n    conn.scheme = this.schemeFromUrl(url)\r\n    conn.host = url.hostname\r\n    conn.port = parseInt(url.port)\r\n    conn.path = url.pathname\r\n\r\n    log.debug('Discover - connection from agent:', conn)\r\n    return conn\r\n  }\r\n\r\n  private schemeFromUrl(url: URL): 'http' | 'https' {\r\n    const scheme = url.protocol.substring(0, url.protocol.length - 1) // strip last ':'\r\n    // Scheme other than 'http' or 'https' is not valid in the context of Jolokia agent\r\n    return scheme === 'http' || scheme === 'https' ? scheme : 'http'\r\n  }\r\n\r\n  jvmToConnection(jvm: Jvm): Connection {\r\n    const conn = { ...INITIAL_CONNECTION, name: `local-${jvm.port}` }\r\n    if (!jvm.scheme || !jvm.hostname || jvm.port === 0 || !jvm.path) {\r\n      log.warn('Lack of information to connect to JVM:', jvm)\r\n      return conn\r\n    }\r\n\r\n    conn.scheme = jvm.scheme === 'http' || jvm.scheme === 'https' ? jvm.scheme : 'http'\r\n    conn.host = jvm.hostname\r\n    conn.port = jvm.port\r\n    conn.path = jvm.path\r\n    log.debug('Discover - connection from JVM:', conn)\r\n    return conn\r\n  }\r\n\r\n  isConnectable(jvm: Jvm): boolean {\r\n    return [jvm.scheme, jvm.hostname, jvm.path].every(s => s && !isBlank(s)) && jvm.port !== 0\r\n  }\r\n\r\n  async stopAgent(pid: string) {\r\n    const jvmListMBean = (await workspace.findMBeans('hawtio', { type: 'JVMList' }))[0]\r\n    if (!jvmListMBean?.objectName) {\r\n      return\r\n    }\r\n    log.debug('Discover - stop JVM agent:', jvmListMBean, pid)\r\n    await jolokiaService.execute(jvmListMBean.objectName, 'stopAgent(java.lang.String)', [pid])\r\n  }\r\n\r\n  async startAgent(pid: string) {\r\n    const jvmListMBean = (await workspace.findMBeans('hawtio', { type: 'JVMList' }))[0]\r\n    if (!jvmListMBean?.objectName) {\r\n      return\r\n    }\r\n    log.debug('Discover - start JVM agent:', jvmListMBean, pid)\r\n    await jolokiaService.execute(jvmListMBean.objectName, 'startAgent(java.lang.String)', [pid])\r\n  }\r\n}\r\n\r\nexport const discoverService = new DiscoverService()\r\n","import { connectService } from '@hawtiosrc/plugins/shared'\r\nimport { humanizeSeconds } from '@hawtiosrc/util/dates'\r\nimport { Alert, Button, Form, FormAlert, FormGroup, Modal, TextInput } from '@patternfly/react-core'\r\nimport React, { useState } from 'react'\r\n\r\nexport const ConnectLogin: React.FunctionComponent = () => {\r\n  const [isOpen, setIsOpen] = useState(true)\r\n  const [username, setUsername] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const [loginFailed, setLoginFailed] = useState(false)\r\n  const [loginFailedMessage, setLoginFailedMessage] = useState('')\r\n  const [isEnabled, setIsEnabled] = useState(true)\r\n\r\n  const connectionName = connectService.getCurrentConnectionName()\r\n  if (!connectionName) {\r\n    return null\r\n  }\r\n\r\n  const reset = () => {\r\n    setLoginFailed(false)\r\n    setLoginFailedMessage('')\r\n    setIsEnabled(true)\r\n  }\r\n\r\n  const handleLogin = () => {\r\n    const login = async () => {\r\n      const result = await connectService.login(username, password)\r\n      switch (result.type) {\r\n        case 'success':\r\n          setLoginFailed(false)\r\n          // Redirect to the original URL\r\n          connectService.redirect()\r\n          break\r\n        case 'failure':\r\n          setLoginFailed(true)\r\n          setLoginFailedMessage('Incorrect username or password')\r\n          break\r\n        case 'session-expired':\r\n          setLoginFailed(true)\r\n          setLoginFailedMessage('Session expired. Re-login in main window.')\r\n          break\r\n        case 'throttled': {\r\n          const { retryAfter } = result\r\n          setLoginFailed(true)\r\n          setLoginFailedMessage(`Login attempt blocked. Retry after ${humanizeSeconds(retryAfter)}`)\r\n          setIsEnabled(false)\r\n          setTimeout(reset, retryAfter * 1000)\r\n          break\r\n        }\r\n      }\r\n    }\r\n    login()\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setIsOpen(false)\r\n    // Closing login modal should also close the window\r\n    window.close()\r\n  }\r\n\r\n  const actions = [\r\n    <Button key='login' variant='primary' onClick={handleLogin} isDisabled={!isEnabled}>\r\n      Log in\r\n    </Button>,\r\n    <Button key='cancel' variant='link' onClick={handleClose}>\r\n      Cancel\r\n    </Button>,\r\n  ]\r\n\r\n  const title = `Log in to ${connectionName}`\r\n\r\n  return (\r\n    <Modal variant='small' title={title} isOpen={isOpen} onClose={handleClose} actions={actions}>\r\n      <Form id='connect-login-form' isHorizontal onKeyUp={e => e.key === 'Enter' && handleLogin()}>\r\n        {loginFailed && (\r\n          <FormAlert>\r\n            <Alert variant='danger' title={loginFailedMessage} isInline />\r\n          </FormAlert>\r\n        )}\r\n        <FormGroup label='Username' isRequired fieldId='connect-login-form-username'>\r\n          <TextInput\r\n            isRequired\r\n            id='connect-login-form-username'\r\n            name='connect-login-form-username'\r\n            value={username}\r\n            onChange={value => setUsername(value)}\r\n            autoFocus={true}\r\n          />\r\n        </FormGroup>\r\n        <FormGroup label='Password' isRequired fieldId='connect-login-form-password'>\r\n          <TextInput\r\n            isRequired\r\n            id='connect-login-form-password'\r\n            name='connect-login-form-password'\r\n            type='password'\r\n            value={password}\r\n            onChange={value => setPassword(value)}\r\n          />\r\n        </FormGroup>\r\n      </Form>\r\n    </Modal>\r\n  )\r\n}\r\n","import {\r\n  Connection,\r\n  connectService,\r\n  ConnectStatus,\r\n  INITIAL_CONNECTION,\r\n} from '@hawtiosrc/plugins/shared/connect-service'\r\nimport {\r\n  Button,\r\n  ButtonVariant,\r\n  DataList,\r\n  DataListAction,\r\n  DataListCell,\r\n  DataListItem,\r\n  DataListItemCells,\r\n  DataListItemRow,\r\n  Dropdown,\r\n  DropdownItem,\r\n  DropdownPosition,\r\n  KebabToggle,\r\n  Modal,\r\n  ModalVariant,\r\n  Toolbar,\r\n  ToolbarContent,\r\n  ToolbarItem,\r\n} from '@patternfly/react-core'\r\nimport { PluggedIcon, PlusIcon, UnpluggedIcon } from '@patternfly/react-icons'\r\nimport React, { useContext, useEffect, useState } from 'react'\r\nimport { DELETE } from '../connections'\r\nimport { ConnectContext } from '../context'\r\nimport { log } from '../globals'\r\nimport { ConnectionModal } from './ConnectionModal'\r\nimport { ImportModal } from './ImportModal'\r\n\r\nexport const Remote: React.FunctionComponent = () => {\r\n  const { connections } = useContext(ConnectContext)\r\n  log.debug('Connections:', connections)\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <RemoteToolbar />\r\n      <DataList id='connection-list' aria-label='connection list' isCompact>\r\n        {Object.entries(connections).map(([id, connection]) => (\r\n          <ConnectionItem key={id} id={id} connection={connection} />\r\n        ))}\r\n      </DataList>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nconst RemoteToolbar: React.FunctionComponent = () => {\r\n  const { connections } = useContext(ConnectContext)\r\n  const [isAddOpen, setIsAddOpen] = useState(false)\r\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false)\r\n  const [isImportModalOpen, setIsImportModalOpen] = useState(false)\r\n\r\n  const handleAddToggle = () => {\r\n    setIsAddOpen(!isAddOpen)\r\n  }\r\n\r\n  const handleImportModalToggle = () => {\r\n    setIsImportModalOpen(!isImportModalOpen)\r\n  }\r\n\r\n  const exportConnections = () => {\r\n    connectService.export(connections)\r\n  }\r\n\r\n  const initialConnection = { ...INITIAL_CONNECTION }\r\n\r\n  return (\r\n    <Toolbar id='connect-toolbar'>\r\n      <ToolbarContent>\r\n        <ToolbarItem>\r\n          <Button variant={ButtonVariant.secondary} onClick={handleAddToggle}>\r\n            <PlusIcon /> Add connection\r\n          </Button>\r\n        </ToolbarItem>\r\n        <ToolbarItem>\r\n          <Dropdown\r\n            key='connect-toolbar-dropdown'\r\n            isPlain\r\n            isOpen={isDropdownOpen}\r\n            toggle={<KebabToggle onToggle={() => setIsDropdownOpen(!isDropdownOpen)} />}\r\n            dropdownItems={[\r\n              <DropdownItem key='connect-toolbar-dropdown-import' onClick={handleImportModalToggle}>\r\n                Import connections\r\n              </DropdownItem>,\r\n              <DropdownItem key='connect-toolbar-dropdown-export' onClick={exportConnections}>\r\n                Export connections\r\n              </DropdownItem>,\r\n            ]}\r\n          />\r\n        </ToolbarItem>\r\n      </ToolbarContent>\r\n      <ConnectionModal mode='add' isOpen={isAddOpen} onClose={handleAddToggle} input={initialConnection} />\r\n      <ImportModal isOpen={isImportModalOpen} onClose={handleImportModalToggle} />\r\n    </Toolbar>\r\n  )\r\n}\r\n\r\nconst ConnectionItem: React.FunctionComponent<{\r\n  id: string\r\n  connection: Connection\r\n}> = ({ id, connection }) => {\r\n  const { dispatch } = useContext(ConnectContext)\r\n  const [reachable, setReachable] = useState<ConnectStatus>('not-reachable')\r\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false)\r\n  const [isEditOpen, setIsEditOpen] = useState(false)\r\n  const [isConfirmDeleteOpen, setIsConfirmDeleteOpen] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const check = () => {\r\n      connectService.checkReachable(connection).then(result => setReachable(result))\r\n    }\r\n    check() // initial fire\r\n    const timer = setInterval(check, 20000)\r\n    return () => clearInterval(timer)\r\n  }, [connection])\r\n\r\n  const handleDropdownToggle = () => {\r\n    setIsDropdownOpen(!isDropdownOpen)\r\n  }\r\n\r\n  const handleEditToggle = () => {\r\n    setIsEditOpen(!isEditOpen)\r\n  }\r\n\r\n  const handleConfirmDeleteToggle = () => {\r\n    setIsConfirmDeleteOpen(!isConfirmDeleteOpen)\r\n  }\r\n\r\n  const connect = () => {\r\n    if (reachable !== 'reachable') {\r\n      return\r\n    }\r\n\r\n    log.debug('Connecting:', connection)\r\n    connectService.connect(connection)\r\n  }\r\n\r\n  const deleteConnection = () => {\r\n    dispatch({ type: DELETE, id })\r\n    handleConfirmDeleteToggle()\r\n  }\r\n\r\n  const ConfirmDeleteModal = () => (\r\n    <Modal\r\n      variant={ModalVariant.small}\r\n      title='Delete Connection'\r\n      titleIconVariant='danger'\r\n      isOpen={isConfirmDeleteOpen}\r\n      onClose={handleConfirmDeleteToggle}\r\n      actions={[\r\n        <Button key='delete' variant='danger' onClick={deleteConnection}>\r\n          Delete\r\n        </Button>,\r\n        <Button key='cancel' variant='link' onClick={handleConfirmDeleteToggle}>\r\n          Cancel\r\n        </Button>,\r\n      ]}\r\n    >\r\n      You are about to delete the <b>{connection.name}</b> connection.\r\n    </Modal>\r\n  )\r\n\r\n  let icon = null\r\n  switch (reachable) {\r\n    case 'reachable':\r\n      icon = <PluggedIcon color='green' />\r\n      break\r\n    case 'not-reachable':\r\n      icon = <UnpluggedIcon color='red' />\r\n      break\r\n    case 'not-reachable-securely':\r\n      icon = <PluggedIcon style={{ color: 'var(--pf-global--warning-color--100)' }} />\r\n      break\r\n  }\r\n\r\n  return (\r\n    <DataListItem key={`connection-${id}`} aria-labelledby={`connection ${connection.name}`}>\r\n      <DataListItemRow>\r\n        <DataListItemCells\r\n          dataListCells={[\r\n            <DataListCell key={`connection-cell-icon-${id}`} isIcon>\r\n              {icon}\r\n            </DataListCell>,\r\n            <DataListCell key={`connection-cell-name-${id}`}>\r\n              <b>{connection.name}</b>\r\n            </DataListCell>,\r\n            <DataListCell key={`connection-cell-url-${id}`} width={3}>\r\n              {connectService.connectionToUrl(connection)}\r\n            </DataListCell>,\r\n          ]}\r\n        />\r\n        <DataListAction\r\n          id={`connection-actions-${id}`}\r\n          aria-label={`connection actions ${connection.name}`}\r\n          aria-labelledby={`${connection.name} connection-actions-${id}`}\r\n        >\r\n          <Button\r\n            key={`connection-action-connect-${id}`}\r\n            variant='primary'\r\n            onClick={connect}\r\n            isDisabled={reachable !== 'reachable'}\r\n            isSmall\r\n          >\r\n            Connect\r\n          </Button>\r\n          <Dropdown\r\n            key={`connection-action-dropdown-${id}`}\r\n            isPlain\r\n            position={DropdownPosition.right}\r\n            isOpen={isDropdownOpen}\r\n            toggle={<KebabToggle onToggle={handleDropdownToggle} />}\r\n            dropdownItems={[\r\n              <DropdownItem key={`connection-action-edit-${id}`} onClick={handleEditToggle}>\r\n                Edit\r\n              </DropdownItem>,\r\n              <DropdownItem key={`connection-action-delete-${id}`} onClick={handleConfirmDeleteToggle}>\r\n                Delete\r\n              </DropdownItem>,\r\n            ]}\r\n          />\r\n          <ConfirmDeleteModal />\r\n        </DataListAction>\r\n      </DataListItemRow>\r\n      <ConnectionModal mode='edit' isOpen={isEditOpen} onClose={handleEditToggle} input={connection} />\r\n    </DataListItem>\r\n  )\r\n}\r\n","import { Connection, ConnectionTestResult, connectService } from '@hawtiosrc/plugins/shared/connect-service'\r\nimport { isBlank } from '@hawtiosrc/util/strings'\r\nimport {\r\n  ActionGroup,\r\n  Button,\r\n  ButtonVariant,\r\n  Form,\r\n  FormGroup,\r\n  HelperText,\r\n  HelperTextItem,\r\n  Modal,\r\n  ModalVariant,\r\n  Switch,\r\n  TextInput,\r\n} from '@patternfly/react-core'\r\nimport { ExclamationCircleIcon } from '@patternfly/react-icons'\r\nimport React, { useContext, useState } from 'react'\r\nimport { ADD, UPDATE } from '../connections'\r\nimport { ConnectContext } from '../context'\r\n\r\ntype Validation = {\r\n  text: string\r\n  validated: 'success' | 'warning' | 'error' | 'default'\r\n}\r\n\r\ntype Validations = {\r\n  name: Validation\r\n  host: Validation\r\n  port: Validation\r\n  test: ConnectionTestResult | null\r\n}\r\n\r\nconst emptyResult: Validations = {\r\n  name: { text: '', validated: 'default' },\r\n  host: { text: '', validated: 'default' },\r\n  port: { text: '', validated: 'default' },\r\n  test: null,\r\n} as const\r\n\r\nexport const ConnectionModal: React.FunctionComponent<{\r\n  mode: 'add' | 'edit'\r\n  isOpen: boolean\r\n  onClose: () => void\r\n  input: Connection\r\n}> = ({ mode, isOpen, onClose, input }) => {\r\n  const { connections, dispatch } = useContext(ConnectContext)\r\n\r\n  const [connection, setConnection] = useState(input)\r\n  const [validations, setValidations] = useState(emptyResult)\r\n\r\n  const test = async () => {\r\n    if (!validate()) {\r\n      return\r\n    }\r\n\r\n    try {\r\n      const result = await connectService.testConnection(connection)\r\n      setValidations({ ...emptyResult, test: result })\r\n    } catch (error) {\r\n      setValidations({ ...emptyResult, test: { status: 'not-reachable', message: '' + error } })\r\n    }\r\n  }\r\n\r\n  const validate = () => {\r\n    const result = { ...emptyResult }\r\n    const { id: cid, name, host, port } = connection\r\n    let valid = true\r\n\r\n    // Name\r\n    if (isBlank(name)) {\r\n      result.name = {\r\n        text: 'Please fill out this field',\r\n        validated: 'error',\r\n      }\r\n      valid = false\r\n    } else if (name !== input.name) {\r\n      for (const id in connections) {\r\n        if (id !== cid && connections[id]?.name === name) {\r\n          result.name = {\r\n            text: `Connection name '${connection.name.trim()}' is already in use`,\r\n            validated: 'error',\r\n          }\r\n          valid = false\r\n          break\r\n        }\r\n      }\r\n    }\r\n\r\n    // Host\r\n    if (isBlank(host)) {\r\n      result.host = {\r\n        text: 'Please fill out this field',\r\n        validated: 'error',\r\n      }\r\n      valid = false\r\n    } else if (host.indexOf(':') !== -1) {\r\n      result.host = {\r\n        // TODO: IPv6\r\n        text: \"Invalid character ':'\",\r\n        validated: 'error',\r\n      }\r\n      valid = false\r\n    }\r\n\r\n    // Port\r\n    if (port === null || port < 0 || port > 65535) {\r\n      result.port = {\r\n        text: 'Please enter a number from 0 to 65535',\r\n        validated: 'error',\r\n      }\r\n      valid = false\r\n    }\r\n\r\n    if (!valid) {\r\n      setValidations(result)\r\n    }\r\n    return valid\r\n  }\r\n\r\n  const save = () => {\r\n    if (!validate()) {\r\n      return\r\n    }\r\n\r\n    switch (mode) {\r\n      case 'add':\r\n        dispatch({ type: ADD, connection })\r\n        setConnection(input)\r\n        break\r\n      case 'edit':\r\n        dispatch({ type: UPDATE, id: input.id, connection })\r\n        setConnection(connection)\r\n        break\r\n    }\r\n    setValidations(emptyResult)\r\n    onClose()\r\n  }\r\n\r\n  const clear = () => {\r\n    setConnection(input)\r\n    setValidations(emptyResult)\r\n    onClose()\r\n  }\r\n\r\n  const modalTitle = (mode === 'add' ? 'Add' : 'Edit') + ' Connection'\r\n\r\n  return (\r\n    <Modal\r\n      variant={ModalVariant.medium}\r\n      title={modalTitle}\r\n      isOpen={isOpen}\r\n      onClose={clear}\r\n      actions={[\r\n        <Button key='save' variant={ButtonVariant.primary} form='connection-form' onClick={save}>\r\n          {mode === 'add' ? 'Add' : 'Save'}\r\n        </Button>,\r\n        <Button key='cancel' variant={ButtonVariant.link} onClick={clear}>\r\n          Cancel\r\n        </Button>,\r\n      ]}\r\n    >\r\n      <Form id='connection-form' isHorizontal>\r\n        <FormGroup\r\n          label='Name'\r\n          isRequired\r\n          fieldId='connection-form-name'\r\n          helperTextInvalid={validations.name.text}\r\n          helperTextInvalidIcon={<ExclamationCircleIcon />}\r\n          validated={validations.name.validated}\r\n        >\r\n          <TextInput\r\n            isRequired\r\n            id='connection-form-name'\r\n            name='connection-form-name'\r\n            value={connection.name}\r\n            onChange={name => setConnection({ ...connection, name })}\r\n            validated={validations.name.validated}\r\n          />\r\n        </FormGroup>\r\n        <FormGroup label='Scheme' isRequired fieldId='connection-form-scheme'>\r\n          <Switch\r\n            id='connection-form-scheme'\r\n            label='HTTPS'\r\n            labelOff='HTTP'\r\n            isChecked={connection.scheme === 'https'}\r\n            onChange={https => setConnection({ ...connection, scheme: https ? 'https' : 'http' })}\r\n          />\r\n        </FormGroup>\r\n        <FormGroup\r\n          label='Host'\r\n          isRequired\r\n          fieldId='connection-form-host'\r\n          helperTextInvalid={validations.host.text}\r\n          helperTextInvalidIcon={<ExclamationCircleIcon />}\r\n          validated={validations.host.validated}\r\n        >\r\n          <TextInput\r\n            isRequired\r\n            id='connection-form-host'\r\n            name='connection-form-host'\r\n            value={connection.host}\r\n            onChange={host => setConnection({ ...connection, host })}\r\n            validated={validations.host.validated}\r\n          />\r\n        </FormGroup>\r\n        <FormGroup\r\n          label='Port'\r\n          isRequired\r\n          fieldId='connection-form-port'\r\n          helperTextInvalid={validations.port.text}\r\n          helperTextInvalidIcon={<ExclamationCircleIcon />}\r\n          validated={validations.port.validated}\r\n        >\r\n          <TextInput\r\n            isRequired\r\n            type='number'\r\n            id='connection-form-port'\r\n            name='connection-form-port'\r\n            value={connection.port}\r\n            onChange={port => setConnection({ ...connection, port: parseInt(port) })}\r\n            validated={validations.port.validated}\r\n          />\r\n        </FormGroup>\r\n        <FormGroup label='Path' isRequired fieldId='connection-form-path'>\r\n          <TextInput\r\n            isRequired\r\n            id='connection-form-path'\r\n            name='connection-form-path'\r\n            value={connection.path}\r\n            onChange={path => setConnection({ ...connection, path })}\r\n          />\r\n        </FormGroup>\r\n        <ActionGroup>\r\n          <Button variant={ButtonVariant.secondary} onClick={test} isSmall>\r\n            Test connection\r\n          </Button>\r\n          {validations.test ? (\r\n            <HelperText>\r\n              <HelperTextItem variant={validations.test.status === 'reachable' ? 'success' : 'error'} hasIcon>\r\n                {validations.test.message}\r\n              </HelperTextItem>\r\n            </HelperText>\r\n          ) : null}\r\n        </ActionGroup>\r\n      </Form>\r\n    </Modal>\r\n  )\r\n}\r\n","import { eventService } from '@hawtiosrc/core'\r\nimport { Button, FileUpload, Modal, ModalVariant } from '@patternfly/react-core'\r\nimport { useContext, useState } from 'react'\r\nimport { ConnectContext } from '../context'\r\n\r\nexport const ImportModal: React.FunctionComponent<{\r\n  isOpen: boolean\r\n  onClose: () => void\r\n}> = ({ isOpen, onClose }) => {\r\n  const { dispatch } = useContext(ConnectContext)\r\n\r\n  const [fileContent, setFileContent] = useState('')\r\n  const [filename, setFilename] = useState('')\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n  const handleFileInputChange = (\r\n    _event: React.ChangeEvent<HTMLInputElement> | React.DragEvent<HTMLElement>,\r\n    file: File,\r\n  ) => {\r\n    setFilename(file.name)\r\n  }\r\n\r\n  const handleTextChange = (value: string) => {\r\n    setFileContent(value)\r\n  }\r\n\r\n  const handleClear = () => {\r\n    setFilename('')\r\n    setFileContent('')\r\n  }\r\n\r\n  const clearAndClose = () => {\r\n    handleClear()\r\n    onClose()\r\n  }\r\n\r\n  const handleFileReadStarted = () => {\r\n    setIsLoading(true)\r\n  }\r\n\r\n  const handleFileReadFinished = () => {\r\n    setIsLoading(false)\r\n  }\r\n\r\n  const importConnections = () => {\r\n    try {\r\n      const connections = JSON.parse(fileContent)\r\n      if (Array.isArray(connections)) {\r\n        dispatch({ type: 'IMPORT', connections })\r\n        clearAndClose()\r\n        eventService.notify({ type: 'success', message: 'Connections imported successfully' })\r\n      } else {\r\n        clearAndClose()\r\n        eventService.notify({ type: 'danger', message: 'Unexpected connections data format' })\r\n      }\r\n    } catch (e) {\r\n      clearAndClose()\r\n      let msg = 'Invalid connections data format'\r\n      if (e instanceof Error) {\r\n        msg = (e as Error).message\r\n      }\r\n      eventService.notify({ type: 'danger', message: msg })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      variant={ModalVariant.medium}\r\n      title='Import connections'\r\n      isOpen={isOpen}\r\n      onClose={clearAndClose}\r\n      actions={[\r\n        <Button key='import' variant='primary' onClick={importConnections}>\r\n          Import\r\n        </Button>,\r\n        <Button key='cancel' variant='link' onClick={clearAndClose}>\r\n          Cancel\r\n        </Button>,\r\n      ]}\r\n    >\r\n      <FileUpload\r\n        id='connect-import-connections-file-upload'\r\n        type='text'\r\n        value={fileContent}\r\n        filename={filename}\r\n        filenamePlaceholder='Drag and drop or upload an exported JSON file'\r\n        onFileInputChange={handleFileInputChange}\r\n        onDataChange={handleTextChange}\r\n        onTextChange={handleTextChange}\r\n        onReadStarted={handleFileReadStarted}\r\n        onReadFinished={handleFileReadFinished}\r\n        onClearClick={handleClear}\r\n        isLoading={isLoading}\r\n        allowEditingUploadedText={false}\r\n        browseButtonText='Upload'\r\n      />\r\n    </Modal>\r\n  )\r\n}\r\n","import { jolokiaService } from '@hawtiosrc/plugins/shared/jolokia-service'\r\nimport { TooltipHelpIcon } from '@hawtiosrc/ui/icons'\r\nimport {\r\n  Alert,\r\n  Button,\r\n  CardBody,\r\n  Checkbox,\r\n  Form,\r\n  FormGroup,\r\n  FormGroupProps,\r\n  FormSection,\r\n  Modal,\r\n  ModalVariant,\r\n  TextInput,\r\n} from '@patternfly/react-core'\r\nimport React, { useState } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { RESET } from './connections'\r\nimport { useConnections } from './context'\r\nimport { log } from './globals'\r\n\r\nexport const ConnectPreferences: React.FunctionComponent = () => (\r\n  <CardBody>\r\n    <Form isHorizontal>\r\n      <JolokiaForm />\r\n      <ResetForm />\r\n    </Form>\r\n  </CardBody>\r\n)\r\n\r\nconst JolokiaForm: React.FunctionComponent = () => {\r\n  const navigate = useNavigate()\r\n\r\n  const jolokiaStoredOptions = jolokiaService.loadJolokiaStoredOptions()\r\n  const [updateRate, setUpdateRate] = useState(jolokiaService.loadUpdateRate())\r\n  const [updateRateValidated, setUpdateRateValidated] = useState<FormGroupProps['validated']>('default')\r\n  const [updateRateInvalidText, setUpdateRateInvalidText] = useState('')\r\n  const [maxDepth, setMaxDepth] = useState(jolokiaStoredOptions.maxDepth)\r\n  const [maxDepthValidated, setMaxDepthValidated] = useState<FormGroupProps['validated']>('default')\r\n  const [maxDepthInvalidText, setMaxDepthInvalidText] = useState('')\r\n  const [maxCollectionSize, setMaxCollectionSize] = useState(jolokiaStoredOptions.maxCollectionSize)\r\n  const [maxCollectionSizeValidated, setMaxCollectionSizeValidated] = useState<FormGroupProps['validated']>('default')\r\n  const [maxCollectionSizeInvalidText, setMaxCollectionSizeInvalidText] = useState('')\r\n  const [autoRefresh, setAutoRefresh] = useState(jolokiaService.loadAutoRefresh())\r\n\r\n  const onUpdateRateChanged = (updateRate: string) => {\r\n    const intValue = parseInt(updateRate)\r\n    if (!intValue) {\r\n      setUpdateRateValidated('error')\r\n      setUpdateRateInvalidText('Must be a number')\r\n      return\r\n    }\r\n    if (intValue <= 0) {\r\n      setUpdateRateValidated('error')\r\n      setUpdateRateInvalidText('Must be greater than 0')\r\n      return\r\n    }\r\n\r\n    setUpdateRate(intValue)\r\n    setUpdateRateValidated('success')\r\n  }\r\n\r\n  const onMaxDepthChanged = (maxDepth: string) => {\r\n    const intValue = parseInt(maxDepth)\r\n    if (!intValue) {\r\n      setMaxDepthValidated('error')\r\n      setMaxDepthInvalidText('Must be a number')\r\n      return\r\n    }\r\n    if (intValue <= 0) {\r\n      setMaxDepthValidated('error')\r\n      setMaxDepthInvalidText('Must be greater than 0')\r\n      return\r\n    }\r\n\r\n    setMaxDepth(intValue)\r\n    setMaxDepthValidated('success')\r\n  }\r\n\r\n  const onMaxCollectionSizeChanged = (maxCollectionSize: string) => {\r\n    const intValue = parseInt(maxCollectionSize)\r\n    if (!intValue) {\r\n      setMaxCollectionSizeValidated('error')\r\n      setMaxCollectionSizeInvalidText('Must be a number')\r\n      return\r\n    }\r\n    if (intValue <= 0) {\r\n      setMaxCollectionSizeValidated('error')\r\n      setMaxCollectionSizeInvalidText('Must be greater than 0')\r\n      return\r\n    }\r\n\r\n    setMaxCollectionSize(intValue)\r\n    setMaxCollectionSizeValidated('success')\r\n  }\r\n\r\n  const onAutoRefreshChanged = (autoRefresh: boolean) => {\r\n    setAutoRefresh(autoRefresh)\r\n  }\r\n\r\n  const applyJolokia = () => {\r\n    jolokiaService.saveUpdateRate(updateRate)\r\n    jolokiaService.saveJolokiaStoredOptions({ maxDepth, maxCollectionSize })\r\n    jolokiaService.saveAutoRefresh(autoRefresh)\r\n\r\n    // Page reload will apply currently stored preferences into Jolokia\r\n    navigate(0)\r\n  }\r\n\r\n  return (\r\n    <FormSection title='Jolokia' titleElement='h2'>\r\n      <FormGroup\r\n        label='Update rate'\r\n        fieldId='jolokia-form-update-rate'\r\n        validated={updateRateValidated}\r\n        helperTextInvalid={updateRateInvalidText}\r\n        labelIcon={<TooltipHelpIcon tooltip='The period between polls to jolokia to fetch JMX data' />}\r\n      >\r\n        <TextInput\r\n          id='jolokia-form-update-rate-input'\r\n          type='number'\r\n          value={updateRate}\r\n          validated={updateRateValidated}\r\n          onChange={onUpdateRateChanged}\r\n        />\r\n      </FormGroup>\r\n      <FormGroup\r\n        label='Max depth'\r\n        fieldId='jolokia-form-max-depth'\r\n        validated={maxDepthValidated}\r\n        helperTextInvalid={maxDepthInvalidText}\r\n        labelIcon={\r\n          <TooltipHelpIcon tooltip='The number of levels jolokia will marshal an object to json on the server side before returning' />\r\n        }\r\n      >\r\n        <TextInput\r\n          id='jolokia-form-max-depth-input'\r\n          type='number'\r\n          value={maxDepth}\r\n          validated={maxDepthValidated}\r\n          onChange={onMaxDepthChanged}\r\n        />\r\n      </FormGroup>\r\n      <FormGroup\r\n        label='Max collection size'\r\n        fieldId='jolokia-form-max-collection-size'\r\n        validated={maxCollectionSizeValidated}\r\n        helperTextInvalid={maxCollectionSizeInvalidText}\r\n        labelIcon={\r\n          <TooltipHelpIcon tooltip='The maximum number of elements in an array that jolokia will marshal in a response' />\r\n        }\r\n      >\r\n        <TextInput\r\n          id='jolokia-form-max-collection-size-input'\r\n          type='number'\r\n          value={maxCollectionSize}\r\n          validated={maxCollectionSizeValidated}\r\n          onChange={onMaxCollectionSizeChanged}\r\n        />\r\n      </FormGroup>\r\n      <FormGroup\r\n        label='Auto refresh'\r\n        fieldId='jolokia-form-auto-refresh'\r\n        labelIcon={\r\n          <TooltipHelpIcon tooltip='Whether the page should refresh whenever it detects an update on a plugin' />\r\n        }\r\n      >\r\n        <Checkbox id='jolokia-form-auto-refresh-input' isChecked={autoRefresh} onChange={onAutoRefreshChanged} />\r\n      </FormGroup>\r\n      <FormGroup fieldId='jolokia-form-apply' helperText='Restart Hawtio with the new values in effect.'>\r\n        <Button onClick={applyJolokia}>Apply</Button>\r\n      </FormGroup>\r\n    </FormSection>\r\n  )\r\n}\r\n\r\nconst ResetForm: React.FunctionComponent = () => {\r\n  const { dispatch } = useConnections()\r\n  const [isConfirmModalOpen, setIsConfirmModalOpen] = useState(false)\r\n  const [isClearSuccess, setIsClearSuccess] = useState(false)\r\n\r\n  const clear = () => {\r\n    log.debug('Clear saved connections')\r\n    dispatch({ type: RESET })\r\n    setIsClearSuccess(true)\r\n    setIsConfirmModalOpen(false)\r\n  }\r\n\r\n  const confirmClear = () => {\r\n    setIsConfirmModalOpen(!isConfirmModalOpen)\r\n  }\r\n\r\n  const ConfirmClearModal = () => (\r\n    <Modal\r\n      variant={ModalVariant.small}\r\n      title='Clear saved connections'\r\n      titleIconVariant='danger'\r\n      isOpen={isConfirmModalOpen}\r\n      onClose={confirmClear}\r\n      actions={[\r\n        <Button key='reset' variant='danger' onClick={clear}>\r\n          Clear\r\n        </Button>,\r\n        <Button key='cancel' variant='link' onClick={confirmClear}>\r\n          Cancel\r\n        </Button>,\r\n      ]}\r\n    >\r\n      You are about to clear all saved connection settings.\r\n    </Modal>\r\n  )\r\n\r\n  return (\r\n    <FormSection title='Reset' titleElement='h2'>\r\n      <FormGroup\r\n        label='Clear saved connections'\r\n        fieldId='reset-form-clear'\r\n        helperText='Clear all saved connection settings stored in your browser local storage.'\r\n      >\r\n        <Button variant='danger' onClick={confirmClear}>\r\n          Clear\r\n        </Button>\r\n        <ConfirmClearModal />\r\n      </FormGroup>\r\n      {isClearSuccess && <Alert variant='success' isInline title='Connections cleared successfully!' />}\r\n    </FormSection>\r\n  )\r\n}\r\n","## Connect\r\n\r\nThe Connect tab allows you to connect to local and remote Jolokia instances so you can examine JVMs.\r\n\r\nThe \"Remote\" sub-tab is used to manually add connection details for a Jolokia instance. You can store connection details and quickly recall the details of a connection and connect.\r\n\r\nThe use proxy option should often be enabled, as Hawtio is running in your browser; usually due to CORS; you cannot open a different host or port from your browser (due to browse security restrictions); so we have to use a proxy servlet inside the Hawtio web app to proxy all requests for a different jolokia server - so we can communicate with a different jolokia agent.\r\n\r\nThe \"Local\" sub-tab lists local JVMs running on your machine and allows you to install the Jolokia JVM agent into a running JVM and connect to it. For this to actually work you need to have your JDK's \"tools.jar\" in the classpath, along with Jolokia's JVM agent jar.\r\n\r\nThe \"Discover\" sub-tab lists all JVMs which Jolokia could discover in the network, using its built-in discovery.\r\n","import { userService } from '@hawtiosrc/auth/user-service'\r\nimport { connectService } from '@hawtiosrc/plugins/shared/connect-service'\r\nimport { PATH_PROXY_ENABLED, log } from './globals'\r\n\r\nexport async function isActive(): Promise<boolean> {\r\n  const proxyEnabled = await isProxyEnabled()\r\n  if (!proxyEnabled) {\r\n    return false\r\n  }\r\n\r\n  // The connect login path is exceptionally allowlisted to provide login form for\r\n  // remote Jolokia endpoints requiring authentication.\r\n  return connectService.getCurrentConnectionId() === null || isConnectLogin()\r\n}\r\n\r\nexport async function isConnectionStatusActive(): Promise<boolean> {\r\n  const proxyEnabled = await isProxyEnabled()\r\n  if (!proxyEnabled) {\r\n    return false\r\n  }\r\n\r\n  // for \"main\" hawtio page, where this plugin is fully active, we don't have to show the connection status\r\n  // but for actually connected tab, we want the status in the header\r\n  return connectService.getCurrentConnectionId() !== null\r\n}\r\n\r\nasync function isProxyEnabled(): Promise<boolean> {\r\n  try {\r\n    const res = await fetch(PATH_PROXY_ENABLED)\r\n    if (!res.ok) {\r\n      // Silently ignore and enable it when fetch failed\r\n      log.debug('Failed to fetch', PATH_PROXY_ENABLED, ':', res.status, res.statusText)\r\n      return true\r\n    }\r\n\r\n    const data = await res.text()\r\n    // Disable proxy only when explicitly disabled\r\n    const enabled = data.trim() !== 'false'\r\n    log.debug('Proxy enabled:', enabled)\r\n    return enabled\r\n  } catch (err) {\r\n    // Silently ignore and enable it when the path is not available\r\n    log.debug('Failed to fetch', PATH_PROXY_ENABLED, ':', err)\r\n    return true\r\n  }\r\n}\r\n\r\nfunction isConnectLogin(): boolean {\r\n  const url = new URL(window.location.href)\r\n  return url.pathname === connectService.getLoginPath()\r\n}\r\n\r\n/**\r\n * Register user hooks to userService if it's connecting to an authenticated\r\n * remote Jolokia endpoint with credentials in session storage, so that the user\r\n * can reflect the remote credentials.\r\n */\r\nexport function registerUserHooks() {\r\n  const credPromise = connectService.getCurrentCredentials()\r\n\r\n  // no fetchUserHook - remote Jolokia credentials are not Hawtio credentials\r\n\r\n  userService.addLogoutHook('connect', async () => {\r\n    const credentials = await credPromise\r\n    if (!credentials) {\r\n      return false\r\n    }\r\n    // Logout from remote connection should close the window\r\n    window.close()\r\n    return true\r\n  })\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { connectService, ConnectStatus } from '@hawtiosrc/plugins/shared/connect-service'\r\nimport { PluggedIcon, UnpluggedIcon } from '@patternfly/react-icons'\r\n\r\n/**\r\n * Component to be displayed in HawtioHeaderToolbar for remote connection tabs\r\n * @constructor\r\n */\r\nexport const ConnectionStatus: React.FunctionComponent = () => {\r\n  const [reachable, setReachable] = useState<ConnectStatus>('not-reachable')\r\n  const [username, setUsername] = useState('')\r\n\r\n  const connectionId = connectService.getCurrentConnectionId()\r\n  const connectionName = connectService.getCurrentConnectionName()\r\n\r\n  useEffect(() => {\r\n    connectService.getCurrentCredentials().then(credentials => {\r\n      const username = credentials ? credentials.username : ''\r\n      setUsername(username)\r\n    })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const check = async () => {\r\n      const connection = await connectService.getCurrentConnection()\r\n      if (connection) {\r\n        connectService.checkReachable(connection).then(result => setReachable(result))\r\n      }\r\n    }\r\n    check() // initial fire\r\n    const timer = setInterval(check, 20000)\r\n    return () => clearInterval(timer)\r\n  }, [connectionId])\r\n\r\n  let icon = null\r\n  switch (reachable) {\r\n    case 'reachable':\r\n      icon = <PluggedIcon color='green' />\r\n      break\r\n    case 'not-reachable':\r\n      icon = <UnpluggedIcon color='red' />\r\n      break\r\n    case 'not-reachable-securely':\r\n      icon = <PluggedIcon style={{ color: 'var(--pf-global--warning-color--100)' }} />\r\n      break\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {icon} {connectionName && connectionName} {username && `(${username})`}\r\n    </>\r\n  )\r\n}\r\n","import { hawtio, HawtioPlugin, UniversalHeaderItem } from '@hawtiosrc/core'\r\nimport { helpRegistry } from '@hawtiosrc/help/registry'\r\nimport { preferencesRegistry } from '@hawtiosrc/preferences/registry'\r\nimport { Connect } from './Connect'\r\nimport { ConnectPreferences } from './ConnectPreferences'\r\nimport { pluginId, pluginPath, pluginTitle, statusPluginId } from './globals'\r\nimport help from './help.md'\r\nimport { isActive, isConnectionStatusActive, registerUserHooks } from './init'\r\nimport { ConnectionStatus } from '@hawtiosrc/plugins/connect/ConnectionStatus'\r\n\r\nconst order = 11\r\n\r\nconst connectStatusItem: UniversalHeaderItem = {\r\n  component: ConnectionStatus,\r\n  universal: true,\r\n}\r\n\r\nexport const connect: HawtioPlugin = () => {\r\n  registerUserHooks()\r\n  hawtio.addPlugin({\r\n    id: pluginId,\r\n    title: pluginTitle,\r\n    path: pluginPath,\r\n    order,\r\n    component: Connect,\r\n    isActive,\r\n  })\r\n  hawtio.addPlugin({\r\n    id: statusPluginId,\r\n    headerItems: [connectStatusItem],\r\n    isActive: isConnectionStatusActive,\r\n  })\r\n  helpRegistry.add(pluginId, pluginTitle, help, order)\r\n  preferencesRegistry.add(pluginId, pluginTitle, ConnectPreferences, order)\r\n}\r\n\r\nexport * from './connections'\r\n","import { Logger } from '@hawtiosrc/core/logging'\r\n\r\nexport const pluginName = 'hawtio-jmx'\r\nexport const pluginPath = '/jmx'\r\nexport const log = Logger.get(pluginName)\r\n","## JMX\r\n\r\nThe JMX plugin gives a raw view of the underlying JMX metric data, allowing access to the entire JMX domain tree of MBeans.\r\n","import {\r\n  EmptyState,\r\n  EmptyStateIcon,\r\n  EmptyStateVariant,\r\n  PageSection,\r\n  PageSectionVariants,\r\n  Spinner,\r\n  Title,\r\n} from '@patternfly/react-core'\r\nimport { CubesIcon } from '@patternfly/react-icons'\r\nimport React from 'react'\r\nimport Split from 'react-split'\r\nimport { MBeanTreeContext, useMBeanTree } from './context'\r\nimport './Jmx.css'\r\nimport { JmxContent } from './JmxContent'\r\nimport { JmxTreeView } from './JmxTreeView'\r\n\r\nexport const Jmx: React.FunctionComponent = () => {\r\n  const { tree, loaded, selectedNode, setSelectedNode } = useMBeanTree()\r\n\r\n  if (!loaded) {\r\n    return (\r\n      <PageSection>\r\n        <Spinner isSVG aria-label='Loading MBean tree' />\r\n      </PageSection>\r\n    )\r\n  }\r\n\r\n  if (tree.isEmpty()) {\r\n    return (\r\n      <PageSection variant={PageSectionVariants.light}>\r\n        <EmptyState variant={EmptyStateVariant.full}>\r\n          <EmptyStateIcon icon={CubesIcon} />\r\n          <Title headingLevel='h1' size='lg'>\r\n            No MBeans found\r\n          </Title>\r\n        </EmptyState>\r\n      </PageSection>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <MBeanTreeContext.Provider value={{ tree, selectedNode, setSelectedNode }}>\r\n      <Split className='jmx-split' sizes={[30, 70]} minSize={200} gutterSize={5}>\r\n        <div>\r\n          <JmxTreeView />\r\n        </div>\r\n        <div>\r\n          <JmxContent />\r\n        </div>\r\n      </Split>\r\n    </MBeanTreeContext.Provider>\r\n  )\r\n}\r\n","import { EVENT_REFRESH, eventService } from '@hawtiosrc/core'\r\nimport { PluginNodeSelectionContext } from '@hawtiosrc/plugins'\r\nimport { MBeanNode, MBeanTree, workspace } from '@hawtiosrc/plugins/shared'\r\nimport { createContext, useContext, useEffect, useRef, useState } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { pluginName, pluginPath } from './globals'\r\n\r\n/**\r\n * Custom React hook for using JMX MBean tree.\r\n */\r\nexport function useMBeanTree() {\r\n  const [tree, setTree] = useState(MBeanTree.createEmpty(pluginName))\r\n  const [loaded, setLoaded] = useState(false)\r\n  const { selectedNode, setSelectedNode } = useContext(PluginNodeSelectionContext)\r\n  const navigate = useNavigate()\r\n\r\n  /*\r\n   * Need to preserve the selected node between re-renders since the\r\n   * populateTree function called via the refresh listener does not\r\n   * cache the value and stores it as null\r\n   */\r\n  const refSelectedNode = useRef<MBeanNode | null>()\r\n  refSelectedNode.current = selectedNode\r\n\r\n  const populateTree = async () => {\r\n    const wkspTree: MBeanTree = await workspace.getTree()\r\n    setTree(wkspTree)\r\n\r\n    if (!refSelectedNode.current) return\r\n\r\n    const path = [...refSelectedNode.current.path()]\r\n\r\n    // Expand the nodes to redisplay the path\r\n    wkspTree.forEach(path, node => {\r\n      node.defaultExpanded = true\r\n    })\r\n\r\n    // Ensure the new version of the selected node is selected\r\n    const newSelected = wkspTree.navigate(...path)\r\n    if (newSelected) setSelectedNode(newSelected)\r\n\r\n    /* On population of tree, ensure the url path is returned to the base plugin path */\r\n    navigate(pluginPath)\r\n  }\r\n\r\n  useEffect(() => {\r\n    const loadTree = async () => {\r\n      await populateTree()\r\n      setLoaded(true)\r\n    }\r\n\r\n    const listener = () => {\r\n      setLoaded(false)\r\n      loadTree()\r\n    }\r\n    eventService.onRefresh(listener)\r\n\r\n    loadTree()\r\n\r\n    return () => eventService.removeListener(EVENT_REFRESH, listener)\r\n    /*\r\n     * This effect should only be called on mount so cannot depend on selectedNode\r\n     * But cannot have [] removed either as this seems to execute the effect repeatedly\r\n     * So disable the lint check.\r\n     */\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n\r\n  return { tree, loaded, selectedNode, setSelectedNode }\r\n}\r\n\r\ntype MBeanTreeContext = {\r\n  tree: MBeanTree\r\n  selectedNode: MBeanNode | null\r\n  setSelectedNode: (selected: MBeanNode | null) => void\r\n}\r\n\r\nexport const MBeanTreeContext = createContext<MBeanTreeContext>({\r\n  tree: MBeanTree.createEmpty(pluginName),\r\n  selectedNode: null,\r\n  setSelectedNode: () => {\r\n    /* no-op */\r\n  },\r\n})\r\n","import { Chart, JmxContentMBeans, MBeanNode } from '@hawtiosrc/plugins/shared'\r\nimport { AttributeTable, Attributes } from '@hawtiosrc/plugins/shared/attributes'\r\nimport { Operations } from '@hawtiosrc/plugins/shared/operations'\r\nimport {\r\n  Divider,\r\n  EmptyState,\r\n  EmptyStateIcon,\r\n  EmptyStateVariant,\r\n  Nav,\r\n  NavItem,\r\n  NavList,\r\n  PageGroup,\r\n  PageSection,\r\n  PageSectionVariants,\r\n  Text,\r\n  Title,\r\n} from '@patternfly/react-core'\r\nimport { CubesIcon } from '@patternfly/react-icons'\r\nimport React, { useContext } from 'react'\r\nimport { NavLink, Navigate, Route, Routes, useLocation } from 'react-router-dom'\r\nimport './JmxContent.css'\r\nimport { MBeanTreeContext } from './context'\r\nimport { pluginPath } from '@hawtiosrc/plugins/jmx/globals'\r\n\r\nexport const JmxContent: React.FunctionComponent = () => {\r\n  const { selectedNode } = useContext(MBeanTreeContext)\r\n  const { pathname, search } = useLocation()\r\n\r\n  if (!selectedNode) {\r\n    return (\r\n      <PageSection variant={PageSectionVariants.light} isFilled>\r\n        <EmptyState variant={EmptyStateVariant.full}>\r\n          <EmptyStateIcon icon={CubesIcon} />\r\n          <Title headingLevel='h1' size='lg'>\r\n            Select MBean\r\n          </Title>\r\n        </EmptyState>\r\n      </PageSection>\r\n    )\r\n  }\r\n\r\n  const mBeanApplicable = (node: MBeanNode) => Boolean(node.objectName)\r\n  const mBeanCollectionApplicable = (node: MBeanNode) => Boolean(node.children?.every(child => child.objectName))\r\n  const hasAnyApplicableMBean = (node: MBeanNode) =>\r\n    Boolean(node.objectName) || Boolean(node.children?.some(child => child.objectName))\r\n  const ALWAYS = (node: MBeanNode) => true\r\n\r\n  const tableSelector: (node: MBeanNode) => React.FunctionComponent = (node: MBeanNode) => {\r\n    const tablePriorityList: { condition: (node: MBeanNode) => boolean; element: React.FunctionComponent }[] = [\r\n      { condition: mBeanApplicable, element: Attributes },\r\n      { condition: mBeanCollectionApplicable, element: AttributeTable },\r\n    ]\r\n\r\n    return tablePriorityList.find(entry => entry.condition(node))?.element ?? JmxContentMBeans\r\n  }\r\n\r\n  const allNavItems = [\r\n    { id: 'attributes', title: 'Attributes', component: tableSelector(selectedNode), isApplicable: ALWAYS },\r\n    { id: 'operations', title: 'Operations', component: Operations, isApplicable: mBeanApplicable },\r\n    { id: 'chart', title: 'Chart', component: Chart, isApplicable: hasAnyApplicableMBean },\r\n  ]\r\n\r\n  /* Filter the nav items to those applicable to the selected node */\r\n  const navItems = allNavItems.filter(nav => nav.isApplicable(selectedNode))\r\n\r\n  const mbeanNav = (\r\n    <Nav aria-label='MBean Nav' variant='tertiary'>\r\n      <NavList>\r\n        {navItems.map(nav => (\r\n          <NavItem key={nav.id} isActive={pathname === `${pluginPath}/${nav.id}`}>\r\n            <NavLink to={{ pathname: nav.id, search }}>{nav.title}</NavLink>\r\n          </NavItem>\r\n        ))}\r\n      </NavList>\r\n    </Nav>\r\n  )\r\n\r\n  const mbeanRoutes = navItems.map(nav => (\r\n    <Route key={nav.id} path={nav.id} element={React.createElement(nav.component)} />\r\n  ))\r\n\r\n  return (\r\n    <PageGroup id='jmx-content'>\r\n      <PageSection id='jmx-content-header' variant={PageSectionVariants.light}>\r\n        <Title headingLevel='h1'>{selectedNode.name}</Title>\r\n        <Text component='small'>{selectedNode.objectName}</Text>\r\n      </PageSection>\r\n      <Divider />\r\n      <PageSection type='tabs' variant={PageSectionVariants.light} hasShadowBottom>\r\n        {mbeanNav}\r\n      </PageSection>\r\n      <Divider />\r\n      <PageSection\r\n        id='jmx-content-main'\r\n        variant={pathname.includes('chart') ? PageSectionVariants.default : PageSectionVariants.light}\r\n        padding={{ default: pathname.includes('chart') ? 'padding' : 'noPadding' }}\r\n        hasOverflowScroll\r\n        aria-label='jmx-content-main'\r\n      >\r\n        <Routes>\r\n          {mbeanRoutes}\r\n          <Route key='root' path='/' element={<Navigate to={navItems[0]?.id ?? ''} />} />\r\n        </Routes>\r\n      </PageSection>\r\n    </PageGroup>\r\n  )\r\n}\r\n","import { MBeanNode, MBeanTree, PluginTreeViewToolbar } from '@hawtiosrc/plugins/shared'\r\nimport { TreeView, TreeViewDataItem } from '@patternfly/react-core'\r\nimport React, { ChangeEvent, useContext, useEffect, useState } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport './JmxTreeView.css'\r\nimport { MBeanTreeContext } from './context'\r\nimport { pluginPath } from './globals'\r\n\r\n/**\r\n * Expansion requires more than 2 states since the expandAll\r\n * must be removed completely to defer to the expanded state\r\n * of each data node\r\n */\r\nenum ExpansionValue {\r\n  /**\r\n   * should revert to the expanded state of the data\r\n   */\r\n  Default,\r\n  /**\r\n   * all data should be expanded\r\n   */\r\n  ExpandAll,\r\n  /**\r\n   * all data should be collapsed\r\n   */\r\n  CollapseAll,\r\n}\r\n\r\nexport const JmxTreeView: React.FunctionComponent = () => {\r\n  const { tree, selectedNode, setSelectedNode } = useContext(MBeanTreeContext)\r\n  const [expanded, setExpanded] = useState(ExpansionValue.Default)\r\n  const [filteredTree, setFilteredTree] = useState(tree.getTree())\r\n  const navigate = useNavigate()\r\n\r\n  /**\r\n   * Listen for changes to the tree that may occur as a result\r\n   * of events being monitored by the Tree:Watcher in workspace\r\n   * eg. new endpoint being created\r\n   */\r\n  useEffect(() => {\r\n    setFilteredTree(tree.getTree())\r\n  }, [tree])\r\n\r\n  const onSearch = (event: ChangeEvent<HTMLInputElement>) => {\r\n    // Ensure no node from the 'old' filtered is lingering\r\n    setSelectedNode(null)\r\n    setExpanded(ExpansionValue.Default)\r\n    const input = event.target.value\r\n\r\n    if (!input) setFilteredTree(tree.getTree())\r\n\r\n    const treeElements = MBeanTree.filter(tree.getTree(), node => node.name.toLowerCase().includes(input.toLowerCase()))\r\n\r\n    if (treeElements.length === 0) setFilteredTree(tree.getTree())\r\n    else {\r\n      setFilteredTree(treeElements)\r\n      setExpanded(ExpansionValue.ExpandAll)\r\n    }\r\n  }\r\n\r\n  const onSelect = (event: React.MouseEvent<Element, MouseEvent>, item: TreeViewDataItem) => {\r\n    setSelectedNode(item as MBeanNode)\r\n    /* On change of node selection update the url to the base plugin path */\r\n    navigate(pluginPath)\r\n  }\r\n\r\n  const setAllExpanded = (value: boolean) => {\r\n    setExpanded(value ? ExpansionValue.ExpandAll : ExpansionValue.CollapseAll)\r\n  }\r\n\r\n  const expandedProp = (): object => {\r\n    switch (expanded) {\r\n      case ExpansionValue.ExpandAll:\r\n        return { allExpanded: true }\r\n      case ExpansionValue.CollapseAll:\r\n        return { allExpanded: false }\r\n      default:\r\n        return {}\r\n    }\r\n  }\r\n\r\n  return (\r\n    <TreeView\r\n      id='jmx-tree-view'\r\n      data={filteredTree}\r\n      hasGuides={true}\r\n      hasSelectableNodes={true}\r\n      activeItems={selectedNode ? [selectedNode] : []}\r\n      {...expandedProp()}\r\n      onSelect={onSelect}\r\n      toolbar={<PluginTreeViewToolbar onSearch={onSearch} onSetExpanded={setAllExpanded} />}\r\n    />\r\n  )\r\n}\r\n","import { hawtio, HawtioPlugin } from '@hawtiosrc/core'\r\nimport { helpRegistry } from '@hawtiosrc/help/registry'\r\nimport { workspace } from '@hawtiosrc/plugins/shared'\r\nimport { pluginPath } from './globals'\r\nimport help from './help.md'\r\nimport { Jmx } from './Jmx'\r\n\r\nconst order = 13\r\n\r\nexport const jmx: HawtioPlugin = () => {\r\n  hawtio.addPlugin({\r\n    id: 'jmx',\r\n    title: 'JMX',\r\n    path: pluginPath,\r\n    order,\r\n    component: Jmx,\r\n    isActive: async () => workspace.hasMBeans(),\r\n  })\r\n  helpRegistry.add('jmx', 'JMX', help, order)\r\n}\r\n","import { Logger } from '@hawtiosrc/core/logging'\r\n\r\nexport const pluginId = 'logs'\r\nexport const pluginName = 'hawtio-logs'\r\nexport const pluginPath = '/logs'\r\nexport const log = Logger.get(pluginName)\r\n","## Logs\r\n\r\nWhen we run middleware we spend an awful lot of time looking at and searching logs. With Hawtio we show nicely coloured logs that auto scroll, can be filtered and sorted ascending or descending. Go to the Preferences page to customize the behavior the way you want.\r\n\r\n### How to enable Hawtio logs\r\n\r\nHawtio uses an MBean usually called LogQuery which implements the [LogQuerySupportMBean](https://github.com/hawtio/hawtio/blob/master/hawtio-log/src/main/java/io/hawt/log/support/LogQuerySupportMBean.java) interface from either the [hawtio-log-osgi](https://github.com/hawtio/hawtio/tree/master/hawtio-log-osgi) or [hawtio-log](https://github.com/hawtio/hawtio/tree/master/hawtio-log) bundles depending on if you are working inside or outside of OSGi respectively.\r\n\r\nIf you are using Apache Karaf, just add the hawtio-log-osgi bundle. If you are not using OSGi, then you just need to ensure you have hawtio-log in your WAR when you deploy Hawtio.\r\n\r\nYou also need to ensure that the LogQuery bean is instantiated in whatever dependency injection framework you choose.\r\n\r\nFor example, this is how we initialise LogQuery using OSGi blueprint:\r\n\r\n```html\r\n<bean\r\n  id=\"logFacade\"\r\n  class=\"io.hawt.log.log4j.Log4jLogQuery\"\r\n  init-method=\"start\"\r\n  destroy-method=\"stop\"\r\n  scope=\"singleton\"\r\n>\r\n  <property name=\"size\" value=\"${hawtio.log.buffer.size}\" />\r\n</bean>\r\n```\r\n\r\nAnd this is how we initialise LogQuery using Spring XML:\r\n\r\n```html\r\n<bean\r\n  id=\"logQuery\"\r\n  class=\"io.fabric8.insight.log.log4j.Log4jLogQuery\"\r\n  lazy-init=\"false\"\r\n  scope=\"singleton\"\r\n  init-method=\"start\"\r\n  destroy-method=\"stop\"\r\n/>\r\n```\r\n","import {\r\n  Bullseye,\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  CardTitle,\r\n  CodeBlock,\r\n  CodeBlockCode,\r\n  DescriptionList,\r\n  DescriptionListDescription,\r\n  DescriptionListGroup,\r\n  DescriptionListTerm,\r\n  Divider,\r\n  EmptyState,\r\n  EmptyStateBody,\r\n  EmptyStateIcon,\r\n  Label,\r\n  Modal,\r\n  PageSection,\r\n  Pagination,\r\n  PaginationProps,\r\n  Panel,\r\n  SearchInput,\r\n  Select,\r\n  SelectOption,\r\n  SelectOptionObject,\r\n  Skeleton,\r\n  Title,\r\n  Toolbar,\r\n  ToolbarContent,\r\n  ToolbarFilter,\r\n  ToolbarGroup,\r\n  ToolbarItem,\r\n} from '@patternfly/react-core'\r\nimport { SearchIcon } from '@patternfly/react-icons'\r\nimport { TableComposable, Tbody, Td, Th, Thead, Tr } from '@patternfly/react-table'\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport { log } from './globals'\r\nimport { LogEntry, LogFilter } from './log-entry'\r\nimport { LOGS_UPDATE_INTERVAL, logsService } from './logs-service'\r\n\r\nexport const Logs: React.FunctionComponent = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <PageSection id='logs-header' hasShadowBottom variant='light'>\r\n        <Title headingLevel='h1'>Logs</Title>\r\n      </PageSection>\r\n      <Divider />\r\n      <PageSection id='logs-table' variant='light' isFilled>\r\n        <LogsTable />\r\n      </PageSection>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nconst LogsTable: React.FunctionComponent = () => {\r\n  const [logs, setLogs] = useState<LogEntry[]>([])\r\n  const timestamp = useRef(0)\r\n  const [loaded, setLoaded] = useState(false)\r\n\r\n  // Filters\r\n  const emptyFilters: LogFilter = { level: [], logger: '', message: '', properties: '' }\r\n  const [filters, setFilters] = useState(emptyFilters)\r\n  // Temporal filter values holder until applying it\r\n  const tempFilters = useRef<{ logger: string; message: string; properties: string }>(emptyFilters)\r\n  const [filteredLogs, setFilteredLogs] = useState<LogEntry[]>([])\r\n  const [isSelectLevelOpen, setIsSelectLevelOpen] = useState(false)\r\n\r\n  // Pagination\r\n  const [page, setPage] = useState(1)\r\n  const [perPage, setPerPage] = useState(10)\r\n  const [paginatedLogs, setPaginatedLogs] = useState(filteredLogs.slice(0, perPage))\r\n\r\n  // Modal\r\n  const [isModalOpen, setIsModalOpen] = useState(false)\r\n  const [selected, setSelected] = useState<LogEntry | null>(null)\r\n\r\n  useEffect(() => {\r\n    const loadLogs = async () => {\r\n      const result = await logsService.loadLogs()\r\n      setLogs(result.logs)\r\n      timestamp.current = result.timestamp\r\n      setLoaded(true)\r\n      log.debug('Load logs:', timestamp.current)\r\n    }\r\n    loadLogs()\r\n\r\n    // Jolokia scheduler cannot be used since we need to update timestamp for the\r\n    // argument to each MBean invocation.\r\n    let timeoutHandle: NodeJS.Timeout\r\n    const updateLogs = async () => {\r\n      log.debug('Update logs:', timestamp.current)\r\n      // Skip initial update\r\n      if (timeoutHandle && timestamp.current > 0) {\r\n        const result = await logsService.loadLogsAfter(timestamp.current)\r\n        if (result.logs.length > 0) {\r\n          setLogs(prev => logsService.append(prev, result.logs))\r\n        }\r\n        timestamp.current = result.timestamp\r\n      }\r\n\r\n      timeoutHandle = setTimeout(() => updateLogs(), LOGS_UPDATE_INTERVAL)\r\n    }\r\n    updateLogs()\r\n\r\n    return () => timeoutHandle && clearTimeout(timeoutHandle)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const filteredLogs = logsService.filter(logs, filters)\r\n    setFilteredLogs(filteredLogs)\r\n  }, [logs, filters])\r\n\r\n  useEffect(() => {\r\n    setPaginatedLogs(filteredLogs.slice(0, perPage))\r\n    setPage(1)\r\n  }, [filteredLogs, perPage])\r\n\r\n  if (!loaded) {\r\n    return <Skeleton data-testid='loading-logs' screenreaderText='Loading...' />\r\n  }\r\n\r\n  const handleFiltersChange = (target: string, value: string | string[], apply = false) => {\r\n    if (apply || target === 'level') {\r\n      setFilters(prev => ({ ...prev, [target]: value }))\r\n    } else {\r\n      tempFilters.current = { ...tempFilters.current, [target]: value }\r\n    }\r\n  }\r\n\r\n  const onLevelSelect = (event: React.MouseEvent | React.ChangeEvent, value: string | SelectOptionObject) => {\r\n    const checked = (event.target as HTMLInputElement).checked\r\n    setFilters(prev => {\r\n      const prevLevels = prev.level\r\n      const newLevels = checked ? [...prevLevels, value as string] : prevLevels.filter(l => l !== value)\r\n      return { ...prev, level: newLevels }\r\n    })\r\n  }\r\n\r\n  const applyFilters = () => {\r\n    setFilters(prev => ({ ...prev, ...tempFilters.current }))\r\n  }\r\n\r\n  const clearAllFilters = () => {\r\n    setFilters(emptyFilters)\r\n    tempFilters.current = emptyFilters\r\n  }\r\n\r\n  const handleSetPage = (\r\n    _event: React.MouseEvent | React.KeyboardEvent | MouseEvent,\r\n    newPage: number,\r\n    _perPage?: number,\r\n    startIdx?: number,\r\n    endIdx?: number,\r\n  ) => {\r\n    setPaginatedLogs(filteredLogs.slice(startIdx, endIdx))\r\n    setPage(newPage)\r\n  }\r\n\r\n  const handlePerPageSelect = (\r\n    _event: React.MouseEvent | React.KeyboardEvent | MouseEvent,\r\n    newPerPage: number,\r\n    newPage: number,\r\n    startIdx?: number,\r\n    endIdx?: number,\r\n  ) => {\r\n    setPaginatedLogs(filteredLogs.slice(startIdx, endIdx))\r\n    setPage(newPage)\r\n    setPerPage(newPerPage)\r\n  }\r\n\r\n  const renderPagination = (variant: PaginationProps['variant'], isCompact: boolean) => (\r\n    <Pagination\r\n      isCompact={isCompact}\r\n      itemCount={filteredLogs.length}\r\n      page={page}\r\n      perPage={perPage}\r\n      onSetPage={handleSetPage}\r\n      onPerPageSelect={handlePerPageSelect}\r\n      variant={variant}\r\n      titles={{ paginationTitle: `${variant} pagination` }}\r\n    />\r\n  )\r\n\r\n  const logLevels = ['TRACE', 'DEBUG', 'INFO', 'WARN', 'ERROR']\r\n\r\n  const tableToolbar = (\r\n    <Toolbar id='logs-table-toolbar' clearAllFilters={clearAllFilters} usePageInsets>\r\n      <ToolbarContent>\r\n        <ToolbarGroup id='logs-table-toolbar-filters'>\r\n          <ToolbarFilter\r\n            id='logs-table-toolbar-level'\r\n            chips={filters.level}\r\n            deleteChip={(_, chip) =>\r\n              handleFiltersChange(\r\n                'level',\r\n                filters.level.filter(l => l !== chip),\r\n              )\r\n            }\r\n            deleteChipGroup={() => handleFiltersChange('level', [])}\r\n            categoryName='Level'\r\n          >\r\n            <Select\r\n              id='logs-table-toolbar-level-select'\r\n              variant='checkbox'\r\n              aria-label='Filter Level'\r\n              placeholderText='Level'\r\n              selections={filters.level}\r\n              isOpen={isSelectLevelOpen}\r\n              onToggle={() => setIsSelectLevelOpen(!isSelectLevelOpen)}\r\n              onSelect={onLevelSelect}\r\n            >\r\n              {logLevels.map((level, index) => (\r\n                <SelectOption key={index} value={level} />\r\n              ))}\r\n            </Select>\r\n          </ToolbarFilter>\r\n          <ToolbarItem id='logs-table-toolbar-logger'>\r\n            <SearchInput\r\n              id='logs-table-toolbar-logger-input'\r\n              aria-label='Filter Logger'\r\n              placeholder='Filter by logger'\r\n              value={filters.logger}\r\n              onChange={(_, value) => handleFiltersChange('logger', value)}\r\n              onSearch={() => applyFilters()}\r\n              onClear={() => handleFiltersChange('logger', '', true)}\r\n            />\r\n          </ToolbarItem>\r\n          <ToolbarItem id='logs-table-toolbar-message'>\r\n            <SearchInput\r\n              id='logs-table-toolbar-message-input'\r\n              aria-label='Filter Message'\r\n              placeholder='Filter by message'\r\n              value={filters.message}\r\n              onChange={(_, value) => handleFiltersChange('message', value)}\r\n              onSearch={() => applyFilters()}\r\n              onClear={() => handleFiltersChange('message', '', true)}\r\n            />\r\n          </ToolbarItem>\r\n          <ToolbarItem id='logs-table-toolbar-properties'>\r\n            <SearchInput\r\n              id='logs-table-toolbar-properties-input'\r\n              aria-label='Filter Properties'\r\n              placeholder='Filter by properties'\r\n              value={filters.properties}\r\n              onChange={(_, value) => handleFiltersChange('properties', value)}\r\n              onSearch={() => applyFilters()}\r\n              onClear={() => handleFiltersChange('properties', '', true)}\r\n            />\r\n          </ToolbarItem>\r\n        </ToolbarGroup>\r\n        <ToolbarItem variant='pagination'>{renderPagination('top', true)}</ToolbarItem>\r\n      </ToolbarContent>\r\n    </Toolbar>\r\n  )\r\n\r\n  const selectLog = (log: LogEntry) => {\r\n    setSelected(log)\r\n    handleModalToggle()\r\n  }\r\n\r\n  const handleModalToggle = () => {\r\n    setIsModalOpen(!isModalOpen)\r\n  }\r\n\r\n  const highlightSearch = (text: string, search: string) => {\r\n    if (search === '') {\r\n      return text\r\n    }\r\n    const lowerCaseSearch = search.toLowerCase()\r\n    const res = text\r\n      .split(new RegExp(`(${search})`, 'gi'))\r\n      .map((s, i) => (s.toLowerCase() === lowerCaseSearch ? <mark key={i}>{s}</mark> : s))\r\n    return res\r\n  }\r\n\r\n  return (\r\n    <Panel>\r\n      {tableToolbar}\r\n      <TableComposable variant='compact' aria-label='Logs Table' isStriped isStickyHeader>\r\n        <Thead>\r\n          <Tr>\r\n            <Th>Timestamp</Th>\r\n            <Th>Level</Th>\r\n            <Th>Logger</Th>\r\n            <Th>Message</Th>\r\n          </Tr>\r\n        </Thead>\r\n        <Tbody>\r\n          {paginatedLogs.map((log, index) => (\r\n            <Tr key={index} onRowClick={() => selectLog(log)}>\r\n              <Td dataLabel='timestamp'>{log.getTimestamp()}</Td>\r\n              <Td dataLabel='level'>\r\n                <LogLevel level={log.event.level} />\r\n              </Td>\r\n              <Td dataLabel='logger'>{highlightSearch(log.event.logger, filters.logger)}</Td>\r\n              <Td dataLabel='message'>{highlightSearch(log.event.message, filters.message)}</Td>\r\n            </Tr>\r\n          ))}\r\n          {filteredLogs.length === 0 && (\r\n            <Tr>\r\n              <Td colSpan={4}>\r\n                <Bullseye>\r\n                  <EmptyState variant='small'>\r\n                    <EmptyStateIcon icon={SearchIcon} />\r\n                    <Title headingLevel='h2' size='lg'>\r\n                      No results found\r\n                    </Title>\r\n                    <EmptyStateBody>Clear all filters and try again.</EmptyStateBody>\r\n                    <Button variant='link' onClick={clearAllFilters}>\r\n                      Clear all filters\r\n                    </Button>\r\n                  </EmptyState>\r\n                </Bullseye>\r\n              </Td>\r\n            </Tr>\r\n          )}\r\n        </Tbody>\r\n      </TableComposable>\r\n      {renderPagination('bottom', false)}\r\n      <LogModal isOpen={isModalOpen} onClose={handleModalToggle} log={selected} />\r\n    </Panel>\r\n  )\r\n}\r\n\r\nconst LogModal: React.FunctionComponent<{\r\n  isOpen: boolean\r\n  onClose: () => void\r\n  log: LogEntry | null\r\n}> = ({ isOpen, onClose, log }) => {\r\n  if (!log) {\r\n    return null\r\n  }\r\n\r\n  const { event } = log\r\n\r\n  const logDetails = (\r\n    <Card isCompact isPlain>\r\n      <CardBody>\r\n        <DescriptionList isCompact isHorizontal>\r\n          <DescriptionListGroup>\r\n            <DescriptionListTerm>Timestamp</DescriptionListTerm>\r\n            <DescriptionListDescription>{log.getTimestamp()}</DescriptionListDescription>\r\n          </DescriptionListGroup>\r\n          <DescriptionListGroup>\r\n            <DescriptionListTerm>Level</DescriptionListTerm>\r\n            <DescriptionListDescription>\r\n              <LogLevel level={event.level} />\r\n            </DescriptionListDescription>\r\n          </DescriptionListGroup>\r\n          <DescriptionListGroup>\r\n            <DescriptionListTerm>Logger</DescriptionListTerm>\r\n            <DescriptionListDescription>{event.logger}</DescriptionListDescription>\r\n          </DescriptionListGroup>\r\n          {log.hasLogSourceLineHref && (\r\n            <React.Fragment>\r\n              <DescriptionListGroup>\r\n                <DescriptionListTerm>Class</DescriptionListTerm>\r\n                <DescriptionListDescription>{event.className}</DescriptionListDescription>\r\n              </DescriptionListGroup>\r\n              <DescriptionListGroup>\r\n                <DescriptionListTerm>Method</DescriptionListTerm>\r\n                <DescriptionListDescription>{event.methodName}</DescriptionListDescription>\r\n              </DescriptionListGroup>\r\n              <DescriptionListGroup>\r\n                <DescriptionListTerm>File</DescriptionListTerm>\r\n                <DescriptionListDescription>\r\n                  {event.fileName}:{event.lineNumber}\r\n                </DescriptionListDescription>\r\n              </DescriptionListGroup>\r\n            </React.Fragment>\r\n          )}\r\n          {event.host && (\r\n            <DescriptionListGroup>\r\n              <DescriptionListTerm>Host</DescriptionListTerm>\r\n              <DescriptionListDescription>{event.host}</DescriptionListDescription>\r\n            </DescriptionListGroup>\r\n          )}\r\n          <DescriptionListGroup>\r\n            <DescriptionListTerm>Thread</DescriptionListTerm>\r\n            <DescriptionListDescription>{event.thread}</DescriptionListDescription>\r\n          </DescriptionListGroup>\r\n          <DescriptionListGroup>\r\n            <DescriptionListTerm>Message</DescriptionListTerm>\r\n            <DescriptionListDescription>\r\n              <CodeBlock>\r\n                <CodeBlockCode>{event.message}</CodeBlockCode>\r\n              </CodeBlock>\r\n            </DescriptionListDescription>\r\n          </DescriptionListGroup>\r\n          {event.exception && (\r\n            <DescriptionListGroup>\r\n              <DescriptionListTerm>Stack Trace</DescriptionListTerm>\r\n              <DescriptionListDescription>{event.exception}</DescriptionListDescription>\r\n            </DescriptionListGroup>\r\n          )}\r\n        </DescriptionList>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n\r\n  const osgiProperties = log.hasOSGiProperties && (\r\n    <Card isCompact isPlain>\r\n      <CardTitle>OSGi Properties</CardTitle>\r\n      <CardBody>\r\n        <DescriptionList isCompact isHorizontal>\r\n          {[\r\n            { key: 'bundle.name', name: 'Bundle Name' },\r\n            { key: 'bundle.id', name: 'Bundle ID' },\r\n            { key: 'bundle.version', name: 'Bundle Version' },\r\n          ]\r\n            .filter(({ key }) => event.properties[key] !== undefined)\r\n            .map(({ key, name }) => (\r\n              <DescriptionListGroup key={key}>\r\n                <DescriptionListTerm>${name}</DescriptionListTerm>\r\n                <DescriptionListDescription>{event.properties[key]}</DescriptionListDescription>\r\n              </DescriptionListGroup>\r\n            ))}\r\n        </DescriptionList>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n\r\n  const mdcProperties = log.hasMDCProperties && (\r\n    <Card isCompact isPlain>\r\n      <CardTitle>MDC Properties</CardTitle>\r\n      <CardBody>\r\n        <DescriptionList isCompact isHorizontal>\r\n          {Object.entries(log.mdcProperties).map(([key, value]) => (\r\n            <DescriptionListGroup key={key}>\r\n              <DescriptionListTerm>{key}</DescriptionListTerm>\r\n              <DescriptionListDescription>{value}</DescriptionListDescription>\r\n            </DescriptionListGroup>\r\n          ))}\r\n        </DescriptionList>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n\r\n  return (\r\n    <Modal\r\n      id='logs-log-modal'\r\n      variant='large'\r\n      title='Log'\r\n      isOpen={isOpen}\r\n      onClose={onClose}\r\n      actions={[\r\n        <Button key='close' onClick={onClose}>\r\n          Close\r\n        </Button>,\r\n      ]}\r\n    >\r\n      {logDetails}\r\n      {osgiProperties}\r\n      {mdcProperties}\r\n    </Modal>\r\n  )\r\n}\r\n\r\nconst LogLevel: React.FunctionComponent<{ level: string }> = ({ level }) => {\r\n  switch (level) {\r\n    case 'TRACE':\r\n    case 'DEBUG':\r\n      return <Label color='grey'>{level}</Label>\r\n    case 'INFO':\r\n      return <Label color='blue'>{level}</Label>\r\n    case 'WARN':\r\n      return <Label color='orange'>{level}</Label>\r\n    case 'ERROR':\r\n      return <Label color='red'>{level}</Label>\r\n    default:\r\n      return <React.Fragment>{level}</React.Fragment>\r\n  }\r\n}\r\n","import { formatTimestamp } from '@hawtiosrc/util/dates'\r\nimport { isEmpty } from '@hawtiosrc/util/objects'\r\n\r\nexport type LogEvent = {\r\n  seq: number\r\n  timestamp: string\r\n\r\n  level: string\r\n  logger: string\r\n  message: string\r\n\r\n  properties: Record<string, string>\r\n\r\n  className: string | null\r\n  containerName: string | null\r\n  exception: string | null\r\n  fileName: string | null\r\n  host: string | null\r\n  lineNumber: number | null\r\n  methodName: string | null\r\n  thread: string | null\r\n}\r\n\r\nexport type LogFilter = {\r\n  level: string[]\r\n  logger: string\r\n  message: string\r\n  properties: string\r\n}\r\n\r\nexport class LogEntry {\r\n  hasOSGiProperties: boolean\r\n  hasMDCProperties: boolean\r\n  hasLogSourceLineHref: boolean\r\n  mdcProperties: Record<string, string>\r\n\r\n  constructor(readonly event: LogEvent) {\r\n    this.hasOSGiProperties = LogEntry.hasOSGiProperties(event.properties)\r\n    this.hasLogSourceLineHref = event.lineNumber !== null\r\n    this.mdcProperties = LogEntry.mdcProperties(event.properties)\r\n    this.hasMDCProperties = !isEmpty(this.mdcProperties)\r\n  }\r\n\r\n  private static hasOSGiProperties(properties: Record<string, string>): boolean {\r\n    return Object.keys(properties).some(key => key.indexOf('bundle') === 0)\r\n  }\r\n\r\n  private static mdcProperties(properties: Record<string, string>): Record<string, string> {\r\n    return Object.entries(properties)\r\n      .filter(([key, _]) => !key.startsWith('bundle.') && key !== 'maven.coordinates')\r\n      .reduce(\r\n        (mdc, [key, value]) => {\r\n          mdc[key] = value\r\n          return mdc\r\n        },\r\n        {} as Record<string, string>,\r\n      )\r\n  }\r\n\r\n  getTimestamp(): string {\r\n    const { seq, timestamp } = this.event\r\n    // If there is a seq in the log event, then it's the timestamp with milliseconds.\r\n    const date = seq ? new Date(seq) : new Date(timestamp)\r\n    return formatTimestamp(date, !isNaN(seq))\r\n  }\r\n\r\n  match(filter: LogFilter): boolean {\r\n    const { level, logger, message, properties } = filter\r\n    if (level.length > 0 && !level.some(l => this.event.level === l)) {\r\n      return false\r\n    }\r\n    if (logger !== '' && !this.matchLogger(logger)) {\r\n      return false\r\n    }\r\n    if (message !== '' && !this.matchMessage(message)) {\r\n      return false\r\n    }\r\n    if (properties !== '' && !this.matchProperties(properties)) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n\r\n  matchLogger(keyword: string): boolean {\r\n    const { logger } = this.event\r\n    return logger.toLowerCase().includes(keyword.toLowerCase())\r\n  }\r\n\r\n  matchMessage(keyword: string): boolean {\r\n    const { message } = this.event\r\n    return message.toLowerCase().includes(keyword.toLowerCase())\r\n  }\r\n\r\n  matchProperties(keyword: string): boolean {\r\n    const { properties } = this.event\r\n    const lowerCaseKeyword = keyword.toLowerCase()\r\n    return Object.values(properties).some(value => value.toLowerCase().includes(lowerCaseKeyword))\r\n  }\r\n}\r\n","import { MBeanNode, jolokiaService, workspace } from '@hawtiosrc/plugins/shared'\r\nimport { log } from './globals'\r\nimport { LogEntry, LogEvent, LogFilter } from './log-entry'\r\n\r\nexport const STORAGE_KEY_PREFERENCES = 'logs.preferences'\r\n\r\n/**\r\n * Logs update interval in milliseconds.\r\n */\r\nexport const LOGS_UPDATE_INTERVAL = 5000\r\n\r\nexport type LogsOptions = {\r\n  sortAscending: boolean\r\n  autoScroll: boolean\r\n  cacheSize: number\r\n  batchSize: number\r\n}\r\n\r\nexport const DEFAULT_OPTIONS: LogsOptions = {\r\n  sortAscending: true,\r\n  autoScroll: true,\r\n  cacheSize: 500,\r\n  batchSize: 20,\r\n} as const\r\n\r\ntype LogQueryResponse = {\r\n  events: LogEvent[]\r\n  fromTimestamp: number\r\n  toTimestamp: number\r\n  host: string | null\r\n}\r\n\r\nexport type LogQueryResult = {\r\n  logs: LogEntry[]\r\n  timestamp: number\r\n}\r\n\r\nexport const LOG_QUERY_OPERATIONS = {\r\n  getLogResults: 'getLogResults(int)',\r\n  jsonQueryLogResults: 'jsonQueryLogResults(java.lang.String)',\r\n} as const\r\n\r\nexport interface ILogsService {\r\n  isActive(): Promise<boolean>\r\n  loadLogs(): Promise<LogQueryResult>\r\n  loadLogsAfter(afterTimestamp: number): Promise<LogQueryResult>\r\n  append(logs: LogEntry[], newLogs: LogEntry[]): LogEntry[]\r\n  filter(logs: LogEntry[], filter: LogFilter): LogEntry[]\r\n\r\n  loadOptions(): LogsOptions\r\n  saveOptions(value: Partial<LogsOptions>): void\r\n}\r\n\r\nclass LogsService implements ILogsService {\r\n  private async getLogQueryMBean(): Promise<MBeanNode | null> {\r\n    const mbeans = await workspace.findMBeans('hawtio', { type: 'LogQuery' })\r\n    if (mbeans.length > 1) {\r\n      log.warn('Multiple LogQuery MBeans found. Selecting the first MBean:', mbeans)\r\n    }\r\n    return mbeans[0] ?? null\r\n  }\r\n\r\n  async isActive(): Promise<boolean> {\r\n    const logQueryMBean = await this.getLogQueryMBean()\r\n    return logQueryMBean?.hasInvokeRights(LOG_QUERY_OPERATIONS.getLogResults) || false\r\n  }\r\n\r\n  loadLogs(): Promise<LogQueryResult> {\r\n    const { cacheSize } = this.loadOptions()\r\n    return this.invokeLogQueryMBean(LOG_QUERY_OPERATIONS.getLogResults, cacheSize)\r\n  }\r\n\r\n  loadLogsAfter(afterTimestamp: number): Promise<LogQueryResult> {\r\n    const { batchSize } = this.loadOptions()\r\n    return this.invokeLogQueryMBean(LOG_QUERY_OPERATIONS.jsonQueryLogResults, { afterTimestamp, count: batchSize })\r\n  }\r\n\r\n  private async invokeLogQueryMBean(operation: string, arg: unknown): Promise<LogQueryResult> {\r\n    const logQueryMBean = await this.getLogQueryMBean()\r\n    if (!logQueryMBean || !logQueryMBean.objectName) {\r\n      return { logs: [], timestamp: 0 }\r\n    }\r\n\r\n    const response = (await jolokiaService.execute(logQueryMBean.objectName, operation, [arg])) as LogQueryResponse\r\n    log.debug('Response from', operation, ':', response)\r\n    return {\r\n      logs: response.events.map(event => new LogEntry(event)),\r\n      timestamp: response.toTimestamp,\r\n    }\r\n  }\r\n\r\n  append(logs: LogEntry[], newLogs: LogEntry[]): LogEntry[] {\r\n    const appended = [...logs, ...newLogs]\r\n\r\n    const { cacheSize } = this.loadOptions()\r\n    if (appended.length > cacheSize) {\r\n      appended.splice(0, logs.length - cacheSize)\r\n    }\r\n\r\n    return appended\r\n  }\r\n\r\n  filter(logs: LogEntry[], filter: LogFilter): LogEntry[] {\r\n    let filteredLogs = logs.filter(log => log.match(filter))\r\n\r\n    const { sortAscending } = this.loadOptions()\r\n    if (!sortAscending) {\r\n      filteredLogs = filteredLogs.reverse()\r\n    }\r\n\r\n    return filteredLogs\r\n  }\r\n\r\n  loadOptions(): LogsOptions {\r\n    const item = localStorage.getItem(STORAGE_KEY_PREFERENCES)\r\n    const savedOptions = item ? JSON.parse(item) : {}\r\n    return { ...DEFAULT_OPTIONS, ...savedOptions }\r\n  }\r\n\r\n  saveOptions(options: Partial<LogsOptions>) {\r\n    const updated = { ...this.loadOptions(), ...options }\r\n    localStorage.setItem(STORAGE_KEY_PREFERENCES, JSON.stringify(updated))\r\n  }\r\n}\r\n\r\nexport const logsService = new LogsService()\r\n","import { TooltipHelpIcon } from '@hawtiosrc/ui/icons'\r\nimport { CardBody, Checkbox, Form, FormGroup, FormGroupProps, FormSection, TextInput } from '@patternfly/react-core'\r\nimport React, { useState } from 'react'\r\nimport { LogsOptions, logsService } from './logs-service'\r\n\r\nexport const LogsPreferences: React.FunctionComponent = () => {\r\n  const [options, setOptions] = useState(logsService.loadOptions())\r\n  const [logCacheSizeValidated, setLogCacheSizeValidated] = useState<FormGroupProps['validated']>('default')\r\n  const [logCacheSizeInvalidText, setLogCacheSizeInvalidText] = useState('')\r\n  const [logBatchSizeValidated, setLogBatchSizeValidated] = useState<FormGroupProps['validated']>('default')\r\n  const [logBatchSizeInvalidText, setLogBatchSizeInvalidText] = useState('')\r\n\r\n  const updateOptions = (updated: Partial<LogsOptions>) => {\r\n    logsService.saveOptions(updated)\r\n    setOptions({ ...options, ...updated })\r\n  }\r\n\r\n  const onSortAscendingChanged = (sortAscending: boolean) => {\r\n    updateOptions({ sortAscending })\r\n  }\r\n\r\n  const onAutoScrollChanged = (autoScroll: boolean) => {\r\n    updateOptions({ autoScroll })\r\n  }\r\n\r\n  const onLogCacheSizeChanged = (cacheSize: string) => {\r\n    const intValue = parseInt(cacheSize)\r\n    if (!intValue) {\r\n      setLogCacheSizeValidated('error')\r\n      setLogCacheSizeInvalidText('Must be a number')\r\n      return\r\n    }\r\n    if (intValue <= 0) {\r\n      setLogCacheSizeValidated('error')\r\n      setLogCacheSizeInvalidText('Must be greater than 0')\r\n      return\r\n    }\r\n\r\n    updateOptions({ cacheSize: intValue })\r\n    setLogCacheSizeValidated('success')\r\n  }\r\n\r\n  const onLogBatchSizeChanged = (batchSize: string) => {\r\n    const intValue = parseInt(batchSize)\r\n    if (!intValue) {\r\n      setLogBatchSizeValidated('error')\r\n      setLogBatchSizeInvalidText('Must be a number')\r\n      return\r\n    }\r\n    if (intValue <= 0) {\r\n      setLogBatchSizeValidated('error')\r\n      setLogBatchSizeInvalidText('Must be greater than 0')\r\n      return\r\n    }\r\n\r\n    updateOptions({ batchSize: intValue })\r\n    setLogCacheSizeValidated('success')\r\n  }\r\n\r\n  return (\r\n    <CardBody>\r\n      <Form isHorizontal>\r\n        <FormSection>\r\n          <FormGroup\r\n            label='Sort ascending'\r\n            fieldId='logs-form-sort-ascending'\r\n            labelIcon={<TooltipHelpIcon tooltip='Sort log entries by timestamp ascending' />}\r\n          >\r\n            <Checkbox\r\n              id='logs-form-sort-ascending-input'\r\n              isChecked={options.sortAscending}\r\n              onChange={onSortAscendingChanged}\r\n            />\r\n          </FormGroup>\r\n          <FormGroup\r\n            label='Auto scroll'\r\n            fieldId='logs-form-auto-scroll'\r\n            labelIcon={<TooltipHelpIcon tooltip='Automatically scroll when new log entries are added' />}\r\n          >\r\n            <Checkbox id='logs-form-auto-scroll-input' isChecked={options.autoScroll} onChange={onAutoScrollChanged} />\r\n          </FormGroup>\r\n          <FormGroup\r\n            label='Log cache size'\r\n            fieldId='logs-form-log-cache-size'\r\n            validated={logCacheSizeValidated}\r\n            helperTextInvalid={logCacheSizeInvalidText}\r\n            labelIcon={<TooltipHelpIcon tooltip='The number of log messages to keep in the browser' />}\r\n          >\r\n            <TextInput\r\n              id='logs-form-log-cache-size-input'\r\n              type='number'\r\n              value={options.cacheSize}\r\n              validated={logCacheSizeValidated}\r\n              onChange={onLogCacheSizeChanged}\r\n            />\r\n          </FormGroup>\r\n          <FormGroup\r\n            label='Log batch size'\r\n            fieldId='logs-form-log-batch-size'\r\n            validated={logBatchSizeValidated}\r\n            helperTextInvalid={logBatchSizeInvalidText}\r\n            labelIcon={\r\n              <TooltipHelpIcon tooltip='The maximum number of log messages to retrieve when loading new log lines' />\r\n            }\r\n          >\r\n            <TextInput\r\n              id='logs-form-log-batch-size-input'\r\n              type='number'\r\n              value={options.batchSize}\r\n              validated={logBatchSizeValidated}\r\n              onChange={onLogBatchSizeChanged}\r\n            />\r\n          </FormGroup>\r\n        </FormSection>\r\n      </Form>\r\n    </CardBody>\r\n  )\r\n}\r\n","import { hawtio, HawtioPlugin } from '@hawtiosrc/core'\r\nimport { helpRegistry } from '@hawtiosrc/help/registry'\r\nimport { preferencesRegistry } from '@hawtiosrc/preferences/registry'\r\nimport { pluginId, pluginPath } from './globals'\r\nimport help from './help.md'\r\nimport { Logs } from './Logs'\r\nimport { logsService } from './logs-service'\r\nimport { LogsPreferences } from './LogsPreferences'\r\n\r\nconst order = 14\r\n\r\nexport const logs: HawtioPlugin = () => {\r\n  hawtio.addPlugin({\r\n    id: pluginId,\r\n    title: 'Logs',\r\n    path: pluginPath,\r\n    order,\r\n    component: Logs,\r\n    isActive: () => logsService.isActive(),\r\n  })\r\n\r\n  helpRegistry.add(pluginId, 'Logs', help, order)\r\n  // To avoid conflicts in name with 'Console Logs'\r\n  preferencesRegistry.add(pluginId, 'Server Logs', LogsPreferences, order)\r\n}\r\n","import { Logger } from '@hawtiosrc/core/logging'\r\n\r\nexport const pluginId = 'quartz'\r\nexport const pluginName = 'hawtio-quartz'\r\nexport const pluginPath = '/quartz'\r\nexport const log = Logger.get(pluginName)\r\n\r\nexport const jmxDomain = 'quartz'\r\n","## Quartz\r\n\r\nThe Quartz plugin offers functionality for viewing and managing [Quartz](http://www.quartz-scheduler.org/) schedulers.\r\n\r\n### Scheduler\r\n\r\nHere you can see the scheduler its state and statistics. You can also pause and resume a scheduler.\r\n\r\n### Jobs\r\n\r\nJobs lists and allows you to see information about job definitions.\r\n\r\n### Triggers\r\n\r\nHere you see the existing triggers in the selected scheduler and their state, including previous and next fire times. Individual triggers can be paused and resumed.\r\nYou can also edit some properties of a scheduler or make it fire instantly regardless of the scheduler.\r\n","import { PageSection, Spinner } from '@patternfly/react-core'\r\nimport React from 'react'\r\nimport Split from 'react-split'\r\nimport './Quartz.css'\r\nimport { QuartzContent } from './QuartzContent'\r\nimport { QuartzTreeView } from './QuartzTreeView'\r\nimport { QuartzContext, useQuartz } from './context'\r\n\r\nexport const Quartz: React.FunctionComponent = () => {\r\n  const { tree, loaded, selectedNode, setSelectedNode } = useQuartz()\r\n\r\n  if (!loaded) {\r\n    return (\r\n      <PageSection>\r\n        <Spinner isSVG aria-label='Loading Quartz schedulers' />\r\n      </PageSection>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <QuartzContext.Provider value={{ tree, selectedNode, setSelectedNode }}>\r\n      <Split className='quartz-split' sizes={[20, 80]} minSize={100} gutterSize={5}>\r\n        <div>\r\n          <QuartzTreeView />\r\n        </div>\r\n        <div>\r\n          <QuartzContent />\r\n        </div>\r\n      </Split>\r\n    </QuartzContext.Provider>\r\n  )\r\n}\r\n","import { Attributes, Operations } from '@hawtiosrc/plugins/shared'\r\nimport {\r\n  Divider,\r\n  EmptyState,\r\n  EmptyStateBody,\r\n  EmptyStateIcon,\r\n  Nav,\r\n  NavItem,\r\n  NavList,\r\n  PageGroup,\r\n  PageSection,\r\n  PageSectionVariants,\r\n  Text,\r\n  Title,\r\n} from '@patternfly/react-core'\r\nimport { CubesIcon } from '@patternfly/react-icons'\r\nimport React, { useContext } from 'react'\r\nimport { NavLink, Navigate, Route, Routes, useLocation } from 'react-router-dom'\r\nimport './QuartzContent.css'\r\nimport { QuartzContext } from './context'\r\nimport { pluginPath } from './globals'\r\nimport { Jobs } from './jobs'\r\nimport { Scheduler } from './scheduler/Scheduler'\r\nimport { Triggers } from './triggers'\r\n\r\nexport const QuartzContent: React.FunctionComponent = () => {\r\n  const { tree, selectedNode } = useContext(QuartzContext)\r\n  const { pathname, search } = useLocation()\r\n\r\n  if (tree.isEmpty()) {\r\n    return (\r\n      <PageSection variant='light'>\r\n        <EmptyState variant='full'>\r\n          <EmptyStateIcon icon={CubesIcon} />\r\n          <Title headingLevel='h1' size='lg'>\r\n            No Quartz schedulers found\r\n          </Title>\r\n        </EmptyState>\r\n      </PageSection>\r\n    )\r\n  }\r\n\r\n  if (!selectedNode) {\r\n    return (\r\n      <PageSection variant='light'>\r\n        <EmptyState variant='full'>\r\n          <EmptyStateIcon icon={CubesIcon} />\r\n          <Title headingLevel='h1' size='lg'>\r\n            No scheduler selected\r\n          </Title>\r\n          <EmptyStateBody>\r\n            The Quartz plugin allows you to see details about running Quartz Schedulers, and their associated triggers\r\n            and jobs.\r\n          </EmptyStateBody>\r\n          <EmptyStateBody>Select a Quartz Scheduler in the tree to continue.</EmptyStateBody>\r\n        </EmptyState>\r\n      </PageSection>\r\n    )\r\n  }\r\n\r\n  const navItems = [\r\n    { id: 'scheduler', title: 'Scheduler', component: Scheduler },\r\n    { id: 'triggers', title: 'Triggers', component: Triggers },\r\n    { id: 'jobs', title: 'Jobs', component: Jobs },\r\n    { id: 'attributes', title: 'Attributes', component: Attributes },\r\n    { id: 'operations', title: 'Operations', component: Operations },\r\n  ]\r\n\r\n  const nav = (\r\n    <Nav aria-label='Quartz Nav' variant='tertiary'>\r\n      <NavList>\r\n        {navItems.map(nav => (\r\n          <NavItem key={nav.id} isActive={pathname === `${pluginPath}/${nav.id}`}>\r\n            <NavLink to={{ pathname: nav.id, search }}>{nav.title}</NavLink>\r\n          </NavItem>\r\n        ))}\r\n      </NavList>\r\n    </Nav>\r\n  )\r\n\r\n  const routes = navItems.map(nav => <Route key={nav.id} path={nav.id} element={React.createElement(nav.component)} />)\r\n\r\n  return (\r\n    <PageGroup id='quartz-content'>\r\n      <PageSection id='quartz-content-header' variant={PageSectionVariants.light}>\r\n        <Title headingLevel='h1'>{selectedNode.name}</Title>\r\n        <Text component='small'>{selectedNode.objectName}</Text>\r\n      </PageSection>\r\n      <Divider />\r\n      <PageSection type='tabs' hasShadowBottom>\r\n        {nav}\r\n      </PageSection>\r\n      <Divider />\r\n\r\n      <PageSection\r\n        variant='light'\r\n        id='quartz-content-main'\r\n        padding={{ default: 'noPadding' }}\r\n        hasOverflowScroll\r\n        aria-label='quartz-content-main'\r\n      >\r\n        <Routes>\r\n          {routes}\r\n          <Route key='root' path='/' element={<Navigate to={navItems[0]?.id ?? ''} />} />\r\n        </Routes>\r\n      </PageSection>\r\n    </PageGroup>\r\n  )\r\n}\r\n","import { EVENT_REFRESH, eventService } from '@hawtiosrc/core'\r\nimport { PluginNodeSelectionContext } from '@hawtiosrc/plugins'\r\nimport { MBeanNode, MBeanTree } from '@hawtiosrc/plugins/shared'\r\nimport { createContext, useContext, useEffect, useRef, useState } from 'react'\r\nimport { log, pluginName } from './globals'\r\nimport { QuartzIcon } from './icons'\r\nimport { quartzService } from './quartz-service'\r\n\r\n/**\r\n * Custom React hook for using Quartz Scheduler MBeans.\r\n */\r\nexport function useQuartz() {\r\n  const [tree, setTree] = useState(MBeanTree.createEmpty(pluginName))\r\n  const { selectedNode, setSelectedNode } = useContext(PluginNodeSelectionContext)\r\n  const [loaded, setLoaded] = useState(false)\r\n\r\n  const selectedNodeRef = useRef(selectedNode)\r\n\r\n  const populateTree = async () => {\r\n    log.debug('Populate Quartz tree')\r\n    const schedulers = (await quartzService.searchSchedulers()).map(node => {\r\n      const scheduler = node.copyTo(node.getProperty('name') ?? node.name)\r\n      scheduler.icon = QuartzIcon\r\n      return scheduler\r\n    })\r\n    log.debug('Found schedulers:', schedulers)\r\n    const newTree = MBeanTree.createFromNodes(pluginName, schedulers)\r\n    setTree(newTree)\r\n\r\n    // If none is selected, select the first scheduler automatically\r\n    if (!selectedNodeRef.current) {\r\n      selectedNodeRef.current = schedulers[0] ?? null\r\n    }\r\n\r\n    // Ensure the new version of the selected node is selected\r\n    let newSelected: MBeanNode | null = null\r\n    newTree.forEach(selectedNodeRef.current?.path() ?? [], node => {\r\n      node.defaultExpanded = true\r\n      newSelected = node\r\n    })\r\n    setSelectedNode(newSelected)\r\n  }\r\n\r\n  useEffect(() => {\r\n    const loadTree = async () => {\r\n      await populateTree()\r\n      setLoaded(true)\r\n    }\r\n\r\n    const listener = () => {\r\n      setLoaded(false)\r\n      loadTree()\r\n    }\r\n    eventService.onRefresh(listener)\r\n\r\n    loadTree()\r\n\r\n    return () => eventService.removeListener(EVENT_REFRESH, listener)\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n\r\n  return { tree, loaded, selectedNode, setSelectedNode }\r\n}\r\n\r\ntype QuartzContext = {\r\n  tree: MBeanTree\r\n  selectedNode: MBeanNode | null\r\n  setSelectedNode: (selected: MBeanNode | null) => void\r\n}\r\n\r\nexport const QuartzContext = createContext<QuartzContext>({\r\n  tree: MBeanTree.createEmpty(pluginName),\r\n  selectedNode: null,\r\n  setSelectedNode: () => {\r\n    // no-op\r\n  },\r\n})\r\n","import quartz from './quartz.png'\r\n\r\nexport const QuartzIcon = <img src={quartz} alt='quartz' />\r\n","import { eventService } from '@hawtiosrc/core'\r\nimport { AttributeValues, MBeanNode, jolokiaService, workspace } from '@hawtiosrc/plugins/shared'\r\nimport { getQueryParameterValue } from '@hawtiosrc/util/urls'\r\nimport { Request } from 'jolokia.js'\r\nimport { attributeService } from '../shared/attributes/attribute-service'\r\nimport { jmxDomain, log } from './globals'\r\n\r\nexport type Trigger = {\r\n  group: string\r\n  name: string\r\n  jobGroup: string\r\n  jobName: string\r\n  misfireInstruction: number\r\n  previousFireTime?: string\r\n  nextFireTime?: string\r\n  finalFireTime?: string\r\n  repeatCount: number\r\n  repeatInterval: number\r\n\r\n  state?: string\r\n  type?: string\r\n  cron?: string\r\n  expression?: string\r\n}\r\n\r\nexport const misfireInstructions = [\r\n  { value: -1, label: 'Ignore' },\r\n  { value: 0, label: 'Smart' },\r\n  { value: 1, label: 'Fire once now' },\r\n  { value: 2, label: 'Do nothing' },\r\n] as const\r\n\r\nexport type TriggerFilter = {\r\n  state: string\r\n  group: string\r\n  name: string\r\n  type: string\r\n}\r\n\r\nexport type JobDetails = Record<string, JobsByGroup>\r\n\r\nexport type JobsByGroup = Record<string, Job>\r\n\r\nexport type Job = {\r\n  group: string\r\n  name: string\r\n  durability: boolean\r\n  shouldRecover: boolean\r\n  jobClass: string\r\n  description?: string\r\n  jobDataMap: Record<string, string>\r\n}\r\n\r\nexport type JobFilter = {\r\n  group: string\r\n  name: string\r\n  durability: 'true' | 'false' | ''\r\n  shouldRecover: 'true' | 'false' | ''\r\n  jobClass: string\r\n  description: string\r\n}\r\n\r\nexport const QUARTZ_OPERATIONS = {\r\n  start: 'start()',\r\n  standby: 'standby()',\r\n  getTriggerState: 'getTriggerState',\r\n  pauseTrigger: 'pauseTrigger',\r\n  resumeTrigger: 'resumeTrigger',\r\n  triggerJob: 'triggerJob',\r\n} as const\r\n\r\nconst QUARTZ_FACADE_MBEAN = 'hawtio:type=QuartzFacade'\r\n\r\nexport const QUARTZ_FACADE_OPERATIONS = {\r\n  updateCronTrigger: 'updateCronTrigger',\r\n  updateSimpleTrigger: 'updateSimpleTrigger',\r\n} as const\r\n\r\nclass QuartzService {\r\n  async isActive(): Promise<boolean> {\r\n    return workspace.treeContainsDomainAndProperties(jmxDomain)\r\n  }\r\n\r\n  async searchSchedulers(): Promise<MBeanNode[]> {\r\n    // MBeans named 'quartz:type=QuartzScheduler,*'\r\n    return workspace.findMBeans(jmxDomain, { type: 'QuartzScheduler' })\r\n  }\r\n\r\n  async start(schedulerName: string, schedulerMBean: string) {\r\n    await jolokiaService.execute(schedulerMBean, QUARTZ_OPERATIONS.start)\r\n    eventService.notify({\r\n      type: 'success',\r\n      message: `Started scheduler: ${schedulerName}`,\r\n    })\r\n  }\r\n\r\n  async pause(schedulerName: string, schedulerMBean: string) {\r\n    await jolokiaService.execute(schedulerMBean, QUARTZ_OPERATIONS.standby)\r\n    eventService.notify({\r\n      type: 'success',\r\n      message: `Paused scheduler: ${schedulerName}`,\r\n    })\r\n  }\r\n\r\n  async updateSampleStatisticsEnabled(schedulerName: string, schedulerMBean: string, value: boolean) {\r\n    await jolokiaService.writeAttribute(schedulerMBean, 'SampledStatisticsEnabled', value)\r\n    eventService.notify({\r\n      type: 'success',\r\n      message: `${value ? 'Enabled' : 'Disabled'} sampled statistics for scheduler: ${schedulerName}`,\r\n    })\r\n  }\r\n\r\n  async loadTriggers(schedulerMBean: string): Promise<Trigger[]> {\r\n    const attrs = await attributeService.read(schedulerMBean)\r\n    const triggers = attrs['AllTriggers'] as Trigger[]\r\n    const jobDetails = attrs['AllJobDetails'] as JobDetails\r\n    await quartzService.loadTriggerStates(schedulerMBean, triggers, jobDetails)\r\n    return triggers\r\n  }\r\n\r\n  async loadJobs(schedulerMBean: string): Promise<Job[]> {\r\n    const attrs = await attributeService.read(schedulerMBean)\r\n    const jobDetails = attrs['AllJobDetails'] as JobDetails\r\n    return Object.values(jobDetails).flatMap(jobsByGroup => Object.values(jobsByGroup))\r\n  }\r\n\r\n  registerTriggersLoad(schedulerMBean: string, callback: (triggers: Trigger[]) => void) {\r\n    attributeService.register({ type: 'read', mbean: schedulerMBean }, async response => {\r\n      const attrs = response.value as AttributeValues\r\n      log.debug('Scheduler - Attributes:', attrs)\r\n      const triggers = attrs['AllTriggers'] as Trigger[]\r\n      const jobDetails = attrs['AllJobDetails'] as JobDetails\r\n      await quartzService.loadTriggerStates(schedulerMBean, triggers, jobDetails)\r\n      log.debug('Scheduler - Triggers:', triggers)\r\n      callback(triggers)\r\n    })\r\n  }\r\n\r\n  registerJobsLoad(schedulerMBean: string, callback: (jobs: Job[]) => void) {\r\n    attributeService.register({ type: 'read', mbean: schedulerMBean }, async response => {\r\n      const attrs = response.value as AttributeValues\r\n      log.debug('Scheduler - Attributes:', attrs)\r\n      const jobDetails = attrs['AllJobDetails'] as JobDetails\r\n      const jobs = Object.values(jobDetails).flatMap(jobsByGroup => Object.values(jobsByGroup))\r\n      log.debug('Scheduler - Jobs:', jobs)\r\n      callback(jobs)\r\n    })\r\n  }\r\n\r\n  unregisterAll() {\r\n    attributeService.unregisterAll()\r\n  }\r\n\r\n  /**\r\n   * Grabs state for a trigger which requires to call a JMX operation.\r\n   */\r\n  private async loadTriggerStates(schedulerMBean: string, triggers: Trigger[], jobDetails: JobDetails) {\r\n    if (triggers.length === 0) {\r\n      return\r\n    }\r\n\r\n    const requests: Request[] = triggers.map(trigger => ({\r\n      type: 'exec',\r\n      mbean: schedulerMBean,\r\n      operation: QUARTZ_OPERATIONS.getTriggerState,\r\n      arguments: [trigger.name, trigger.group],\r\n    }))\r\n    const responses = await jolokiaService.bulkRequest(requests)\r\n    triggers.forEach((trigger, index) => {\r\n      trigger.state = (responses[index]?.value ?? 'unknown') as string\r\n      this.applyJobDetails(trigger, jobDetails)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Grabs information about the trigger from the job map, as quartz does not have\r\n   * the information itself so we had to enrich the job map in camel-quartz to include\r\n   * this information.\r\n   */\r\n  private applyJobDetails(trigger: Trigger, jobDetails: JobDetails) {\r\n    const job = jobDetails[trigger.jobName]?.[trigger.group]\r\n    if (!job) {\r\n      return\r\n    }\r\n\r\n    const jobDataMap = job.jobDataMap || {}\r\n    trigger.type = jobDataMap['CamelQuartzTriggerType']\r\n    switch (trigger.type) {\r\n      case 'cron':\r\n        trigger.expression = jobDataMap['CamelQuartzTriggerCronExpression']\r\n        break\r\n      case 'simple': {\r\n        trigger.expression = `every ${jobDataMap['CamelQuartzTriggerSimpleRepeatInterval']} ms.`\r\n        const repeatCount = parseInt(jobDataMap['CamelQuartzTriggerSimpleRepeatCounter'] ?? '')\r\n        const repeatInterval = parseInt(jobDataMap['CamelQuartzTriggerSimpleRepeatInterval'] ?? '')\r\n        if (repeatCount > 0) {\r\n          trigger.expression += ` (${repeatCount} times)`\r\n        } else {\r\n          trigger.expression += ' (forever)'\r\n        }\r\n        trigger.repeatCount = repeatCount\r\n        trigger.repeatInterval = repeatInterval\r\n        break\r\n      }\r\n      default: {\r\n        // Fallback and grab from Camel endpoint if that is possible (supporting older Camel releases)\r\n        const uri = jobDataMap['CamelQuartzEndpoint']\r\n        if (uri) {\r\n          let cron = getQueryParameterValue(uri, 'cron')\r\n          if (cron) {\r\n            trigger.type = 'cron'\r\n            // Replace + with space as Camel uses + as space in the cron when specifying in the uri\r\n            cron = cron.replace(/\\++/g, ' ')\r\n            trigger.expression = cron\r\n          }\r\n          const repeatCount = parseInt(getQueryParameterValue(uri, 'trigger.repeatCount') ?? '')\r\n          const repeatInterval = parseInt(getQueryParameterValue(uri, 'trigger.repeatInterval') ?? '')\r\n          if (repeatCount || repeatInterval) {\r\n            trigger.type = 'simple'\r\n            trigger.expression = `every ${repeatInterval} ms.`\r\n            if (repeatCount > 0) {\r\n              trigger.expression += ` (${repeatCount} times)`\r\n            } else {\r\n              trigger.expression += ` (forever)`\r\n            }\r\n            trigger.repeatCount = repeatCount\r\n            trigger.repeatInterval = repeatInterval\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  filterTriggers(triggers: Trigger[], filter: TriggerFilter): Trigger[] {\r\n    const { state, group, name, type } = filter\r\n    return triggers.filter(trigger => {\r\n      if (state !== '' && trigger.state !== state) {\r\n        return false\r\n      }\r\n      if (group !== '' && !this.match(trigger.group, group)) {\r\n        return false\r\n      }\r\n      if (name !== '' && !this.match(trigger.name, name)) {\r\n        return false\r\n      }\r\n      if (type !== '' && !this.match(trigger.type ?? '', type)) {\r\n        return false\r\n      }\r\n      return true\r\n    })\r\n  }\r\n\r\n  filterJobs(jobs: Job[], filter: JobFilter): Job[] {\r\n    const { group, name, durability, shouldRecover, jobClass, description } = filter\r\n    return jobs.filter(job => {\r\n      if (group !== '' && !this.match(job.group, group)) {\r\n        return false\r\n      }\r\n      if (name !== '' && !this.match(job.name, name)) {\r\n        return false\r\n      }\r\n      if (durability !== '' && String(job.durability) !== durability) {\r\n        return false\r\n      }\r\n      if (shouldRecover !== '' && String(job.shouldRecover) !== shouldRecover) {\r\n        return false\r\n      }\r\n      if (jobClass !== '' && !this.match(job.jobClass, jobClass)) {\r\n        return false\r\n      }\r\n      if (description !== '' && !this.match(job.description ?? '', description)) {\r\n        return false\r\n      }\r\n      return true\r\n    })\r\n  }\r\n\r\n  private match(value: string, pattern: string): boolean {\r\n    const regexp = new RegExp(pattern, 'i')\r\n    return value.match(regexp) !== null\r\n  }\r\n\r\n  async pauseTrigger(schedulerMBean: string, name: string, group: string) {\r\n    await jolokiaService.execute(schedulerMBean, QUARTZ_OPERATIONS.pauseTrigger, [name, group])\r\n    eventService.notify({\r\n      type: 'success',\r\n      message: `Paused trigger: ${group}/${name}`,\r\n    })\r\n  }\r\n\r\n  async resumeTrigger(schedulerMBean: string, name: string, group: string) {\r\n    await jolokiaService.execute(schedulerMBean, QUARTZ_OPERATIONS.resumeTrigger, [name, group])\r\n    eventService.notify({\r\n      type: 'success',\r\n      message: `Resumed trigger: ${group}/${name}`,\r\n    })\r\n  }\r\n\r\n  async updateTrigger(schedulerMBean: string, trigger: Trigger) {\r\n    const { name, group, misfireInstruction, type } = trigger\r\n    switch (type) {\r\n      case 'cron':\r\n        await jolokiaService.execute(QUARTZ_FACADE_MBEAN, QUARTZ_FACADE_OPERATIONS.updateCronTrigger, [\r\n          schedulerMBean,\r\n          name,\r\n          group,\r\n          misfireInstruction,\r\n          trigger.expression,\r\n          null,\r\n        ])\r\n        break\r\n      case 'simple':\r\n        await jolokiaService.execute(QUARTZ_FACADE_MBEAN, QUARTZ_FACADE_OPERATIONS.updateSimpleTrigger, [\r\n          schedulerMBean,\r\n          name,\r\n          group,\r\n          misfireInstruction,\r\n          trigger.repeatCount,\r\n          trigger.repeatInterval,\r\n        ])\r\n        break\r\n      default:\r\n        eventService.notify({\r\n          type: 'danger',\r\n          message: `Could not update trigger ${group}/${name} due to unknown type: ${type}`,\r\n        })\r\n        return\r\n    }\r\n    eventService.notify({\r\n      type: 'success',\r\n      message: `Updated trigger: ${group}/${name}`,\r\n    })\r\n  }\r\n\r\n  async triggerJob(schedulerMBean: string, name: string, group: string, parameters: string) {\r\n    await jolokiaService.execute(schedulerMBean, QUARTZ_OPERATIONS.triggerJob, [\r\n      name,\r\n      group,\r\n      parameters === '' ? {} : JSON.parse(parameters),\r\n    ])\r\n    eventService.notify({\r\n      type: 'success',\r\n      message: `Manually fired trigger: ${group}/${name}`,\r\n    })\r\n  }\r\n}\r\n\r\nexport const quartzService = new QuartzService()\r\n","import { HawtioLoadingCard } from '@hawtiosrc/plugins/shared'\r\nimport {\r\n  Bullseye,\r\n  Button,\r\n  EmptyState,\r\n  EmptyStateBody,\r\n  EmptyStateIcon,\r\n  Panel,\r\n  PanelMain,\r\n  PanelMainBody,\r\n  SearchInput,\r\n  Select,\r\n  SelectOption,\r\n  SelectOptionObject,\r\n  Title,\r\n  Toolbar,\r\n  ToolbarContent,\r\n  ToolbarGroup,\r\n  ToolbarItem,\r\n} from '@patternfly/react-core'\r\nimport { SearchIcon } from '@patternfly/react-icons'\r\nimport { TableComposable, Tbody, Td, Th, Thead, Tr } from '@patternfly/react-table'\r\nimport React, { useContext, useEffect, useRef, useState } from 'react'\r\nimport { QuartzContext } from '../context'\r\nimport { Job, JobFilter, quartzService } from '../quartz-service'\r\nimport { JobsTableRow } from './JobsTableRow'\r\n\r\nexport const Jobs: React.FunctionComponent = () => {\r\n  const { selectedNode } = useContext(QuartzContext)\r\n  const [jobs, setJobs] = useState<Job[]>([])\r\n  const [isReading, setIsReading] = useState(true)\r\n\r\n  // Filters\r\n  const emptyFilters: JobFilter = {\r\n    group: '',\r\n    name: '',\r\n    durability: '',\r\n    shouldRecover: '',\r\n    jobClass: '',\r\n    description: '',\r\n  }\r\n  const [filters, setFilters] = useState(emptyFilters)\r\n  // Temporal filter values holder until applying it\r\n  const tempFilters = useRef(emptyFilters)\r\n  const [filteredJobs, setFilteredJobs] = useState<Job[]>([])\r\n  const [isSelectDurableOpen, setIsSelectDurableOpen] = useState(false)\r\n  const [isSelectRecoverOpen, setIsSelectRecoverOpen] = useState(false)\r\n\r\n  useEffect(() => {\r\n    if (!selectedNode || !selectedNode.mbean || !selectedNode.objectName) {\r\n      return\r\n    }\r\n\r\n    setIsReading(true)\r\n    const { objectName } = selectedNode\r\n    const loadJobs = async () => {\r\n      const jobs = await quartzService.loadJobs(objectName)\r\n      setJobs(jobs)\r\n      setIsReading(false)\r\n    }\r\n    loadJobs()\r\n\r\n    quartzService.registerJobsLoad(objectName, jobs => {\r\n      setJobs(jobs)\r\n    })\r\n\r\n    return () => quartzService.unregisterAll()\r\n  }, [selectedNode])\r\n\r\n  useEffect(() => {\r\n    const filteredJobs = quartzService.filterJobs(jobs, filters)\r\n    setFilteredJobs(filteredJobs)\r\n  }, [jobs, filters])\r\n\r\n  if (!selectedNode || !selectedNode.mbean || !selectedNode.objectName) {\r\n    return null\r\n  }\r\n\r\n  if (isReading) {\r\n    return <HawtioLoadingCard />\r\n  }\r\n\r\n  const handleFiltersChange = (target: string, value: string, apply = false) => {\r\n    if (apply || target === 'durability' || target === 'shouldRecover') {\r\n      setFilters(prev => ({ ...prev, [target]: value }))\r\n    } else {\r\n      tempFilters.current = { ...tempFilters.current, [target]: value }\r\n    }\r\n  }\r\n\r\n  const onSelect =\r\n    (target: string) =>\r\n    (_event: React.MouseEvent | React.ChangeEvent, value: string | SelectOptionObject, isPlaceHolder?: boolean) => {\r\n      setFilters(prev => ({ ...prev, [target]: isPlaceHolder ? '' : value }))\r\n    }\r\n\r\n  const applyFilters = () => {\r\n    setFilters(prev => ({ ...prev, ...tempFilters.current }))\r\n  }\r\n\r\n  const clearAllFilters = () => {\r\n    setFilters(emptyFilters)\r\n    tempFilters.current = emptyFilters\r\n  }\r\n\r\n  const toolbarItemSearchInput = (key: string) => (\r\n    <ToolbarItem key={key} id={`quartz-jobs-table-toolbar-${key}`}>\r\n      <SearchInput\r\n        id={`quartz-jobs-table-toolbar-${key}-input`}\r\n        aria-label={`Filter ${key.charAt(0).toUpperCase() + key.slice(1)}`}\r\n        placeholder={`Filter by ${key}`}\r\n        value={filters[key as keyof JobFilter]}\r\n        onChange={(_, value) => handleFiltersChange(key, value)}\r\n        onSearch={() => applyFilters()}\r\n        onClear={() => handleFiltersChange(key, '', true)}\r\n      />\r\n    </ToolbarItem>\r\n  )\r\n\r\n  const tableToolbar = (\r\n    <Toolbar id='quartz-jobs-table-toolbar' clearAllFilters={clearAllFilters}>\r\n      <ToolbarContent>\r\n        <ToolbarGroup id='quartz-jobs-table-toolbar-filters-1'>\r\n          {['group', 'name'].map(key => toolbarItemSearchInput(key))}\r\n          <ToolbarItem id='quartz-jobs-table-toolbar-durable'>\r\n            <Select\r\n              id='quartz-jobs-table-toolbar-durable-select'\r\n              variant='single'\r\n              aria-label='Filter Durable'\r\n              selections={filters.durability}\r\n              isOpen={isSelectDurableOpen}\r\n              onToggle={() => setIsSelectDurableOpen(!isSelectDurableOpen)}\r\n              onSelect={onSelect('durability')}\r\n            >\r\n              {[\r\n                <SelectOption key={0} value='Durable' isPlaceholder />,\r\n                ...['true', 'false'].map((state, index) => <SelectOption key={index + 1} value={state} />),\r\n              ]}\r\n            </Select>\r\n          </ToolbarItem>\r\n          <ToolbarItem id='quartz-jobs-table-toolbar-recover'>\r\n            <Select\r\n              id='quartz-jobs-table-toolbar-recover-select'\r\n              variant='single'\r\n              aria-label='Filter Recover'\r\n              selections={filters.shouldRecover}\r\n              isOpen={isSelectRecoverOpen}\r\n              onToggle={() => setIsSelectRecoverOpen(!isSelectRecoverOpen)}\r\n              onSelect={onSelect('shouldRecover')}\r\n            >\r\n              {[\r\n                <SelectOption key={0} value='Recover' isPlaceholder />,\r\n                ...['true', 'false'].map((state, index) => <SelectOption key={index + 1} value={state} />),\r\n              ]}\r\n            </Select>\r\n          </ToolbarItem>\r\n        </ToolbarGroup>\r\n        <ToolbarGroup id='quartz-jobs-table-toolbar-filters-2'>\r\n          {['jobClass', 'description'].map(key => toolbarItemSearchInput(key))}\r\n        </ToolbarGroup>\r\n      </ToolbarContent>\r\n    </Toolbar>\r\n  )\r\n\r\n  const emptyResult = (\r\n    <Bullseye>\r\n      <EmptyState variant='small'>\r\n        <EmptyStateIcon icon={SearchIcon} />\r\n        <Title headingLevel='h2' size='lg'>\r\n          No results found\r\n        </Title>\r\n        <EmptyStateBody>Clear all filters and try again.</EmptyStateBody>\r\n        <Button variant='link' onClick={clearAllFilters}>\r\n          Clear all filters\r\n        </Button>\r\n      </EmptyState>\r\n    </Bullseye>\r\n  )\r\n\r\n  return (\r\n    <Panel>\r\n      <PanelMain>\r\n        <PanelMainBody>\r\n          {tableToolbar}\r\n          <TableComposable id='quartz-jobs-table' variant='compact' aria-label='Jobs Table' isStriped isStickyHeader>\r\n            <Thead noWrap>\r\n              <Tr>\r\n                <Th>Group</Th>\r\n                <Th>Name</Th>\r\n                <Th>Durable</Th>\r\n                <Th>Recover</Th>\r\n                <Th>Job Class Name</Th>\r\n                <Th>Description</Th>\r\n              </Tr>\r\n            </Thead>\r\n            <Tbody>\r\n              {filteredJobs.map((job, index) => (\r\n                <JobsTableRow key={index} job={job} />\r\n              ))}\r\n              {filteredJobs.length === 0 && (\r\n                <Tr>\r\n                  <Td colSpan={6}>{emptyResult}</Td>\r\n                </Tr>\r\n              )}\r\n            </Tbody>\r\n          </TableComposable>\r\n        </PanelMainBody>\r\n      </PanelMain>\r\n    </Panel>\r\n  )\r\n}\r\n","import { Button, Modal } from '@patternfly/react-core'\r\nimport { TableComposable, Tbody, Td, Th, Thead, Tr } from '@patternfly/react-table'\r\nimport React, { useState } from 'react'\r\nimport { Job } from '../quartz-service'\r\n\r\nexport const JobsTableRow: React.FunctionComponent<{ job: Job }> = ({ job }) => {\r\n  const [isDetailOpen, setIsDetailOpen] = useState(false)\r\n\r\n  const handleDetailToggle = () => {\r\n    setIsDetailOpen(!isDetailOpen)\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Tr onRowClick={handleDetailToggle}>\r\n        <Td dataLabel='group'>{job.group}</Td>\r\n        <Td dataLabel='name'>{job.name}</Td>\r\n        <Td dataLabel='durable'>{String(job.durability)}</Td>\r\n        <Td dataLabel='recover'>{String(job.shouldRecover)}</Td>\r\n        <Td dataLabel='jobClass'>{job.jobClass}</Td>\r\n        <Td dataLabel='description'>{job.description}</Td>\r\n      </Tr>\r\n      <JobDetailModal isOpen={isDetailOpen} onClose={handleDetailToggle} input={job} />\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nconst JobDetailModal: React.FunctionComponent<{\r\n  isOpen: boolean\r\n  onClose: () => void\r\n  input: Job\r\n}> = ({ isOpen, onClose, input }) => {\r\n  const { group, name, jobDataMap } = input\r\n\r\n  return (\r\n    <Modal\r\n      id='quartz-jobs-detail-modal'\r\n      variant='medium'\r\n      title={`Job Detail: ${group}/${name}`}\r\n      isOpen={isOpen}\r\n      onClose={onClose}\r\n      actions={[\r\n        <Button key='close' variant='primary' onClick={onClose}>\r\n          Close\r\n        </Button>,\r\n      ]}\r\n    >\r\n      <TableComposable id='quartz-jobs-detail-table' variant='compact' aria-label='Job Detail Table' isStriped>\r\n        <Thead>\r\n          <Tr>\r\n            <Th>Key</Th>\r\n            <Th>Value</Th>\r\n          </Tr>\r\n        </Thead>\r\n        <Tbody>\r\n          {Object.entries(jobDataMap).map(([key, value], index) => (\r\n            <Tr key={index}>\r\n              <Td>{key}</Td>\r\n              <Td>{value}</Td>\r\n            </Tr>\r\n          ))}\r\n        </Tbody>\r\n      </TableComposable>\r\n    </Modal>\r\n  )\r\n}\r\n","import { AttributeValues, HawtioLoadingCard } from '@hawtiosrc/plugins/shared'\r\nimport { attributeService } from '@hawtiosrc/plugins/shared/attributes/attribute-service'\r\nimport {\r\n  Card,\r\n  CardActions,\r\n  CardBody,\r\n  CardHeader,\r\n  CardHeaderMain,\r\n  CardTitle,\r\n  DescriptionList,\r\n  DescriptionListDescription,\r\n  DescriptionListGroup,\r\n  DescriptionListTerm,\r\n  Icon,\r\n  Stack,\r\n  Switch,\r\n} from '@patternfly/react-core'\r\nimport { CheckCircleIcon, PauseCircleIcon } from '@patternfly/react-icons'\r\nimport React, { useContext, useEffect, useState } from 'react'\r\nimport { QuartzContext } from '../context'\r\nimport { log } from '../globals'\r\nimport { QUARTZ_OPERATIONS, quartzService } from '../quartz-service'\r\nimport './Scheduler.css'\r\n\r\nexport const Scheduler: React.FunctionComponent = () => {\r\n  const { selectedNode } = useContext(QuartzContext)\r\n  const [attributes, setAttributes] = useState<AttributeValues>({})\r\n  const [isReading, setIsReading] = useState(true)\r\n  const [reload, setReload] = useState(false)\r\n\r\n  useEffect(() => {\r\n    if (!selectedNode || !selectedNode.objectName) {\r\n      return\r\n    }\r\n\r\n    setIsReading(true)\r\n    const { objectName } = selectedNode\r\n    attributeService.readWithCallback(objectName, attrs => {\r\n      setAttributes(attrs)\r\n      setIsReading(false)\r\n    })\r\n\r\n    attributeService.register({ type: 'read', mbean: objectName }, response => {\r\n      log.debug('Scheduler - Attributes:', response.value)\r\n      setAttributes(response.value as AttributeValues)\r\n    })\r\n\r\n    return () => attributeService.unregisterAll()\r\n  }, [selectedNode])\r\n\r\n  // When forcing reload\r\n  useEffect(() => {\r\n    if (!selectedNode || !selectedNode.objectName || !reload) {\r\n      return\r\n    }\r\n\r\n    log.debug('Reload scheduler attributes')\r\n\r\n    setIsReading(true)\r\n    const { objectName } = selectedNode\r\n    attributeService.readWithCallback(objectName, attrs => {\r\n      setAttributes(attrs)\r\n      setIsReading(false)\r\n    })\r\n\r\n    setReload(false)\r\n  }, [selectedNode, reload])\r\n\r\n  if (!selectedNode || !selectedNode.objectName) {\r\n    return null\r\n  }\r\n\r\n  if (isReading) {\r\n    return <HawtioLoadingCard />\r\n  }\r\n\r\n  const { name, objectName } = selectedNode\r\n\r\n  const canStartPauseScheduler = () => {\r\n    return selectedNode.hasInvokeRights(QUARTZ_OPERATIONS.start, QUARTZ_OPERATIONS.standby)\r\n  }\r\n\r\n  const handleSchedulerSwitchChange = async (start: boolean) => {\r\n    await (start ? quartzService.start(name, objectName) : quartzService.pause(name, objectName))\r\n    setReload(true)\r\n  }\r\n\r\n  const canUpdateSampleStatisticsEnabled = () => {\r\n    // TODO: currently using the same criteria as start/pause scheduler, as it requires writing to an attribute\r\n    return selectedNode.hasInvokeRights(QUARTZ_OPERATIONS.start, QUARTZ_OPERATIONS.standby)\r\n  }\r\n\r\n  const handleSampledStatisticsSwitchChange = async (value: boolean) => {\r\n    await quartzService.updateSampleStatisticsEnabled(name, objectName, value)\r\n    setReload(true)\r\n  }\r\n\r\n  const scheduler = {\r\n    // scheduler\r\n    started: attributes['Started'] as boolean,\r\n    name: attributes['SchedulerName'] as string,\r\n    instance: attributes['SchedulerInstanceId'] as string,\r\n    version: attributes['Version'] as string,\r\n    jobStoreClassName: attributes['JobStoreClassName'] as string,\r\n    threadPoolClassName: attributes['ThreadPoolClassName'] as string,\r\n    threadPoolSize: attributes['ThreadPoolSize'] as number,\r\n    // sampled statistics\r\n    sampledStatisticsEnabled: attributes['SampledStatisticsEnabled'] as boolean,\r\n    jobsCompleted: attributes['JobsCompletedMostRecentSample'] as number,\r\n    jobsExecuted: attributes['JobsExecutedMostRecentSample'] as number,\r\n    jobsScheduled: attributes['JobsScheduledMostRecentSample'] as number,\r\n  }\r\n\r\n  return (\r\n    <Stack id='quartz-scheduler' hasGutter>\r\n      <Card id='quartz-scheduler-main'>\r\n        <CardHeader>\r\n          <CardHeaderMain>\r\n            {scheduler.started ? (\r\n              <Icon status='success'>\r\n                <CheckCircleIcon />\r\n              </Icon>\r\n            ) : (\r\n              <Icon>\r\n                <PauseCircleIcon />\r\n              </Icon>\r\n            )}\r\n          </CardHeaderMain>\r\n          <CardTitle>Scheduler</CardTitle>\r\n          <CardActions>\r\n            <Switch\r\n              id='quartz-scheduler-main-switch'\r\n              label='Started'\r\n              labelOff='Paused'\r\n              isChecked={scheduler.started}\r\n              isDisabled={!canStartPauseScheduler()}\r\n              onChange={handleSchedulerSwitchChange}\r\n              isReversed\r\n            />\r\n          </CardActions>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <DescriptionList isCompact isHorizontal>\r\n            <DescriptionListGroup>\r\n              <DescriptionListTerm>Name</DescriptionListTerm>\r\n              <DescriptionListDescription>{scheduler.name}</DescriptionListDescription>\r\n            </DescriptionListGroup>\r\n            <DescriptionListGroup>\r\n              <DescriptionListTerm>Instance</DescriptionListTerm>\r\n              <DescriptionListDescription>{scheduler.instance}</DescriptionListDescription>\r\n            </DescriptionListGroup>\r\n            <DescriptionListGroup>\r\n              <DescriptionListTerm>Version</DescriptionListTerm>\r\n              <DescriptionListDescription>{scheduler.version}</DescriptionListDescription>\r\n            </DescriptionListGroup>\r\n            <DescriptionListGroup>\r\n              <DescriptionListTerm>Job store class name</DescriptionListTerm>\r\n              <DescriptionListDescription>{scheduler.jobStoreClassName}</DescriptionListDescription>\r\n            </DescriptionListGroup>\r\n            <DescriptionListGroup>\r\n              <DescriptionListTerm>Thread pool class name</DescriptionListTerm>\r\n              <DescriptionListDescription>{scheduler.threadPoolClassName}</DescriptionListDescription>\r\n            </DescriptionListGroup>\r\n            <DescriptionListGroup>\r\n              <DescriptionListTerm>Thread pool size</DescriptionListTerm>\r\n              <DescriptionListDescription>{scheduler.threadPoolSize}</DescriptionListDescription>\r\n            </DescriptionListGroup>\r\n          </DescriptionList>\r\n        </CardBody>\r\n      </Card>\r\n      <Card id='quartz-scheduler-statistics'>\r\n        <CardHeader>\r\n          <CardHeaderMain>\r\n            {scheduler.sampledStatisticsEnabled ? (\r\n              <Icon status='success'>\r\n                <CheckCircleIcon />\r\n              </Icon>\r\n            ) : (\r\n              <Icon>\r\n                <PauseCircleIcon />\r\n              </Icon>\r\n            )}\r\n          </CardHeaderMain>\r\n          <CardTitle>Sampled Statistics (Most Recent Samples)</CardTitle>\r\n          <CardActions>\r\n            <Switch\r\n              id='quartz-scheduler-statistics-switch'\r\n              label='Enabled'\r\n              labelOff='Disabled'\r\n              isChecked={scheduler.sampledStatisticsEnabled}\r\n              isDisabled={!canUpdateSampleStatisticsEnabled()}\r\n              onChange={handleSampledStatisticsSwitchChange}\r\n              isReversed\r\n            />\r\n          </CardActions>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <DescriptionList isCompact isHorizontal>\r\n            <DescriptionListGroup>\r\n              <DescriptionListTerm>Jobs completed</DescriptionListTerm>\r\n              <DescriptionListDescription>{scheduler.jobsCompleted}</DescriptionListDescription>\r\n            </DescriptionListGroup>\r\n            <DescriptionListGroup>\r\n              <DescriptionListTerm>Jobs executed</DescriptionListTerm>\r\n              <DescriptionListDescription>{scheduler.jobsExecuted}</DescriptionListDescription>\r\n            </DescriptionListGroup>\r\n            <DescriptionListGroup>\r\n              <DescriptionListTerm>Jobs scheduled</DescriptionListTerm>\r\n              <DescriptionListDescription>{scheduler.jobsScheduled}</DescriptionListDescription>\r\n            </DescriptionListGroup>\r\n          </DescriptionList>\r\n        </CardBody>\r\n      </Card>\r\n    </Stack>\r\n  )\r\n}\r\n","import { HawtioLoadingCard } from '@hawtiosrc/plugins/shared'\r\nimport {\r\n  Bullseye,\r\n  Button,\r\n  EmptyState,\r\n  EmptyStateBody,\r\n  EmptyStateIcon,\r\n  Panel,\r\n  PanelMain,\r\n  PanelMainBody,\r\n  SearchInput,\r\n  Select,\r\n  SelectOption,\r\n  SelectOptionObject,\r\n  Title,\r\n  Toolbar,\r\n  ToolbarContent,\r\n  ToolbarGroup,\r\n  ToolbarItem,\r\n} from '@patternfly/react-core'\r\nimport { SearchIcon } from '@patternfly/react-icons'\r\nimport { TableComposable, Tbody, Td, Th, Thead, Tr } from '@patternfly/react-table'\r\nimport React, { useContext, useEffect, useRef, useState } from 'react'\r\nimport { QuartzContext } from '../context'\r\nimport { log } from '../globals'\r\nimport { Trigger, TriggerFilter, quartzService } from '../quartz-service'\r\nimport { TriggersTableRow } from './TriggersTableRow'\r\n\r\nexport const Triggers: React.FunctionComponent = () => {\r\n  const { selectedNode } = useContext(QuartzContext)\r\n  const [triggers, setTriggers] = useState<Trigger[]>([])\r\n  const [isReading, setIsReading] = useState(true)\r\n  const [reload, setReload] = useState(false)\r\n\r\n  // Filters\r\n  const emptyFilters: TriggerFilter = { state: '', group: '', name: '', type: '' }\r\n  const [filters, setFilters] = useState(emptyFilters)\r\n  // Temporal filter values holder until applying it\r\n  const tempFilters = useRef(emptyFilters)\r\n  const [filteredTriggers, setFilteredTriggers] = useState<Trigger[]>([])\r\n  const [isSelectStateOpen, setIsSelectStateOpen] = useState(false)\r\n\r\n  useEffect(() => {\r\n    if (!selectedNode || !selectedNode.objectName) {\r\n      return\r\n    }\r\n\r\n    setIsReading(true)\r\n    const { objectName } = selectedNode\r\n    const loadTriggers = async () => {\r\n      const triggers = await quartzService.loadTriggers(objectName)\r\n      setTriggers(triggers)\r\n      setIsReading(false)\r\n    }\r\n    loadTriggers()\r\n\r\n    // Watch triggers update\r\n    quartzService.registerTriggersLoad(objectName, triggers => {\r\n      setTriggers(triggers)\r\n    })\r\n\r\n    return () => quartzService.unregisterAll()\r\n  }, [selectedNode])\r\n\r\n  // When forcing reload\r\n  useEffect(() => {\r\n    if (!selectedNode || !selectedNode.objectName || !reload) {\r\n      return\r\n    }\r\n\r\n    log.debug('Reload triggers')\r\n\r\n    const { objectName } = selectedNode\r\n    const loadTriggers = async () => {\r\n      const triggers = await quartzService.loadTriggers(objectName)\r\n      setTriggers(triggers)\r\n    }\r\n    loadTriggers()\r\n\r\n    setReload(false)\r\n  }, [selectedNode, reload])\r\n\r\n  useEffect(() => {\r\n    const filteredTriggers = quartzService.filterTriggers(triggers, filters)\r\n    setFilteredTriggers(filteredTriggers)\r\n  }, [triggers, filters])\r\n\r\n  if (!selectedNode || !selectedNode.objectName) {\r\n    return null\r\n  }\r\n\r\n  if (isReading) {\r\n    return <HawtioLoadingCard />\r\n  }\r\n\r\n  const handleFiltersChange = (target: string, value: string, apply = false) => {\r\n    if (apply || target === 'state') {\r\n      setFilters(prev => ({ ...prev, [target]: value }))\r\n    } else {\r\n      tempFilters.current = { ...tempFilters.current, [target]: value }\r\n    }\r\n  }\r\n\r\n  const onStateSelect = (\r\n    _event: React.MouseEvent | React.ChangeEvent,\r\n    value: string | SelectOptionObject,\r\n    isPlaceHolder?: boolean,\r\n  ) => {\r\n    setFilters(prev => ({ ...prev, state: isPlaceHolder ? '' : (value as string) }))\r\n  }\r\n\r\n  const applyFilters = () => {\r\n    setFilters(prev => ({ ...prev, ...tempFilters.current }))\r\n  }\r\n\r\n  const clearAllFilters = () => {\r\n    setFilters(emptyFilters)\r\n    tempFilters.current = emptyFilters\r\n  }\r\n\r\n  const triggerStates = ['NORMAL', 'PAUSED']\r\n\r\n  const tableToolbar = (\r\n    <Toolbar id='quartz-triggers-table-toolbar' clearAllFilters={clearAllFilters}>\r\n      <ToolbarContent>\r\n        <ToolbarGroup id='quartz-triggers-table-toolbar-filters'>\r\n          <ToolbarItem id='quartz-triggers-table-toolbar-state'>\r\n            <Select\r\n              id='quartz-triggers-table-toolbar-state-select'\r\n              variant='single'\r\n              aria-label='Filter State'\r\n              selections={filters.state}\r\n              isOpen={isSelectStateOpen}\r\n              onToggle={() => setIsSelectStateOpen(!isSelectStateOpen)}\r\n              onSelect={onStateSelect}\r\n            >\r\n              {[\r\n                <SelectOption key={0} value='State' isPlaceholder />,\r\n                ...triggerStates.map((state, index) => <SelectOption key={index + 1} value={state} />),\r\n              ]}\r\n            </Select>\r\n          </ToolbarItem>\r\n          {['group', 'name', 'type'].map(key => (\r\n            <ToolbarItem key={key} id={`quartz-triggers-table-toolbar-${key}`}>\r\n              <SearchInput\r\n                id={`quartz-triggers-table-toolbar-${key}-input`}\r\n                aria-label={`Filter ${key.charAt(0).toUpperCase() + key.slice(1)}`}\r\n                placeholder={`Filter by ${key}`}\r\n                value={filters[key as keyof TriggerFilter]}\r\n                onChange={(_, value) => handleFiltersChange(key, value)}\r\n                onSearch={() => applyFilters()}\r\n                onClear={() => handleFiltersChange(key, '', true)}\r\n              />\r\n            </ToolbarItem>\r\n          ))}\r\n        </ToolbarGroup>\r\n      </ToolbarContent>\r\n    </Toolbar>\r\n  )\r\n\r\n  const emptyResult = (\r\n    <Bullseye>\r\n      <EmptyState variant='small'>\r\n        <EmptyStateIcon icon={SearchIcon} />\r\n        <Title headingLevel='h2' size='lg'>\r\n          No results found\r\n        </Title>\r\n        <EmptyStateBody>Clear all filters and try again.</EmptyStateBody>\r\n        <Button variant='link' onClick={clearAllFilters}>\r\n          Clear all filters\r\n        </Button>\r\n      </EmptyState>\r\n    </Bullseye>\r\n  )\r\n\r\n  return (\r\n    <Panel>\r\n      <PanelMain>\r\n        <PanelMainBody>\r\n          {tableToolbar}\r\n          <TableComposable\r\n            id='quartz-triggers-table'\r\n            variant='compact'\r\n            aria-label='Triggers Table'\r\n            isStriped\r\n            isStickyHeader\r\n          >\r\n            <Thead noWrap>\r\n              <Tr>\r\n                <Th>State</Th>\r\n                <Th>Group</Th>\r\n                <Th>Name</Th>\r\n                <Th>Type</Th>\r\n                <Th>Expression</Th>\r\n                <Th>Misfire Instruction</Th>\r\n                <Th>Previous Fire</Th>\r\n                <Th>Next Fire</Th>\r\n                <Th>Final Fire</Th>\r\n                <Th colSpan={2}>Actions</Th>\r\n              </Tr>\r\n            </Thead>\r\n            <Tbody>\r\n              {filteredTriggers.map((trigger, index) => (\r\n                <TriggersTableRow key={index} trigger={trigger} reload={() => setReload(true)} />\r\n              ))}\r\n              {filteredTriggers.length === 0 && (\r\n                <Tr>\r\n                  <Td colSpan={11}>{emptyResult}</Td>\r\n                </Tr>\r\n              )}\r\n            </Tbody>\r\n          </TableComposable>\r\n        </PanelMainBody>\r\n      </PanelMain>\r\n    </Panel>\r\n  )\r\n}\r\n","import { Button, Icon } from '@patternfly/react-core'\r\nimport { CheckCircleIcon, PauseCircleIcon } from '@patternfly/react-icons'\r\nimport { ActionsColumn, Td, Tr } from '@patternfly/react-table'\r\nimport React, { useContext, useState } from 'react'\r\nimport { QuartzContext } from '../context'\r\nimport {\r\n  QUARTZ_FACADE_OPERATIONS,\r\n  QUARTZ_OPERATIONS,\r\n  Trigger,\r\n  misfireInstructions,\r\n  quartzService,\r\n} from '../quartz-service'\r\nimport { TriggersManualModal } from './TriggersManualModal'\r\nimport { TriggersUpdateModal } from './TriggersUpdateModal'\r\n\r\nexport const TriggersTableRow: React.FunctionComponent<{\r\n  trigger: Trigger\r\n  reload: () => void\r\n}> = ({ trigger, reload }) => {\r\n  const { selectedNode } = useContext(QuartzContext)\r\n  const [isUpdateOpen, setIsUpdateOpen] = useState(false)\r\n  const [isManualOpen, setIsManualOpen] = useState(false)\r\n\r\n  if (!selectedNode || !selectedNode.objectName) {\r\n    return null\r\n  }\r\n\r\n  const { objectName } = selectedNode\r\n\r\n  const canUpdateTrigger = () => {\r\n    return selectedNode.hasInvokeRights(\r\n      QUARTZ_FACADE_OPERATIONS.updateCronTrigger,\r\n      QUARTZ_FACADE_OPERATIONS.updateSimpleTrigger,\r\n    )\r\n  }\r\n\r\n  const handleUpdateToggle = () => {\r\n    setIsUpdateOpen(!isUpdateOpen)\r\n  }\r\n\r\n  const canTriggerJob = () => {\r\n    return selectedNode.hasInvokeRights(QUARTZ_OPERATIONS.triggerJob)\r\n  }\r\n\r\n  const handleManualToggle = () => {\r\n    setIsManualOpen(!isManualOpen)\r\n  }\r\n\r\n  const canPauseTrigger = () => {\r\n    return selectedNode.hasInvokeRights(QUARTZ_OPERATIONS.pauseTrigger)\r\n  }\r\n\r\n  const pauseTrigger = async () => {\r\n    await quartzService.pauseTrigger(objectName, trigger.name, trigger.group)\r\n    reload()\r\n  }\r\n\r\n  const canResumeTrigger = () => {\r\n    return selectedNode.hasInvokeRights(QUARTZ_OPERATIONS.resumeTrigger)\r\n  }\r\n\r\n  const resumeTrigger = async () => {\r\n    await quartzService.resumeTrigger(objectName, trigger.name, trigger.group)\r\n    reload()\r\n  }\r\n\r\n  const toMisfireText = (misfireInstruction: number): string => {\r\n    return misfireInstructions.find(({ value }) => misfireInstruction === value)?.label ?? 'Unknown'\r\n  }\r\n\r\n  const normalState = trigger.state?.toLowerCase() === 'normal'\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Tr>\r\n        <Td dataLabel='state'>\r\n          {normalState ? (\r\n            <Icon status='success'>\r\n              <CheckCircleIcon />\r\n            </Icon>\r\n          ) : (\r\n            <Icon>\r\n              <PauseCircleIcon />\r\n            </Icon>\r\n          )}\r\n        </Td>\r\n        <Td dataLabel='group'>{trigger.group}</Td>\r\n        <Td dataLabel='name'>{trigger.name}</Td>\r\n        <Td dataLabel='type'>{trigger.type}</Td>\r\n        <Td dataLabel='expression'>{trigger.expression}</Td>\r\n        <Td dataLabel='misfireInstruction'>{toMisfireText(trigger.misfireInstruction)}</Td>\r\n        <Td dataLabel='PreviousFire'>{trigger.previousFireTime?.toString()}</Td>\r\n        <Td dataLabel='nextFire'>{trigger.nextFireTime?.toString()}</Td>\r\n        <Td dataLabel='finalFire'>{trigger.finalFireTime?.toString()}</Td>\r\n        <Td dataLabel='resume/pause' modifier='fitContent'>\r\n          {normalState ? (\r\n            <Button variant='danger' isSmall onClick={pauseTrigger} isDisabled={!canPauseTrigger()}>\r\n              Pause\r\n            </Button>\r\n          ) : (\r\n            <Button variant='primary' isSmall onClick={resumeTrigger} isDisabled={!canResumeTrigger()}>\r\n              Resume\r\n            </Button>\r\n          )}\r\n        </Td>\r\n        <Td isActionCell>\r\n          <ActionsColumn\r\n            items={[\r\n              {\r\n                title: 'Update Trigger',\r\n                isDisabled: !canUpdateTrigger(),\r\n                onClick: handleUpdateToggle,\r\n              },\r\n              {\r\n                title: 'Trigger Manually',\r\n                isDisabled: !canTriggerJob(),\r\n                onClick: handleManualToggle,\r\n              },\r\n            ]}\r\n          />\r\n        </Td>\r\n      </Tr>\r\n      <TriggersUpdateModal isOpen={isUpdateOpen} onClose={handleUpdateToggle} input={trigger} reload={reload} />\r\n      <TriggersManualModal isOpen={isManualOpen} onClose={handleManualToggle} input={trigger} />\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import { Button, Form, FormGroup, Modal, TextArea } from '@patternfly/react-core'\r\nimport React, { useContext, useState } from 'react'\r\nimport { QuartzContext } from '../context'\r\nimport { log } from '../globals'\r\nimport { Trigger, quartzService } from '../quartz-service'\r\n\r\nexport const TriggersManualModal: React.FunctionComponent<{\r\n  isOpen: boolean\r\n  onClose: () => void\r\n  input: Trigger\r\n}> = ({ isOpen, onClose, input }) => {\r\n  const { selectedNode } = useContext(QuartzContext)\r\n  const [parameters, setParameters] = useState('{}')\r\n\r\n  if (!selectedNode || !selectedNode.objectName) {\r\n    return null\r\n  }\r\n\r\n  const { objectName } = selectedNode\r\n  const { name, group } = input\r\n\r\n  const fireTrigger = () => {\r\n    log.info('Manually fire trigger:', objectName, input, parameters)\r\n    quartzService.triggerJob(objectName, name, group, parameters)\r\n    clear()\r\n  }\r\n\r\n  const clear = () => {\r\n    setParameters('{}')\r\n    onClose()\r\n  }\r\n\r\n  const manualTriggerButtons = [\r\n    <Button key='fire' variant='danger' form='quartz-triggers-manual-modal-form' onClick={fireTrigger}>\r\n      Fire now\r\n    </Button>,\r\n    <Button key='cancel' variant='link' onClick={clear}>\r\n      Cancel\r\n    </Button>,\r\n  ]\r\n\r\n  return (\r\n    <Modal\r\n      id='quartz-triggers-manual-modal'\r\n      variant='medium'\r\n      title={`Manually Fire Trigger: ${group}/${name}`}\r\n      isOpen={isOpen}\r\n      onClose={clear}\r\n      actions={manualTriggerButtons}\r\n    >\r\n      <Form id='quartz-triggers-manual-modal-form' isHorizontal>\r\n        <FormGroup label='Name' fieldId='quartz-triggers-manual-modal-form-name'>\r\n          {name}\r\n        </FormGroup>\r\n        <FormGroup label='Group' fieldId='quartz-triggers-manual-modal-form-group'>\r\n          {group}\r\n        </FormGroup>\r\n        <FormGroup\r\n          label='Parameters'\r\n          fieldId='quartz-triggers-manual-modal-form-parameters'\r\n          helperText={['Parameters if any (', <code key={1}>java.util.Map</code>, ' in JSON syntax)']}\r\n        >\r\n          <TextArea\r\n            id='quartz-triggers-manual-modal-form-parameters-input'\r\n            aria-label='quartz triggers manual modal form parameters'\r\n            resizeOrientation='vertical'\r\n            value={parameters}\r\n            onChange={value => setParameters(value)}\r\n          />\r\n        </FormGroup>\r\n      </Form>\r\n    </Modal>\r\n  )\r\n}\r\n","import { Button, Form, FormGroup, FormSelect, FormSelectOption, Modal, TextInput } from '@patternfly/react-core'\r\nimport React, { useContext, useState } from 'react'\r\nimport { QuartzContext } from '../context'\r\nimport { log } from '../globals'\r\nimport { Trigger, misfireInstructions, quartzService } from '../quartz-service'\r\n\r\nexport const TriggersUpdateModal: React.FunctionComponent<{\r\n  isOpen: boolean\r\n  onClose: () => void\r\n  input: Trigger\r\n  reload: () => void\r\n}> = ({ isOpen, onClose, input, reload }) => {\r\n  const { selectedNode } = useContext(QuartzContext)\r\n  const [trigger, setTrigger] = useState(input)\r\n\r\n  if (!selectedNode || !selectedNode.objectName) {\r\n    return null\r\n  }\r\n\r\n  const { objectName } = selectedNode\r\n  const isCron = input.type === 'cron'\r\n  const isSimple = input.type === 'simple'\r\n\r\n  const updateTrigger = async () => {\r\n    log.info('Update trigger:', objectName, trigger)\r\n    await quartzService.updateTrigger(objectName, trigger)\r\n    reload()\r\n    onClose()\r\n  }\r\n\r\n  const clear = () => {\r\n    setTrigger(input)\r\n    onClose()\r\n  }\r\n\r\n  const updateTriggerButtons = [\r\n    <Button key='update' variant='primary' form='quartz-triggers-update-modal-form' onClick={updateTrigger}>\r\n      Update\r\n    </Button>,\r\n    <Button key='cancel' variant='link' onClick={clear}>\r\n      Cancel\r\n    </Button>,\r\n  ]\r\n\r\n  return (\r\n    <Modal\r\n      id='quartz-triggers-update-modal'\r\n      variant='medium'\r\n      title={`Update Trigger: ${input.group}/${input.name}`}\r\n      isOpen={isOpen}\r\n      onClose={clear}\r\n      actions={updateTriggerButtons}\r\n    >\r\n      <Form id='quartz-triggers-update-modal-form' isHorizontal>\r\n        {isCron && (\r\n          <FormGroup\r\n            label='Cron expression'\r\n            isRequired\r\n            fieldId='quartz-triggers-update-modal-form-cron'\r\n            helperText='Specify a cron expression for the trigger'\r\n          >\r\n            <TextInput\r\n              id='quartz-triggers-update-modal-form-cron'\r\n              name='quartz-triggers-update-modal-form-cron'\r\n              isRequired\r\n              value={trigger.expression}\r\n              onChange={value => setTrigger({ ...trigger, expression: value })}\r\n            />\r\n          </FormGroup>\r\n        )}\r\n        {isSimple && (\r\n          <React.Fragment>\r\n            <FormGroup\r\n              label='Repeat count'\r\n              isRequired\r\n              fieldId='quartz-triggers-update-modal-form-repeat-count'\r\n              helperText='Number of times to repeat. Use -1 for forever'\r\n            >\r\n              <TextInput\r\n                id='quartz-triggers-update-modal-form-repeat-count'\r\n                name='quartz-triggers-update-modal-form-repeat-count'\r\n                isRequired\r\n                type='number'\r\n                value={trigger.repeatCount}\r\n                onChange={value => setTrigger({ ...trigger, repeatCount: parseInt(value) })}\r\n              />\r\n            </FormGroup>\r\n            <FormGroup\r\n              label='Repeat interval'\r\n              isRequired\r\n              fieldId='quartz-triggers-update-modal-form-repeat-interval'\r\n              helperText='Elapsed time in millis between triggering'\r\n            >\r\n              <TextInput\r\n                id='quartz-triggers-update-modal-form-repeat-interval'\r\n                name='quartz-triggers-update-modal-form-repeat-interval'\r\n                isRequired\r\n                type='number'\r\n                value={trigger.repeatInterval}\r\n                onChange={value => setTrigger({ ...trigger, repeatInterval: parseInt(value) })}\r\n              />\r\n            </FormGroup>\r\n          </React.Fragment>\r\n        )}\r\n        <FormGroup\r\n          label='Misfire Instruction'\r\n          isRequired\r\n          fieldId='quartz-triggers-update-modal-form-misfire'\r\n          helperText='What to do when misfiring happens'\r\n        >\r\n          <FormSelect\r\n            id='quartz-triggers-update-modal-form-misfire-select'\r\n            aria-label='Select Misfire Instruction'\r\n            value={trigger.misfireInstruction}\r\n            onChange={value => setTrigger({ ...trigger, misfireInstruction: parseInt(value) })}\r\n          >\r\n            {misfireInstructions.map(({ value, label }, index) => (\r\n              <FormSelectOption key={index} value={value} label={label} />\r\n            ))}\r\n          </FormSelect>\r\n        </FormGroup>\r\n      </Form>\r\n    </Modal>\r\n  )\r\n}\r\n","import { TreeView, TreeViewDataItem } from '@patternfly/react-core'\r\nimport React, { useContext } from 'react'\r\nimport { MBeanNode } from '../shared'\r\nimport './QuartzTreeView.css'\r\nimport { QuartzContext } from './context'\r\n\r\nexport const QuartzTreeView: React.FunctionComponent = () => {\r\n  const { tree, selectedNode, setSelectedNode } = useContext(QuartzContext)\r\n\r\n  const onSelect = (_event: React.MouseEvent<Element, MouseEvent>, item: TreeViewDataItem) => {\r\n    setSelectedNode(item as MBeanNode)\r\n  }\r\n\r\n  return (\r\n    <TreeView\r\n      id='quartz-tree-view'\r\n      data={tree.getTree()}\r\n      hasGuides={true}\r\n      hasSelectableNodes={true}\r\n      activeItems={selectedNode ? [selectedNode] : []}\r\n      onSelect={onSelect}\r\n    />\r\n  )\r\n}\r\n","import { hawtio, HawtioPlugin } from '@hawtiosrc/core'\r\nimport { helpRegistry } from '@hawtiosrc/help/registry'\r\nimport { pluginId, pluginPath } from './globals'\r\nimport help from './help.md'\r\nimport { Quartz } from './Quartz'\r\nimport { quartzService } from './quartz-service'\r\n\r\nconst order = 15\r\n\r\nexport const quartz: HawtioPlugin = () => {\r\n  hawtio.addPlugin({\r\n    id: pluginId,\r\n    title: 'Quartz',\r\n    path: pluginPath,\r\n    order,\r\n    component: Quartz,\r\n    isActive: () => quartzService.isActive(),\r\n  })\r\n\r\n  helpRegistry.add(pluginId, 'Quartz', help, order)\r\n}\r\n","import {\r\n  JolokiaListMethod,\r\n  MBeanNode,\r\n  MBeanTree,\r\n  OptimisedMBeanOperation,\r\n  TreeProcessor,\r\n  jolokiaService,\r\n} from '@hawtiosrc/plugins/shared'\r\nimport { operationToString } from '@hawtiosrc/util/jolokia'\r\nimport { isString } from '@hawtiosrc/util/objects'\r\nimport { Request, Response } from 'jolokia.js'\r\nimport { log } from './globals'\r\nimport { rbacService } from './rbac-service'\r\n\r\n/**\r\n * Process JMX tree and attach RBAC info (canInvoke) to it in advance.\r\n *\r\n * Matrix of supported RBAC MBeans per platform:\r\n * +-------------------------+-----------+--------------+---------------+----------------+\r\n * |        Platform         | ACL MBean | RBACRegistry | RBACDecorator | Process method |\r\n * +-------------------------+-----------+--------------+---------------+----------------+\r\n * | Karaf                   | o         | o            | o             | (built-in)     |\r\n * | WildFly                 | x (dummy) | o            | x             | processRBAC()  |\r\n * | Spring Boot             | x (dummy) | o            | x             | processRBAC()  |\r\n * | Artemis                 | o         | o            | x             | processRBAC()  |\r\n * | Jolokia (no hawtio.war) | x         | x            | x             | processRBAC()  |\r\n * +-------------------------+-----------+--------------+---------------+----------------+\r\n *\r\n * Object names for the RBAC MBeans:\r\n * - ACL MBean:     \"*:type=security,area=jmx,*\"\r\n * - RBACRegistry:  \"hawtio:type=security,name=RBACRegistry\"\r\n * - RBACDecorator: \"hawtio:type=security,area=jolokia,name=RBACDecorator\"\r\n */\r\nexport const rbacTreeProcessor: TreeProcessor = async (tree: MBeanTree) => {\r\n  log.debug('Processing tree:', tree)\r\n  const aclMBean = await rbacService.getACLMBean()\r\n\r\n  if (!aclMBean) {\r\n    /*\r\n     * Some implementations of jolokia provision, eg. running with java -javaagent\r\n     * do not provide an acl mbean or implement server-side RBAC so need to skip\r\n     */\r\n    log.debug('No acl mbean available. RBAC decoration of JMX tree skipped')\r\n    return\r\n  }\r\n\r\n  const mbeans = tree.flatten()\r\n  const listMethod = await jolokiaService.getListMethod()\r\n  switch (listMethod) {\r\n    case JolokiaListMethod.OPTIMISED: {\r\n      log.debug('Process JMX tree: optimised list mode')\r\n      // Check if RBACDecorator has been already applied to the MBean tree at server side.\r\n      const decorated = Object.values(mbeans).every(node => node.isRBACDecorated())\r\n      if (decorated) {\r\n        log.debug('JMX tree already decorated with RBAC')\r\n        // The tree already has everything related to RBAC in place including icons\r\n      } else {\r\n        log.debug('JMX tree not decorated with RBAC, fetching RBAC info now')\r\n        await processRBAC(aclMBean, mbeans)\r\n      }\r\n      log.debug('Processed tree mbeans with RBAC:', mbeans)\r\n      break\r\n    }\r\n    case JolokiaListMethod.DEFAULT:\r\n    case JolokiaListMethod.UNDETERMINED:\r\n    default:\r\n      log.debug('Process JMX tree: general mode')\r\n      await processRBAC(aclMBean, mbeans)\r\n      log.debug('Processed tree mbeans:', mbeans)\r\n  }\r\n}\r\n\r\ntype BulkRequest = { [name: string]: string[] }\r\n\r\nasync function processRBAC(aclMBean: string, mbeans: Record<string, MBeanNode>) {\r\n  const requests: Request[] = []\r\n  const bulkRequest: BulkRequest = {}\r\n  // register canInvoke requests for each MBean and accumulate bulkRequest for all ops\r\n  Object.entries(mbeans).forEach(([mbeanName, node]) => {\r\n    addCanInvokeRequests(aclMBean, mbeanName, node, requests, bulkRequest)\r\n  })\r\n  // register the bulk request finally based on the accumulated bulkRequest\r\n  requests.push({\r\n    type: 'exec',\r\n    mbean: aclMBean,\r\n    operation: 'canInvoke(java.util.Map)',\r\n    arguments: [bulkRequest],\r\n  })\r\n  // send batch request\r\n  log.debug('Batch canInvoke request:', requests)\r\n  const responses = await jolokiaService.bulkRequest(requests)\r\n  log.debug('Batch canInvoke response:', responses)\r\n  responses.forEach(response => applyCanInvoke(mbeans, response))\r\n}\r\n\r\nfunction addCanInvokeRequests(\r\n  aclMBean: string,\r\n  mbeanName: string,\r\n  node: MBeanNode,\r\n  requests: Request[],\r\n  bulkRequest: BulkRequest,\r\n) {\r\n  // request for MBean\r\n  requests.push({\r\n    type: 'exec',\r\n    mbean: aclMBean,\r\n    operation: 'canInvoke(java.lang.String)',\r\n    arguments: [mbeanName],\r\n  })\r\n  // bulk request for MBean ops\r\n  if (node.mbean?.op) {\r\n    const opList: string[] = []\r\n    Object.entries(node.mbean.op).forEach(([opName, op]) => {\r\n      if (Array.isArray(op)) {\r\n        // overloaded ops\r\n        op.forEach(op => addOperation(node, opList, opName, op))\r\n      } else {\r\n        // single op\r\n        addOperation(node, opList, opName, op)\r\n      }\r\n    })\r\n    if (opList.length > 0) {\r\n      bulkRequest[mbeanName] = opList\r\n    }\r\n  }\r\n}\r\n\r\nfunction addOperation(node: MBeanNode, opList: string[], opName: string, op: OptimisedMBeanOperation) {\r\n  if (!node.mbean) {\r\n    return\r\n  }\r\n\r\n  const opString = operationToString(opName, op.args)\r\n\r\n  // enrich the mbean by indexing the full operation string so we can easily look it up later\r\n  if (!node.mbean.opByString) {\r\n    node.mbean.opByString = {}\r\n  }\r\n  node.mbean.opByString[opString] = op\r\n\r\n  opList.push(opString)\r\n}\r\n\r\ntype BulkResponse = { [name: string]: Operations }\r\ntype Operations = { [name: string]: Operation }\r\ntype Operation = { ObjectName: string; Method: string; CanInvoke: boolean }\r\n\r\nfunction applyCanInvoke(mbeans: Record<string, MBeanNode>, response: Response) {\r\n  if (response.request.type !== 'exec') {\r\n    return\r\n  }\r\n  const requestMBean = response.request.arguments?.[0]\r\n  if (isString(requestMBean)) {\r\n    // single mbean request\r\n    const mbean = mbeans[requestMBean]\r\n    // update canInvoke and icon on the mbean node\r\n    mbean?.updateCanInvoke(response.value as boolean)\r\n  } else {\r\n    // batch mbean ops request\r\n    const bulkResponse: BulkResponse = response.value as BulkResponse\r\n    log.debug('Bulk operations response:', bulkResponse)\r\n    // apply canInvoke to op and opByString on each mbean node\r\n    Object.entries(bulkResponse).forEach(([mbeanName, ops]) =>\r\n      Object.entries(ops).forEach(([opName, op]) => {\r\n        const mbean = mbeans[mbeanName]\r\n        const mbeanOp = mbean?.mbean?.opByString?.[opName]\r\n        if (mbeanOp) {\r\n          mbeanOp.canInvoke = op.CanInvoke\r\n        }\r\n      }),\r\n    )\r\n  }\r\n}\r\n","import { HawtioPlugin } from '@hawtiosrc/core'\r\nimport { treeProcessorRegistry } from '@hawtiosrc/plugins/shared'\r\nimport { rbacTreeProcessor } from './tree-processor'\r\n\r\nexport const rbac: HawtioPlugin = () => {\r\n  treeProcessorRegistry.add('rbac', rbacTreeProcessor)\r\n}\r\n","import { Divider, Nav, NavItem, NavList, PageGroup, PageSection, Title } from '@patternfly/react-core'\r\nimport React from 'react'\r\n\r\nimport { Navigate, NavLink, Route, Routes, useLocation } from 'react-router-dom'\r\nimport { Metrics } from './Metrics'\r\nimport { SysProps } from './SysProps'\r\nimport { Threads } from './Threads'\r\n\r\ntype NavItem = {\r\n  id: string\r\n  title: string\r\n  component: JSX.Element\r\n}\r\nexport const Runtime: React.FunctionComponent = () => {\r\n  const location = useLocation()\r\n\r\n  const navItems: NavItem[] = [\r\n    { id: 'sysprops', title: 'System properties', component: <SysProps /> },\r\n    { id: 'metrics', title: 'Metrics', component: <Metrics /> },\r\n    { id: 'threads', title: 'Threads', component: <Threads /> },\r\n  ]\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <PageSection variant='light'>\r\n        <Title headingLevel='h1'>Runtime</Title>\r\n      </PageSection>\r\n      <PageGroup>\r\n        <Divider />\r\n        <PageSection type='tabs' hasShadowBottom>\r\n          <Nav aria-label='Runtime Nav' variant='tertiary'>\r\n            <NavList>\r\n              {navItems.map(navItem => (\r\n                <NavItem key={navItem.id} isActive={location.pathname === `/runtime/${navItem.id}`}>\r\n                  <NavLink to={navItem.id}>{navItem.title}</NavLink>\r\n                </NavItem>\r\n              ))}\r\n            </NavList>\r\n          </Nav>\r\n        </PageSection>\r\n      </PageGroup>\r\n      <Divider />\r\n      <PageSection\r\n        variant={location.pathname.includes('metrics') ? 'default' : 'light'}\r\n        padding={{ default: location.pathname.includes('metrics') ? 'padding' : 'noPadding' }}\r\n      >\r\n        <Routes>\r\n          {navItems.map(navItem => (\r\n            <Route key={navItem.id} path={navItem.id} element={navItem.component} />\r\n          ))}\r\n          <Route path='/' element={<Navigate to='sysprops' />} />\r\n        </Routes>\r\n      </PageSection>\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import { ChartBullet } from '@patternfly/react-charts'\r\nimport { Card, CardBody, CardHeader, Grid, GridItem, Title } from '@patternfly/react-core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { runtimeService } from './runtime-service'\r\nimport { Metric } from './types'\r\n\r\nexport const Metrics: React.FunctionComponent = () => {\r\n  const [metrics, setMetrics] = useState<Record<string, Metric>>({})\r\n\r\n  useEffect(() => {\r\n    const registerMetricsRequests = () => {\r\n      let metricsRecord: Record<string, Metric> = {}\r\n      runtimeService.registerMetrics(metric => {\r\n        metricsRecord = { ...metricsRecord, [metric.name]: metric }\r\n        setMetrics(metricsRecord)\r\n      })\r\n    }\r\n\r\n    const readMetrics = async () => {\r\n      const metricsList = await runtimeService.loadMetrics()\r\n      let metricsRecord: Record<string, Metric> = {}\r\n      metricsList.forEach(metric => (metricsRecord = { ...metricsRecord, [metric.name]: metric }))\r\n      setMetrics(metricsRecord)\r\n    }\r\n\r\n    readMetrics()\r\n    registerMetricsRequests()\r\n    return () => runtimeService.unregisterAll()\r\n  }, [])\r\n\r\n  return (\r\n    <Grid hasGutter span={6}>\r\n      <GridItem>\r\n        <Card>\r\n          <CardHeader>\r\n            <Title headingLevel='h2'>System</Title>\r\n          </CardHeader>\r\n          <CardBody>\r\n            {Object.values(metrics)\r\n              .filter(m => m.type === 'System')\r\n              .map((metric, index) => {\r\n                return (\r\n                  <div key={index}>\r\n                    {metric.name} :\r\n                    <span>\r\n                      {metric.value} {metric.unit ?? ''}\r\n                      {metric.available && ' of ' + metric.available + ' ' + (metric.unit ?? '')}\r\n                    </span>\r\n                    {metric.chart && (\r\n                      <ChartBullet\r\n                        ariaDesc={metric.unit}\r\n                        ariaTitle={metric.value + ' ' + metric.unit}\r\n                        comparativeWarningMeasureData={[{ name: 'Warning', y: 0.9 * (metric.available as number) }]}\r\n                        constrainToVisibleArea\r\n                        maxDomain={{ y: metric.available as number }}\r\n                        name={metric.name}\r\n                        primarySegmentedMeasureData={[{ name: metric.unit, y: metric.value }]}\r\n                        width={600}\r\n                      />\r\n                    )}\r\n                  </div>\r\n                )\r\n              })}\r\n          </CardBody>\r\n        </Card>\r\n      </GridItem>\r\n      <GridItem>\r\n        <Card>\r\n          <CardHeader>\r\n            <Title headingLevel='h2'>JVM</Title>\r\n          </CardHeader>\r\n\r\n          <CardBody>\r\n            {Object.values(metrics)\r\n              .filter(m => m.type === 'JVM')\r\n              .map((metric, index) => {\r\n                return (\r\n                  <div key={index}>\r\n                    {metric.name} :\r\n                    <span>\r\n                      {metric.value} {metric.unit ?? ''}\r\n                      {metric.available && 'of' + metric.available + ' ' + (metric.unit ?? '')}\r\n                    </span>\r\n                  </div>\r\n                )\r\n              })}\r\n          </CardBody>\r\n        </Card>\r\n      </GridItem>\r\n    </Grid>\r\n  )\r\n}\r\n","import { jolokiaService } from '@hawtiosrc/plugins/shared'\r\nimport { Request, Response } from 'jolokia.js'\r\nimport { Metric, SystemProperty, Thread } from './types'\r\n\r\nclass RuntimeService {\r\n  handlers: number[] = []\r\n\r\n  convertMsToDaysHours(ms: number): string {\r\n    const seconds = Math.floor(ms / 1000)\r\n    const minutes = Math.floor(seconds / 60)\r\n    const hours = Math.floor(minutes / 60)\r\n    const days = Math.floor(hours / 24)\r\n\r\n    return `${days} days, ${hours % 24} hours`\r\n  }\r\n\r\n  async loadSystemProperties(): Promise<SystemProperty[]> {\r\n    const systemProperties: SystemProperty[] = []\r\n    const attr = await jolokiaService.readAttribute('java.lang:type=Runtime', 'SystemProperties')\r\n    for (const [k, v] of Object.entries(attr as object)) {\r\n      systemProperties.push({ key: k, value: v })\r\n    }\r\n    return systemProperties\r\n  }\r\n\r\n  async registerLoadThreadsRequest(callback: (threads: Thread[]) => void) {\r\n    const handler = await jolokiaService.register(\r\n      {\r\n        type: 'exec',\r\n        mbean: 'java.lang:type=Threading',\r\n        operation: 'dumpAllThreads(boolean,boolean)',\r\n        arguments: [true, true],\r\n      },\r\n      resp => {\r\n        const threads = resp.value as Thread[]\r\n        callback(threads)\r\n      },\r\n    )\r\n    this.handlers.push(handler)\r\n  }\r\n\r\n  loadThreads(): Promise<Thread[]> {\r\n    return jolokiaService.execute('java.lang:type=Threading', 'dumpAllThreads(boolean,boolean)', [\r\n      false,\r\n      false,\r\n    ]) as Promise<Thread[]>\r\n  }\r\n\r\n  async isThreadContentionMonitoringEnabled(): Promise<boolean> {\r\n    const res = await jolokiaService.readAttribute('java.lang:type=Threading', 'ThreadContentionMonitoringEnabled')\r\n    return res as boolean\r\n  }\r\n\r\n  async enableThreadContentionMonitoring(enabled: boolean) {\r\n    return await jolokiaService.writeAttribute('java.lang:type=Threading', 'ThreadContentionMonitoringEnabled', enabled)\r\n  }\r\n\r\n  async dumpThreads(): Promise<string> {\r\n    const threads = await jolokiaService.execute('java.lang:type=Threading', 'dumpAllThreads(boolean, boolean)', [\r\n      true,\r\n      true,\r\n    ])\r\n    const thrs: Thread[] = threads as Thread[]\r\n    let dumpedThreads = ''\r\n    thrs.forEach(thread => {\r\n      const name = thread.threadName\r\n      const daemon = thread.daemon ? ' daemon' : ''\r\n      let threadInfo = `\"${name}\" #${thread.threadId}${daemon} priority:${thread.priority} State:${thread.threadState}`\r\n      thread.stackTrace.forEach(st => {\r\n        const lineNo = st.lineNumber > 0 ? ':' + st.lineNumber : ''\r\n        const native = st.nativeMethod ? '(Native)' : ''\r\n        threadInfo += `\\n\\tat ${st.className}.${st.methodName}(${st.fileName}${lineNo})${native}`\r\n      })\r\n      dumpedThreads += (dumpedThreads === '' ? '' : '\\n\\n') + threadInfo\r\n    })\r\n    return dumpedThreads\r\n  }\r\n\r\n  getRegisterRequest(mbean: string, attribute?: string, args?: string[]): Request {\r\n    const request: Request = { type: 'read', mbean: mbean }\r\n    if (attribute) {\r\n      request.attribute = attribute\r\n    }\r\n    return request\r\n  }\r\n\r\n  responseCallback(response: Response, callback: (metric: Metric) => void) {\r\n    const req = response.request as { type: 'read'; mbean: string; attribute?: string | string[]; path?: string }\r\n    switch (req.mbean) {\r\n      case 'java.lang:type=Threading': {\r\n        const threadCount = response.value as number\r\n        callback({ type: 'JVM', name: 'Thread Count', value: threadCount })\r\n        break\r\n      }\r\n      case 'java.lang:type=Memory': {\r\n        const mb = response.value as { used: number }\r\n        const heapUsed = this.formatBytes(mb.used)\r\n        callback({\r\n          type: 'JVM',\r\n          name: 'Heap Used',\r\n          value: heapUsed[0] ?? '',\r\n          unit: heapUsed[1] as string,\r\n        })\r\n        break\r\n      }\r\n      case 'java.lang:type=OperatingSystem': {\r\n        const osMetrics = response.value as {\r\n          SystemCpuLoad: number\r\n          SystemLoadAverage: number\r\n          FreePhysicalMemorySize: number\r\n          TotalPhysicalMemorySize: number\r\n          AvailableProcessors: number\r\n          OpenFileDescriptorCount: number\r\n          MaxFileDescriptorCount: number\r\n        }\r\n        const cpuLoad = osMetrics.SystemCpuLoad * 100\r\n        const loadAverage = osMetrics.SystemLoadAverage\r\n        const memFree = this.formatBytes(osMetrics.FreePhysicalMemorySize)\r\n        const memTotal = this.formatBytes(osMetrics.TotalPhysicalMemorySize)\r\n        callback({ type: 'System', name: 'Available Processors', value: String(osMetrics.AvailableProcessors) })\r\n        callback({ type: 'System', name: 'CPU Load', value: String(cpuLoad), unit: '%', available: 100, chart: true })\r\n        callback({ type: 'System', name: 'Load Average', value: String(loadAverage) })\r\n        callback({\r\n          type: 'System',\r\n          name: 'Memory Used',\r\n          value: memFree[0] as number,\r\n          unit: memFree[1] as string,\r\n          available: memTotal[0] as string,\r\n          chart: true,\r\n        })\r\n\r\n        callback({\r\n          type: 'System',\r\n          name: 'File Descriptors Used',\r\n          value: osMetrics.OpenFileDescriptorCount as number,\r\n          available: osMetrics.MaxFileDescriptorCount as number,\r\n        })\r\n        break\r\n      }\r\n      case 'java.lang:type=ClassLoading': {\r\n        const loadedClassCount = response.value as number\r\n        callback({ type: 'JVM', name: 'Classes Loaded', value: loadedClassCount })\r\n        break\r\n      }\r\n      case 'java.lang:type=Runtime': {\r\n        const runtimeMetrics = response.value as {\r\n          StartTime: number\r\n          Uptime: number\r\n        }\r\n        callback({ type: 'JVM', name: 'Start time', value: new Date(runtimeMetrics.StartTime).toLocaleString() })\r\n        callback({ type: 'JVM', name: 'Uptime', value: this.convertMsToDaysHours(runtimeMetrics.Uptime) })\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  getJolokiaRequests(): Request[] {\r\n    const requests: Request[] = []\r\n    requests.push(this.getRegisterRequest('java.lang:type=Threading', 'ThreadCount'))\r\n    requests.push(this.getRegisterRequest('java.lang:type=Memory', 'HeapMemoryUsage'))\r\n    requests.push(this.getRegisterRequest('java.lang:type=Runtime'))\r\n    requests.push(this.getRegisterRequest('java.lang:type=OperatingSystem'))\r\n    requests.push(this.getRegisterRequest('java.lang:type=ClassLoading', 'LoadedClassCount'))\r\n    return requests\r\n  }\r\n\r\n  async registerMetrics(callback: (metrics: Metric) => void) {\r\n    for (const request of this.getJolokiaRequests()) {\r\n      const handler = await jolokiaService.register(request, resp => {\r\n        this.responseCallback(resp, callback)\r\n      })\r\n      this.handlers.push(handler)\r\n    }\r\n  }\r\n\r\n  async loadMetrics(): Promise<Metric[]> {\r\n    const metrics: Metric[] = []\r\n\r\n    const responses = await jolokiaService.bulkRequest(this.getJolokiaRequests())\r\n    responses.forEach(resp => {\r\n      this.responseCallback(resp, metric => metrics.push(metric))\r\n    })\r\n\r\n    return metrics\r\n  }\r\n\r\n  formatBytes(bytes: number): (number | string)[] {\r\n    if (bytes === 0) {\r\n      return [0, 'Bytes']\r\n    }\r\n    const kilobytes = 1024\r\n    const decimalPlaces = 2\r\n    const units = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\r\n    const i = Math.floor(Math.log(bytes) / Math.log(kilobytes))\r\n    const value = parseFloat((bytes / Math.pow(kilobytes, i)).toFixed(decimalPlaces))\r\n    const unit = units[i]\r\n    return [value, unit ?? '']\r\n  }\r\n\r\n  unregisterAll() {\r\n    this.handlers.forEach(handle => jolokiaService.unregister(handle))\r\n    this.handlers = []\r\n  }\r\n}\r\n\r\nexport const runtimeService = new RuntimeService()\r\n","import { objectSorter } from '@hawtiosrc/util/objects'\r\nimport {\r\n  Bullseye,\r\n  Dropdown,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n  EmptyState,\r\n  EmptyStateBody,\r\n  EmptyStateIcon,\r\n  FormGroup,\r\n  Pagination,\r\n  Panel,\r\n  PanelHeader,\r\n  PanelMain,\r\n  PanelMainBody,\r\n  SearchInput,\r\n  Toolbar,\r\n  ToolbarContent,\r\n  ToolbarFilter,\r\n  ToolbarGroup,\r\n  ToolbarItem,\r\n} from '@patternfly/react-core'\r\nimport { SearchIcon } from '@patternfly/react-icons'\r\nimport { TableComposable, Tbody, Td, Th, ThProps, Thead, Tr } from '@patternfly/react-table'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { runtimeService } from './runtime-service'\r\nimport { SystemProperty } from './types'\r\n\r\nexport const SysProps: React.FunctionComponent = () => {\r\n  const [properties, setProperties] = useState<{ key: string; value: string }[]>([])\r\n  const [filteredProperties, setFilteredProperties] = useState<SystemProperty[]>([])\r\n  const [page, setPage] = useState(1)\r\n  const [perPage, setPerPage] = useState(20)\r\n  const [searchTerm, setSearchTerm] = useState('')\r\n  const [filters, setFilters] = useState<string[]>([])\r\n  const [filteredAttribute, setFilteredAttribute] = useState('name')\r\n  const [sortIndex, setSortIndex] = React.useState<number>(-1)\r\n  const [sortDirection, setSortDirection] = React.useState<'asc' | 'desc'>('asc')\r\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false)\r\n\r\n  useEffect(() => {\r\n    runtimeService.loadSystemProperties().then(props => {\r\n      setProperties(props)\r\n      setFilteredProperties(props)\r\n    })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    //filter with findTerm\r\n    let filtered: SystemProperty[] = [...properties]\r\n\r\n    //add current search word to filters and filter\r\n    ;[...filters, `${filteredAttribute}:${searchTerm}`].forEach(value => {\r\n      const attr = value.split(':')[0] ?? ''\r\n      const searchTerm = value.split(':')[1] ?? ''\r\n      filtered = filtered.filter(prop =>\r\n        (attr === 'name' ? prop.key : prop.value).toLowerCase().includes(searchTerm.toLowerCase()),\r\n      )\r\n    })\r\n\r\n    setPage(1)\r\n    setFilteredProperties([...filtered])\r\n  }, [searchTerm, properties, filters, filteredAttribute])\r\n\r\n  const onDeleteFilter = (filter: string) => {\r\n    if (`${filteredAttribute}:${searchTerm}` === filter) {\r\n      setSearchTerm('')\r\n    } else {\r\n      const newFilters = filters.filter(f => f !== filter)\r\n      setFilters(newFilters)\r\n    }\r\n  }\r\n\r\n  const addToFilters = () => {\r\n    if (searchTerm !== '') {\r\n      setFilters([...filters, `${filteredAttribute}:${searchTerm}`])\r\n      setSearchTerm('')\r\n    }\r\n  }\r\n  const clearFilters = () => {\r\n    setFilters([])\r\n    setSearchTerm('')\r\n  }\r\n\r\n  const PropsPagination = () => {\r\n    return (\r\n      <Pagination\r\n        itemCount={filteredProperties.length}\r\n        page={page}\r\n        perPage={perPage}\r\n        onSetPage={(_evt, value) => setPage(value)}\r\n        onPerPageSelect={(_evt, value) => {\r\n          setPerPage(value)\r\n          setPage(1)\r\n        }}\r\n        variant='top'\r\n      />\r\n    )\r\n  }\r\n\r\n  const getPageProperties = (): SystemProperty[] => {\r\n    const start = (page - 1) * perPage\r\n    const end = start + perPage\r\n    return filteredProperties.slice(start, end)\r\n  }\r\n\r\n  const attributes = [\r\n    { key: 'name', value: 'Name' },\r\n    { key: 'value', value: 'Value' },\r\n  ]\r\n\r\n  const dropdownItems = attributes.map(a => (\r\n    <DropdownItem\r\n      onClick={() => {\r\n        setFilteredAttribute(a.key)\r\n      }}\r\n      key={a.key}\r\n    >\r\n      {a.value}\r\n    </DropdownItem>\r\n  ))\r\n\r\n  const getSortParams = (sortColumn: number): ThProps['sort'] => ({\r\n    sortBy: {\r\n      index: sortIndex,\r\n      direction: sortDirection,\r\n      defaultDirection: 'asc', // starting sort direction when first sorting a column. Defaults to 'asc'\r\n    },\r\n    onSort: (_event, index, direction) => {\r\n      setSortIndex(index)\r\n      setSortDirection(direction)\r\n    },\r\n    columnIndex: sortColumn,\r\n  })\r\n\r\n  const sortProperties = (): SystemProperty[] => {\r\n    let sortedProps = filteredProperties\r\n    if (sortIndex >= 0) {\r\n      sortedProps = filteredProperties.sort((a, b) => {\r\n        const aValue = sortIndex === 1 ? a.value : a.key\r\n        const bValue = sortIndex === 1 ? b.value : b.key\r\n        return objectSorter(aValue, bValue, sortDirection === 'desc')\r\n      })\r\n    }\r\n\r\n    return sortedProps\r\n  }\r\n\r\n  const tableToolbar = (\r\n    <Toolbar clearAllFilters={clearFilters}>\r\n      <ToolbarContent>\r\n        <ToolbarGroup>\r\n          <Dropdown\r\n            data-testid='attribute-select'\r\n            onSelect={() => {\r\n              setIsDropdownOpen(false)\r\n              addToFilters()\r\n            }}\r\n            defaultValue='name'\r\n            toggle={\r\n              <DropdownToggle data-testid='attribute-select-toggle' id='toggle-basic' onToggle={setIsDropdownOpen}>\r\n                {attributes.find(att => att.key === filteredAttribute)?.value}\r\n              </DropdownToggle>\r\n            }\r\n            isOpen={isDropdownOpen}\r\n            dropdownItems={dropdownItems}\r\n          />\r\n          <ToolbarFilter\r\n            chips={searchTerm !== '' ? [...filters, `${filteredAttribute}:${searchTerm}`] : filters}\r\n            deleteChip={(_e, filter) => onDeleteFilter(filter as string)}\r\n            deleteChipGroup={clearFilters}\r\n            categoryName='Filters'\r\n          >\r\n            <SearchInput\r\n              type='text'\r\n              data-testid='filter-input'\r\n              id='search-input'\r\n              placeholder={'Filter by ' + filteredAttribute}\r\n              value={searchTerm}\r\n              onChange={(_event, value) => setSearchTerm(value)}\r\n              aria-label='Search input'\r\n            />\r\n          </ToolbarFilter>\r\n        </ToolbarGroup>\r\n\r\n        <ToolbarItem variant='pagination'>\r\n          <PropsPagination />\r\n        </ToolbarItem>\r\n      </ToolbarContent>\r\n    </Toolbar>\r\n  )\r\n\r\n  return (\r\n    <Panel>\r\n      <PanelHeader>{tableToolbar}</PanelHeader>\r\n      <PanelMain>\r\n        <PanelMainBody>\r\n          {sortProperties().length > 0 && (\r\n            <FormGroup>\r\n              <TableComposable aria-label='Message Table' variant='compact' height='80vh' isStriped isStickyHeader>\r\n                <Thead>\r\n                  <Tr>\r\n                    <Th data-testid={'name-header'} sort={getSortParams(0)}>\r\n                      Property Name\r\n                    </Th>\r\n                    <Th data-testid={'value-header'} sort={getSortParams(1)}>\r\n                      Property Value\r\n                    </Th>\r\n                  </Tr>\r\n                </Thead>\r\n                <Tbody>\r\n                  {getPageProperties().map((prop, index) => {\r\n                    return (\r\n                      <Tr key={'row' + index} data-testid={'row' + index}>\r\n                        <Td style={{ width: '20%' }}>{prop.key}</Td>\r\n                        <Td style={{ flex: 3 }}>{prop.value}</Td>\r\n                      </Tr>\r\n                    )\r\n                  })}\r\n                </Tbody>\r\n              </TableComposable>\r\n            </FormGroup>\r\n          )}\r\n          {filteredProperties.length === 0 && (\r\n            <Bullseye>\r\n              <EmptyState>\r\n                <EmptyStateIcon icon={SearchIcon} />\r\n                <EmptyStateBody>No results found.</EmptyStateBody>\r\n              </EmptyState>\r\n            </Bullseye>\r\n          )}\r\n        </PanelMainBody>\r\n      </PanelMain>\r\n    </Panel>\r\n  )\r\n}\r\n","import {\r\n  Bullseye,\r\n  Button,\r\n  CodeBlock,\r\n  CodeBlockCode,\r\n  Dropdown,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n  EmptyState,\r\n  EmptyStateBody,\r\n  EmptyStateIcon,\r\n  FormGroup,\r\n  Modal,\r\n  Pagination,\r\n  Panel,\r\n  PanelHeader,\r\n  PanelMain,\r\n  PanelMainBody,\r\n  SearchInput,\r\n  Toolbar,\r\n  ToolbarContent,\r\n  ToolbarFilter,\r\n  ToolbarGroup,\r\n  ToolbarItem,\r\n} from '@patternfly/react-core'\r\nimport React, { useEffect, useState } from 'react'\r\n\r\nimport { Thread } from './types'\r\nimport { objectSorter } from '@hawtiosrc/util/objects'\r\nimport { SearchIcon } from '@patternfly/react-icons'\r\nimport { TableComposable, Tbody, Td, Th, Thead, ThProps, Tr } from '@patternfly/react-table'\r\nimport { runtimeService } from './runtime-service'\r\nimport { ThreadInfoModal, ThreadState } from './ThreadInfoModal'\r\n\r\nconst ThreadsDumpModal: React.FunctionComponent<{\r\n  isOpen: boolean\r\n  setIsOpen: (opened: boolean) => void\r\n}> = ({ isOpen, setIsOpen }) => {\r\n  const [threadsDump, setThreadsDump] = useState('')\r\n\r\n  useEffect(() => {\r\n    const readThreadDump = async () => {\r\n      const threadsDump = await runtimeService.dumpThreads()\r\n      setThreadsDump(threadsDump)\r\n    }\r\n    if (isOpen) {\r\n      readThreadDump()\r\n    }\r\n  }, [isOpen])\r\n\r\n  return (\r\n    <Modal\r\n      bodyAriaLabel='Thread Dump'\r\n      tabIndex={0}\r\n      isOpen={isOpen}\r\n      variant='large'\r\n      title='Thread Dump'\r\n      onClose={() => setIsOpen(false)}\r\n    >\r\n      <CodeBlock>\r\n        <CodeBlockCode>{threadsDump}</CodeBlockCode>\r\n      </CodeBlock>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport const Threads: React.FunctionComponent = () => {\r\n  const [threads, setThreads] = useState<Thread[]>([])\r\n  const [filteredThreads, setFilteredThreads] = useState<Thread[]>([])\r\n\r\n  const [page, setPage] = useState(1)\r\n  const [perPage, setPerPage] = useState(20)\r\n  const [searchTerm, setSearchTerm] = useState('')\r\n  const [filters, setFilters] = useState<string[]>([])\r\n  const [attributeMenuItem, setAttributeMenuItem] = useState('Name')\r\n  const [sortIndex, setSortIndex] = React.useState<number>(-1)\r\n  const [sortDirection, setSortDirection] = React.useState<'asc' | 'desc'>('asc')\r\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false)\r\n  const [isThreadsDumpModalOpen, setIsThreadsDumpModalOpen] = useState(false)\r\n  const [isThreadDetailsOpen, setIsThreadDetailsOpen] = useState(false)\r\n  const [currentThread, setCurrentThread] = useState<Thread>()\r\n  const [threadConnectionMonitoring, setThreadConnectionMonitoring] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const readThreads = async () => {\r\n      const threads = await runtimeService.loadThreads()\r\n      setThreads(threads)\r\n      setFilteredThreads(threads)\r\n      setThreadConnectionMonitoring(await runtimeService.isThreadContentionMonitoringEnabled())\r\n      runtimeService.registerLoadThreadsRequest(threads => {\r\n        setThreads(threads)\r\n        setFilteredThreads(threads)\r\n      })\r\n    }\r\n    readThreads()\r\n    return () => runtimeService.unregisterAll()\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    let filtered: Thread[] = [...threads]\r\n\r\n    //add current searchTerm and filter\r\n    ;[...filters, `${attributeMenuItem}:${searchTerm}`].forEach(value => {\r\n      const attr = value.split(':')[0] ?? ''\r\n      const searchTerm = value.split(':')[1] ?? ''\r\n      filtered = filtered.filter(thread =>\r\n        (attr === 'Name' ? thread.threadName : String(thread.threadState))\r\n          .toLowerCase()\r\n          .includes(searchTerm.toLowerCase()),\r\n      )\r\n    })\r\n\r\n    setPage(1)\r\n    setFilteredThreads([...filtered])\r\n  }, [threads, searchTerm, attributeMenuItem, filters])\r\n\r\n  const onDeleteFilter = (filter: string) => {\r\n    if (`${attributeMenuItem}:${searchTerm}` === filter) {\r\n      setSearchTerm('')\r\n    } else {\r\n      const newFilters = filters.filter(f => f !== filter)\r\n      setFilters(newFilters)\r\n    }\r\n  }\r\n\r\n  const addToFilters = () => {\r\n    if (searchTerm !== '') {\r\n      setFilters([...filters, `${attributeMenuItem}:${searchTerm}`])\r\n      setSearchTerm('')\r\n    }\r\n  }\r\n\r\n  const clearFilters = () => {\r\n    setFilters([])\r\n    setSearchTerm('')\r\n  }\r\n\r\n  const PropsPagination = () => {\r\n    return (\r\n      <Pagination\r\n        itemCount={filteredThreads.length}\r\n        page={page}\r\n        perPage={perPage}\r\n        onSetPage={(_evt, value) => setPage(value)}\r\n        onPerPageSelect={(_evt, value) => {\r\n          setPerPage(value)\r\n          setPage(1)\r\n        }}\r\n        variant='top'\r\n      />\r\n    )\r\n  }\r\n\r\n  const getThreadsPage = (): Thread[] => {\r\n    const start = (page - 1) * perPage\r\n    const end = start + perPage\r\n    return filteredThreads.slice(start, end)\r\n  }\r\n\r\n  const tableColumns = [\r\n    { key: 'threadId', value: 'ID' },\r\n    { key: 'threadState', value: 'State' },\r\n    { key: 'threadName', value: 'Name' },\r\n    { key: 'waitedTime', value: 'Waited Time' },\r\n    { key: 'blockedTime', value: 'Blocked Time' },\r\n    { key: 'inNative', value: 'Native' },\r\n    { key: 'suspended', value: 'Suspended' },\r\n  ]\r\n\r\n  const dropdownItems = [\r\n    <DropdownItem\r\n      onClick={() => {\r\n        setAttributeMenuItem('Name')\r\n      }}\r\n      key={'name-key'}\r\n    >\r\n      Name\r\n    </DropdownItem>,\r\n    <DropdownItem\r\n      onClick={() => {\r\n        setAttributeMenuItem('State')\r\n      }}\r\n      key={'state'}\r\n    >\r\n      State\r\n    </DropdownItem>,\r\n  ]\r\n\r\n  const getIndexedThread = (thread: Thread): (string | number)[] => {\r\n    const { suspended, blockedTime, inNative, threadId, threadName, threadState, waitedTime } = thread\r\n    return [threadId, threadState, threadName, waitedTime, blockedTime, String(inNative), String(suspended)]\r\n  }\r\n\r\n  const getSortParams = (sortColumn: number): ThProps['sort'] => ({\r\n    sortBy: {\r\n      index: sortIndex,\r\n      direction: sortDirection,\r\n      defaultDirection: 'asc', // starting sort direction when first sorting a column. Defaults to 'asc'\r\n    },\r\n    onSort: (_event, index, direction) => {\r\n      setSortIndex(index)\r\n      setSortDirection(direction)\r\n    },\r\n    columnIndex: sortColumn,\r\n  })\r\n\r\n  const sortThreads = (): Thread[] => {\r\n    let sortedThreads = filteredThreads\r\n    if (sortIndex >= 0) {\r\n      sortedThreads = filteredThreads.sort((a, b) => {\r\n        const aValue = getIndexedThread(a)[sortIndex]\r\n        const bValue = getIndexedThread(b)[sortIndex]\r\n        return objectSorter(aValue, bValue, sortDirection === 'desc')\r\n      })\r\n    }\r\n    return sortedThreads\r\n  }\r\n\r\n  const onThreadDumpClick = () => {\r\n    setIsThreadsDumpModalOpen(true)\r\n  }\r\n\r\n  const handleConnectionThreadMonitoring = async () => {\r\n    await runtimeService.enableThreadContentionMonitoring(!threadConnectionMonitoring)\r\n    setThreadConnectionMonitoring(!threadConnectionMonitoring)\r\n  }\r\n\r\n  const tableToolbar = (\r\n    <Toolbar clearAllFilters={clearFilters}>\r\n      <ToolbarContent>\r\n        <ToolbarGroup>\r\n          <Dropdown\r\n            data-testid='attribute-select'\r\n            onSelect={() => {\r\n              setIsDropdownOpen(false)\r\n              addToFilters()\r\n            }}\r\n            defaultValue='Name'\r\n            toggle={\r\n              <DropdownToggle data-testid='attribute-select-toggle' id='toggle-basic' onToggle={setIsDropdownOpen}>\r\n                {tableColumns.find(att => att.value === attributeMenuItem)?.value}\r\n              </DropdownToggle>\r\n            }\r\n            isOpen={isDropdownOpen}\r\n            dropdownItems={dropdownItems}\r\n          />\r\n          <ToolbarFilter\r\n            chips={searchTerm !== '' ? [...filters, `${attributeMenuItem}:${searchTerm}`] : filters}\r\n            deleteChip={(_e, filter) => onDeleteFilter(filter as string)}\r\n            deleteChipGroup={clearFilters}\r\n            categoryName='Filters'\r\n          >\r\n            <SearchInput\r\n              type='text'\r\n              data-testid='filter-input'\r\n              id='search-input'\r\n              placeholder='Search...'\r\n              value={searchTerm}\r\n              onChange={(_event, value) => setSearchTerm(value)}\r\n              aria-label='Search input'\r\n            />\r\n          </ToolbarFilter>\r\n        </ToolbarGroup>\r\n\r\n        <ToolbarGroup>\r\n          <ToolbarItem>\r\n            <Button variant='primary' onClick={handleConnectionThreadMonitoring} isSmall>\r\n              {threadConnectionMonitoring ? 'Disable' : 'Enable'} connection thread monitoring\r\n            </Button>\r\n          </ToolbarItem>\r\n          <ToolbarItem>\r\n            <Button variant='secondary' onClick={onThreadDumpClick} isSmall>\r\n              Thread dump\r\n            </Button>\r\n          </ToolbarItem>\r\n        </ToolbarGroup>\r\n\r\n        <ToolbarItem variant='pagination'>\r\n          <PropsPagination />\r\n        </ToolbarItem>\r\n      </ToolbarContent>\r\n    </Toolbar>\r\n  )\r\n\r\n  return (\r\n    <Panel>\r\n      <ThreadsDumpModal isOpen={isThreadsDumpModalOpen} setIsOpen={setIsThreadsDumpModalOpen} />\r\n      <ThreadInfoModal isOpen={isThreadDetailsOpen} thread={currentThread} setIsOpen={setIsThreadDetailsOpen} />\r\n      <PanelHeader>{tableToolbar}</PanelHeader>\r\n      <PanelMain>\r\n        <PanelMainBody>\r\n          {sortThreads().length > 0 && (\r\n            <FormGroup>\r\n              <TableComposable aria-label='Message Table' variant='compact' height='80vh' isStriped isStickyHeader>\r\n                <Thead>\r\n                  <Tr>\r\n                    {tableColumns.map((att, index) => (\r\n                      <Th key={'th-key' + index} data-testid={'id-' + att.key} sort={getSortParams(index)}>\r\n                        {att.value}\r\n                      </Th>\r\n                    ))}\r\n                    <Th></Th>\r\n                  </Tr>\r\n                </Thead>\r\n                <Tbody>\r\n                  {getThreadsPage().map((thread, index) => {\r\n                    return (\r\n                      <Tr key={'row' + index} data-testid={'row' + index}>\r\n                        {tableColumns.map((att, column) => (\r\n                          <Td key={'col' + index + '-' + column}>\r\n                            {att.key === 'threadState' ? (\r\n                              <ThreadState state={getIndexedThread(thread)[column] as string} />\r\n                            ) : (\r\n                              getIndexedThread(thread)[column]\r\n                            )}\r\n                          </Td>\r\n                        ))}\r\n                        <Td>\r\n                          <Button\r\n                            onClick={_event => {\r\n                              setIsThreadDetailsOpen(true)\r\n                              setCurrentThread(thread)\r\n                            }}\r\n                            isSmall\r\n                            variant='link'\r\n                          >\r\n                            Details\r\n                          </Button>\r\n                        </Td>\r\n                      </Tr>\r\n                    )\r\n                  })}\r\n                </Tbody>\r\n              </TableComposable>\r\n            </FormGroup>\r\n          )}\r\n          {filteredThreads.length === 0 && (\r\n            <Bullseye>\r\n              <EmptyState>\r\n                <EmptyStateIcon icon={SearchIcon} />\r\n                <EmptyStateBody>No results found.</EmptyStateBody>\r\n              </EmptyState>\r\n            </Bullseye>\r\n          )}\r\n        </PanelMainBody>\r\n      </PanelMain>\r\n    </Panel>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Thread } from '@hawtiosrc/plugins/runtime/types'\r\nimport { Grid, GridItem, Label, Modal, ModalVariant } from '@patternfly/react-core'\r\n\r\nexport const ThreadState: React.FunctionComponent<{ state: string }> = ({ state }) => {\r\n  switch (state) {\r\n    case 'RUNNABLE':\r\n      return <Label color='green'>{state}</Label>\r\n    case 'WAITING':\r\n    case 'TIMED_WAITING':\r\n      return <Label color='orange'>{state}</Label>\r\n    default:\r\n      return <Label color='grey'>{state}</Label>\r\n  }\r\n}\r\nexport const ThreadInfoModal: React.FunctionComponent<{\r\n  thread?: Thread\r\n  isOpen: boolean\r\n  setIsOpen: (open: boolean) => void\r\n}> = ({ thread, isOpen, setIsOpen }) => {\r\n  if (!thread) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      bodyAriaLabel='Thread Details'\r\n      tabIndex={0}\r\n      variant={ModalVariant.medium}\r\n      title='Thread details'\r\n      isOpen={isOpen}\r\n      onClose={() => setIsOpen(false)}\r\n    >\r\n      <Grid hasGutter>\r\n        <CustomItem itemName='ID' itemValue={thread.threadId} />\r\n        <CustomItem itemName='State' itemValue={thread.threadState} />\r\n        <CustomItem itemName='Name' itemValue={thread.threadName} />\r\n        <CustomItem itemName='Native' itemValue={thread.inNative ? 'Yes' : 'No'} />\r\n        <CustomItem itemName='Suspended' itemValue={thread.suspended ? 'Yes' : 'No'} />\r\n        <CustomItem itemName='Waited Count' itemValue={thread.waitedCount} />\r\n        <CustomItem itemName='Waited Time' itemValue={thread.waitedTime} />\r\n        <CustomItem itemName='Blocked Count' itemValue={thread.blockedCount} />\r\n        <CustomItem itemName='Blocked Time' itemValue={thread.blockedTime} />\r\n\r\n        {thread.lockInfo && (\r\n          <>\r\n            <CustomItem itemName='Lock Name' itemValue={thread.lockInfo.lockName} />\r\n            <CustomItem itemName='Lock Class Name' itemValue={thread.lockInfo.className} />\r\n            <CustomItem itemName='Identity Hash Code' itemValue={thread.lockInfo.identityHashCode} />\r\n          </>\r\n        )}\r\n\r\n        <CustomItem itemName='Waiting for lock owned by' itemValue={thread.lockOwnerId} />\r\n        {thread.lockedSynchronizers && thread.lockedSynchronizers.length > 0 && (\r\n          <>\r\n            <GridItem span={3}>\r\n              <i>Locked Synchronizers</i>\r\n            </GridItem>\r\n            <GridItem span={9}>\r\n              <>\r\n                {thread.lockedSynchronizers.map(synchronizer => (\r\n                  <>\r\n                    <span title='Class Name'>{synchronizer.className}</span>\r\n                    <span title='Identity Hash Code'>{synchronizer.identityHashCode}</span>\r\n                  </>\r\n                ))}\r\n              </>\r\n            </GridItem>\r\n          </>\r\n        )}\r\n\r\n        {thread.lockedMonitors && thread.lockedMonitors.length > 0 && (\r\n          <>\r\n            <GridItem span={3}>\r\n              <i>Locked Monitors</i>\r\n            </GridItem>\r\n            <GridItem span={9}>\r\n              <ol>\r\n                {thread.lockedMonitors.map((monitor, index) => (\r\n                  <li key={'monitor-key-' + index}>\r\n                    Frame: <strong>{monitor.lockedStackDepth}</strong>\r\n                    <span style={{ color: '#4cb140' }}>{monitor.lockedStackFrame.className}</span>\r\n                    <strong>.</strong>\r\n                    <strong>\r\n                      <span style={{ color: '#519de9' }}>{monitor.lockedStackFrame.methodName}</span>\r\n                    </strong>\r\n                    ({monitor.lockedStackFrame.fileName}\r\n                    {monitor.lockedStackFrame.lineNumber > 0 && <span>:{monitor.lockedStackFrame.lineNumber}</span>}\r\n                    {monitor.lockedStackFrame.nativeMethod && <span style={{ color: 'orange' }}>(Native)</span>}\r\n                  </li>\r\n                ))}\r\n              </ol>\r\n            </GridItem>\r\n          </>\r\n        )}\r\n        {thread.stackTrace.length > 0 && (\r\n          <>\r\n            <GridItem span={2}>\r\n              <i>Stack Trace</i>\r\n            </GridItem>\r\n            <GridItem span={10}>\r\n              <ol>\r\n                {thread.stackTrace.map((frame, index) => (\r\n                  <li key={'stacktrace-' + index}>\r\n                    <span style={{ color: '#4cb140' }}>{frame.className}</span>\r\n                    <strong>.</strong>\r\n                    <strong>\r\n                      <span style={{ color: '#519de9' }}>{frame.methodName}</span>\r\n                    </strong>\r\n                    {'('}\r\n                    {frame.fileName} {frame.lineNumber > 0 && <span>:{frame.lineNumber}</span>}\r\n                    {')'}\r\n                    {frame.nativeMethod && <span style={{ color: 'orange' }}>(Native)</span>}\r\n                  </li>\r\n                ))}\r\n              </ol>\r\n            </GridItem>\r\n          </>\r\n        )}\r\n      </Grid>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nconst CustomItem: React.FunctionComponent<{\r\n  itemName: string\r\n  itemValue: string | number | null\r\n}> = ({ itemName, itemValue }) => {\r\n  if (!itemValue) {\r\n    return null\r\n  }\r\n\r\n  if (typeof itemValue === 'number' && itemValue < 0) {\r\n    return null\r\n  }\r\n\r\n  if (typeof itemValue === 'string' && itemValue === '') {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <GridItem span={3}>\r\n        <i>{itemName}</i>\r\n      </GridItem>\r\n      <GridItem span={9}> {itemName === 'State' ? <ThreadState state={itemValue as string} /> : itemValue}</GridItem>\r\n    </>\r\n  )\r\n}\r\n","import { Logger } from '@hawtiosrc/core/logging'\r\n\r\nexport const pluginId = 'runtime'\r\nexport const pluginName = 'hawtio-runtime'\r\nexport const pluginPath = '/runtime'\r\nexport const log = Logger.get(pluginName)\r\n","## Runtime\r\n\r\nThe Runtime plugin displays information about the JVM runtime.\r\n\r\n### System Properties\r\n\r\nDisplays a filterable and sortable list of system properties.\r\n\r\n### Metrics\r\n\r\nDisplays runtime metrics from the JVM, such as memory, CPU, garbage collection and more.\r\n\r\n### Threads\r\n\r\nInspects the threads running in the JVM.\r\n","import { hawtio, HawtioPlugin } from '@hawtiosrc/core'\r\nimport { Runtime } from './Runtime'\r\nimport { pluginId, pluginPath } from './globals'\r\nimport { workspace } from '@hawtiosrc/plugins'\r\nimport { helpRegistry } from '@hawtiosrc/help'\r\nimport help from './help.md'\r\n\r\nconst order = 16\r\n\r\nexport const runtime: HawtioPlugin = () => {\r\n  hawtio.addPlugin({\r\n    id: pluginId,\r\n    title: 'Runtime',\r\n    path: pluginPath,\r\n    order,\r\n    component: Runtime,\r\n    isActive: async () => workspace.hasMBeans(),\r\n  })\r\n  helpRegistry.add(pluginId, 'Runtime', help, order)\r\n}\r\n","import { Divider, Nav, NavItem, NavList, PageSection, PageSectionVariants, Title } from '@patternfly/react-core'\r\nimport React, { useEffect, useState } from 'react'\r\n\r\nimport { Navigate, NavLink, Route, Routes, useLocation } from 'react-router-dom'\r\nimport { Health } from './Health'\r\nimport { Info } from './Info'\r\nimport { Loggers } from './Loggers'\r\nimport { TraceView } from './TraceView'\r\nimport { springbootService } from './springboot-service'\r\n\r\ntype NavItem = {\r\n  id: string\r\n  title: string\r\n  component: JSX.Element\r\n}\r\nexport const SpringBoot: React.FunctionComponent = () => {\r\n  const location = useLocation()\r\n  const [navItems, setNavItems] = useState<NavItem[]>([])\r\n\r\n  useEffect(() => {\r\n    const initNavItems = async () => {\r\n      const nav: NavItem[] = []\r\n      if (await springbootService.hasEndpoint('Health')) {\r\n        nav.push({ id: 'health', title: 'Health', component: <Health /> })\r\n      }\r\n\r\n      if (await springbootService.hasEndpoint('Info')) {\r\n        nav.push({ id: 'info', title: 'Info', component: <Info /> })\r\n      }\r\n\r\n      if (await springbootService.hasEndpoint('Loggers')) {\r\n        nav.push({ id: 'loggers', title: 'Loggers', component: <Loggers /> })\r\n      }\r\n\r\n      if (await springbootService.hasEndpoint('Httptrace')) {\r\n        springbootService.setIsSpringBoot3(false)\r\n        nav.push({ id: 'trace', title: 'Trace', component: <TraceView /> })\r\n      }\r\n\r\n      if (await springbootService.hasEndpoint('Httpexchanges')) {\r\n        springbootService.setIsSpringBoot3(true)\r\n        nav.push({ id: 'trace', title: 'Trace', component: <TraceView /> })\r\n      }\r\n\r\n      setNavItems([...nav])\r\n    }\r\n    initNavItems()\r\n  }, [])\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <PageSection variant='light'>\r\n        <Title headingLevel='h1'>Spring Boot</Title>\r\n      </PageSection>\r\n      <Divider />\r\n      <PageSection type='tabs' hasShadowBottom>\r\n        <Nav aria-label='Spring-boot Nav' variant='tertiary'>\r\n          <NavList>\r\n            {navItems.map(navItem => (\r\n              <NavItem key={navItem.id} isActive={location.pathname === `/springboot/${navItem.id}`}>\r\n                <NavLink to={navItem.id}>{navItem.title}</NavLink>\r\n              </NavItem>\r\n            ))}\r\n          </NavList>\r\n        </Nav>\r\n      </PageSection>\r\n      <Divider />\r\n      <PageSection\r\n        aria-label='Spring-boot Content'\r\n        variant={location.pathname === '/springboot/health' ? PageSectionVariants.default : PageSectionVariants.light}\r\n        padding={{ default: location.pathname.includes('health') ? 'padding' : 'noPadding' }}\r\n      >\r\n        <Routes>\r\n          {navItems.map(navItem => (\r\n            <Route key={navItem.id} path={navItem.id} element={navItem.component} />\r\n          ))}\r\n          <Route path='/' element={<Navigate to='health' />} />\r\n        </Routes>\r\n      </PageSection>\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Card, CardBody, CardHeader, Flex, FlexItem, Grid, GridItem, Title } from '@patternfly/react-core'\r\nimport { springbootService } from './springboot-service'\r\nimport { HealthComponentDetail, HealthData } from './types'\r\nimport { TableComposable, Tbody, Td, Tr } from '@patternfly/react-table'\r\nimport { humanizeLabels } from '@hawtiosrc/util/strings'\r\nimport { ChartDonutUtilization } from '@patternfly/react-charts'\r\nimport {\r\n  CheckCircleIcon,\r\n  ExclamationCircleIcon,\r\n  ExclamationTriangleIcon,\r\n  InfoCircleIcon,\r\n  QuestionCircleIcon,\r\n} from '@patternfly/react-icons'\r\n\r\nconst SPAN_6_COMPONENTS = ['diskSpace', 'camelHealth', 'camel']\r\n\r\nconst ComponentDetails: React.FunctionComponent<{ componentDetails: HealthComponentDetail[] }> = ({\r\n  componentDetails,\r\n}) => {\r\n  return (\r\n    <TableComposable variant='compact' borders={false}>\r\n      <Tbody style={{ fontSize: 'xx-small' }}>\r\n        {componentDetails.map((detail, index) => {\r\n          return (\r\n            <Tr key={'row' + detail.key + index}>\r\n              <Td key={detail.key + index}>{humanizeLabels(detail.key)}:</Td>\r\n              <Td>\r\n                {typeof detail.value === 'string' ? detail.value : <ComponentDetails componentDetails={detail.value} />}\r\n              </Td>\r\n            </Tr>\r\n          )\r\n        })}\r\n      </Tbody>\r\n    </TableComposable>\r\n  )\r\n}\r\nconst HealthStatusIcon: React.FunctionComponent<{ status: string }> = ({ status }) => {\r\n  switch (status) {\r\n    case 'UP':\r\n      return <CheckCircleIcon color={'green'} />\r\n    case 'DOWN':\r\n      return <ExclamationCircleIcon color={'red'} />\r\n    case 'OUT_OF_SERVICE':\r\n      return <ExclamationTriangleIcon color={'orange'} />\r\n    case 'UNKNOWN':\r\n      return <QuestionCircleIcon />\r\n    default:\r\n      return <InfoCircleIcon color={'blue'} />\r\n  }\r\n}\r\n\r\nconst DiskComponentDetails: React.FunctionComponent<{ componentDetails: HealthComponentDetail[] }> = ({\r\n  componentDetails,\r\n}) => {\r\n  const total = Number.parseInt(componentDetails.find(k => k.key === 'total')!.value as string)\r\n  const free = Number.parseInt(componentDetails.find(k => k.key === 'free')!.value as string)\r\n  const usedPercentage = Math.round(((total - free) * 100) / total)\r\n\r\n  return (\r\n    <Grid height={'100%'}>\r\n      <GridItem span={6}>\r\n        <ComponentDetails componentDetails={componentDetails} />\r\n      </GridItem>\r\n      <GridItem span={6}>\r\n        <ChartDonutUtilization\r\n          ariaDesc='Storage capacity'\r\n          ariaTitle='Donut utilization chart example'\r\n          constrainToVisibleArea\r\n          data={{ x: 'Used Space', y: usedPercentage }}\r\n          name='chart2'\r\n          subTitle='of available space'\r\n          title={`${usedPercentage}% used`}\r\n          thresholds={[{ value: 90 }]}\r\n          width={300}\r\n        />\r\n      </GridItem>\r\n    </Grid>\r\n  )\r\n}\r\nexport const Health: React.FunctionComponent = () => {\r\n  const [healthData, setHealthData] = useState<HealthData>()\r\n\r\n  useEffect(() => {\r\n    springbootService.loadHealth().then(healthData => {\r\n      setHealthData(healthData)\r\n    })\r\n  }, [])\r\n\r\n  if (!healthData) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Grid hasGutter span={4}>\r\n      <GridItem span={12}>\r\n        <Card>\r\n          <CardHeader>\r\n            <Flex>\r\n              <HealthStatusIcon status={healthData?.status} />\r\n              <Title headingLevel='h3'>\r\n                <span>Overall status: {healthData?.status}</span>\r\n              </Title>\r\n            </Flex>\r\n          </CardHeader>\r\n        </Card>\r\n      </GridItem>\r\n      {healthData?.components\r\n        .sort((a, b) => {\r\n          if (SPAN_6_COMPONENTS.includes(a.name)) return -1\r\n          else if (SPAN_6_COMPONENTS.includes(b.name)) return 1\r\n          else return a.name.localeCompare(b.name)\r\n        })\r\n        .map(component => {\r\n          const span = SPAN_6_COMPONENTS.includes(component.name) ? 6 : 4\r\n          return (\r\n            <GridItem span={span} key={component.name}>\r\n              <Card isFullHeight>\r\n                <CardHeader>\r\n                  <Title headingLevel='h3'>{humanizeLabels(component.name!)}</Title>\r\n                </CardHeader>\r\n                <CardBody style={{ overflow: 'auto' }}>\r\n                  <Flex>\r\n                    <FlexItem>\r\n                      <HealthStatusIcon status={component.status} />\r\n                    </FlexItem>\r\n                    <FlexItem>Status: {component.status}</FlexItem>\r\n                    {component.details &&\r\n                      (component.name === 'diskSpace' ? (\r\n                        <DiskComponentDetails componentDetails={component.details} />\r\n                      ) : (\r\n                        <ComponentDetails componentDetails={component.details} />\r\n                      ))}\r\n                  </Flex>\r\n                </CardBody>\r\n              </Card>\r\n            </GridItem>\r\n          )\r\n        })}\r\n    </Grid>\r\n  )\r\n}\r\n","export type HealthComponent = {\r\n  name: string\r\n  status: string\r\n  details?: HealthComponentDetail[]\r\n}\r\nexport type HealthComponentDetail = {\r\n  key: string\r\n  value: string | HealthComponentDetail[]\r\n}\r\nexport type HealthData = {\r\n  components: HealthComponent[]\r\n  status: string\r\n}\r\n\r\nexport type JolokiaHealthData = {\r\n  status: string\r\n  components: {\r\n    [name: string]: {\r\n      details?: {\r\n        [key: string]:\r\n          | string\r\n          | {\r\n              [key: string]: string\r\n            }\r\n      }\r\n      status: string\r\n    }\r\n  }\r\n}\r\nexport type LoggerConfiguration = {\r\n  levels: string[]\r\n  loggers: Logger[]\r\n}\r\n\r\nexport type Logger = {\r\n  name: string\r\n  configuredLevel: string\r\n  effectiveLevel: string\r\n}\r\n\r\nexport class Trace {\r\n  timestamp: string\r\n  method: string = ''\r\n  path: string = ''\r\n  httpStatusCode: number = -1\r\n  timeTaken: string = '-1'\r\n  info: string = ''\r\n\r\n  constructor(trace: JmxTrace) {\r\n    this.timestamp = trace.timestamp\r\n\r\n    if (trace.info) {\r\n      this.method = trace.info.method\r\n      this.path = trace.info.path\r\n      this.info = JSON.stringify(trace.info, null, 2)\r\n\r\n      if (trace.info.timeTaken) {\r\n        this.timeTaken = trace.info.timeTaken\r\n      }\r\n\r\n      if (trace.info.headers?.response) {\r\n        this.httpStatusCode = parseInt(trace.info.headers.response.status)\r\n      }\r\n    } else if (trace.request) {\r\n      this.method = trace.request.method\r\n      this.path = new URL(trace.request.uri).pathname\r\n      this.info = JSON.stringify(trace, null, 2)\r\n\r\n      if (trace.timeTaken) {\r\n        this.timeTaken = trace.timeTaken\r\n      }\r\n\r\n      if (trace.response && trace.response.status) {\r\n        this.httpStatusCode = parseInt(trace.response.status)\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport type JmxTrace = {\r\n  timestamp: string\r\n  info?: {\r\n    method: string\r\n    path: string\r\n    timeTaken?: string\r\n    headers?: {\r\n      response?: {\r\n        status: string\r\n      }\r\n    }\r\n  }\r\n  request?: {\r\n    method: string\r\n    uri: string\r\n  }\r\n  timeTaken?: string\r\n  response?: {\r\n    status?: string\r\n  }\r\n}\r\n","import { jolokiaService, workspace } from '@hawtiosrc/plugins'\r\nimport { HealthComponent, HealthData, JmxTrace, JolokiaHealthData, Logger, LoggerConfiguration, Trace } from './types'\r\n\r\nclass SpringBootService {\r\n  isSpringBoot3 = true\r\n\r\n  isActive(): Promise<boolean> {\r\n    return workspace.treeContainsDomainAndProperties('org.springframework.boot')\r\n  }\r\n\r\n  setIsSpringBoot3(is: boolean) {\r\n    this.isSpringBoot3 = is\r\n  }\r\n\r\n  async loadHealth(): Promise<HealthData> {\r\n    const data = (await jolokiaService.execute(\r\n      'org.springframework.boot:type=Endpoint,name=Health',\r\n      'health',\r\n    )) as JolokiaHealthData\r\n    let healthComponents: HealthComponent[] = []\r\n\r\n    healthComponents = Object.entries(data.components).map(([componentName, component]) => {\r\n      let details\r\n\r\n      if (component.details) {\r\n        details = Object.entries(component.details).map(([detailKey, detailValue]) => {\r\n          const typ = typeof detailValue\r\n          const value = ['string', 'number', 'boolean'].includes(typ)\r\n            ? detailValue.toString()\r\n            : Object.entries(detailValue).map(([key, value]) => ({ key, value }))\r\n\r\n          return {\r\n            key: detailKey,\r\n            value: value,\r\n          }\r\n        })\r\n      }\r\n\r\n      return {\r\n        name: componentName,\r\n        status: component.status,\r\n        details: component.details ? details : undefined,\r\n      }\r\n    })\r\n\r\n    return { status: data.status, components: healthComponents }\r\n  }\r\n\r\n  async getInfo() {\r\n    const properties: { key: string; value: string }[] = []\r\n    const res = await jolokiaService.execute('org.springframework.boot:type=Endpoint,name=Info', 'info')\r\n    Object.entries(res as object).forEach(([key, value]) => {\r\n      const v =\r\n        typeof value === 'string'\r\n          ? value\r\n          : JSON.stringify(value)\r\n              .replaceAll('\"', '')\r\n              .replaceAll(':', '=')\r\n              .replaceAll('={', ': [')\r\n\r\n              .replaceAll(',', '; ')\r\n              .replaceAll('}', ']')\r\n              .slice(1, -1)\r\n      properties.push({\r\n        key,\r\n        value: v,\r\n      })\r\n    })\r\n\r\n    return properties\r\n  }\r\n\r\n  hasEndpoint(name: string): Promise<boolean> {\r\n    return workspace.treeContainsDomainAndProperties('org.springframework.boot', { type: 'Endpoint', name: name })\r\n  }\r\n\r\n  async getLoggerConfiguration() {\r\n    const data = (await jolokiaService.execute('org.springframework.boot:type=Endpoint,name=Loggers', 'loggers')) as {\r\n      loggers: {\r\n        [key: string]: {\r\n          configuredLevel?: string\r\n          effectiveLevel: string\r\n        }\r\n      }\r\n      levels: string[]\r\n    }\r\n\r\n    const loggers: Logger[] = []\r\n\r\n    Object.entries(data.loggers).forEach(([loggerName, loggerInfo]) => {\r\n      const logger: Logger = {\r\n        name: loggerName,\r\n        configuredLevel: loggerInfo['configuredLevel'] == null ? loggerInfo.effectiveLevel : loggerInfo.configuredLevel,\r\n        effectiveLevel: loggerInfo.effectiveLevel,\r\n      }\r\n      loggers.push(logger)\r\n    })\r\n\r\n    const loggerConfiguration: LoggerConfiguration = {\r\n      levels: data.levels,\r\n      loggers: loggers,\r\n    }\r\n\r\n    return loggerConfiguration\r\n  }\r\n\r\n  async configureLogLevel(loggerName: string, loggerLevel: string) {\r\n    return await jolokiaService.execute('org.springframework.boot:type=Endpoint,name=Loggers', 'configureLogLevel', [\r\n      loggerName,\r\n      loggerLevel,\r\n    ])\r\n  }\r\n\r\n  async loadTraces() {\r\n    const traces: Trace[] = []\r\n    let mbeanName = 'Httpexchanges'\r\n    let mbeanOperation = 'httpExchanges'\r\n    let jmxTraces: JmxTrace[] = []\r\n    if (!this.isSpringBoot3) {\r\n      mbeanName = 'Httptrace'\r\n      mbeanOperation = 'traces'\r\n    }\r\n    const data = await jolokiaService.execute(\r\n      `org.springframework.boot:type=Endpoint,name=${mbeanName}`,\r\n      mbeanOperation,\r\n    )\r\n    if (this.isSpringBoot3) {\r\n      jmxTraces = (data as { exchanges: JmxTrace[] }).exchanges\r\n    } else {\r\n      jmxTraces = (data as { traces: JmxTrace[] }).traces\r\n    }\r\n\r\n    jmxTraces\r\n      .filter(trace => {\r\n        const path = trace.info ? trace.info.path : trace.request?.uri ?? ''\r\n        // Avoid including our own jolokia requests in the results\r\n        return /.*?\\/jolokia\\/?(?:\\/.*(?=$))?$/.test(path) === false\r\n      })\r\n      .forEach(jmxTrace => {\r\n        traces.push(new Trace(jmxTrace))\r\n      })\r\n    return traces\r\n  }\r\n}\r\n\r\nexport const springbootService = new SpringBootService()\r\n","import React, { useEffect, useState } from 'react'\r\nimport { FormGroup } from '@patternfly/react-core'\r\nimport { springbootService } from './springboot-service'\r\nimport { TableComposable, Tbody, Td, Th, Thead, Tr } from '@patternfly/react-table'\r\n\r\nexport const Info: React.FunctionComponent = () => {\r\n  const [systemProperties, setSystemProperties] = useState<{ key: string; value: string }[]>([])\r\n\r\n  useEffect(() => {\r\n    springbootService.getInfo().then(res => {\r\n      setSystemProperties(res)\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <FormGroup>\r\n      <TableComposable aria-label='Message Table' variant='compact' height='80vh' isStriped isStickyHeader>\r\n        <Thead>\r\n          <Tr>\r\n            <Th data-testid={'name-header'}>Property Name</Th>\r\n            <Th data-testid={'value-header'}>Property Value</Th>\r\n          </Tr>\r\n        </Thead>\r\n        <Tbody>\r\n          {systemProperties.map((prop, index) => {\r\n            return (\r\n              <Tr key={'row' + index} data-testid={'row' + index}>\r\n                <Td style={{ width: '20%' }}>{prop.key}</Td>\r\n                <Td style={{ flex: 3 }}>{prop.value}</Td>\r\n              </Tr>\r\n            )\r\n          })}\r\n        </Tbody>\r\n      </TableComposable>\r\n    </FormGroup>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport {\r\n  Bullseye,\r\n  Button,\r\n  Dropdown,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n  EmptyState,\r\n  EmptyStateBody,\r\n  EmptyStateIcon,\r\n  FormGroup,\r\n  Label,\r\n  Pagination,\r\n  SearchInput,\r\n  Toolbar,\r\n  ToolbarContent,\r\n  ToolbarFilter,\r\n  ToolbarGroup,\r\n  ToolbarItem,\r\n} from '@patternfly/react-core'\r\nimport { springbootService } from './springboot-service'\r\nimport { TableComposable, Tbody, Td, Th, Thead, Tr } from '@patternfly/react-table'\r\nimport { SearchIcon } from '@patternfly/react-icons'\r\nimport { Logger } from './types'\r\n\r\nconst SetLogDropdown: React.FunctionComponent<{\r\n  currentLevel: string\r\n  loggerName: string\r\n  logLevels: string[]\r\n  setIsDropdownOpen: React.Dispatch<React.SetStateAction<string | null>>\r\n  isDropdownOpen: string | null\r\n  reloadLoggers: () => void\r\n}> = ({ currentLevel, loggerName, logLevels, setIsDropdownOpen, isDropdownOpen, reloadLoggers }) => {\r\n  const items = logLevels.map(level => (\r\n    <DropdownItem\r\n      key={loggerName + '' + level}\r\n      onClick={() => {\r\n        springbootService.configureLogLevel(loggerName, level)\r\n        reloadLoggers()\r\n      }}\r\n    >\r\n      <LogLevel level={level} />\r\n    </DropdownItem>\r\n  ))\r\n\r\n  return (\r\n    <Dropdown\r\n      isPlain\r\n      onSelect={() => setIsDropdownOpen(null)}\r\n      defaultValue={currentLevel}\r\n      toggle={\r\n        <DropdownToggle\r\n          id={`toggle-basic-${loggerName}`}\r\n          onToggle={() => setIsDropdownOpen(prevState => (prevState === loggerName ? null : loggerName))}\r\n        >\r\n          <LogLevel level={currentLevel} />\r\n        </DropdownToggle>\r\n      }\r\n      isOpen={isDropdownOpen === loggerName}\r\n      dropdownItems={items}\r\n    />\r\n  )\r\n}\r\nconst LogLevel: React.FunctionComponent<{ level: string }> = ({ level }) => {\r\n  switch (level) {\r\n    case 'TRACE':\r\n    case 'OFF':\r\n    case 'DEBUG':\r\n      return <Label color='grey'>{level}</Label>\r\n    case 'INFO':\r\n      return <Label color='blue'>{level}</Label>\r\n    case 'WARN':\r\n      return <Label color='orange'>{level}</Label>\r\n    case 'ERROR':\r\n      return <Label color='red'>{level}</Label>\r\n    default:\r\n      return <React.Fragment>{level}</React.Fragment>\r\n  }\r\n}\r\nexport const Loggers: React.FunctionComponent = () => {\r\n  const [searchTerm, setSearchTerm] = useState('')\r\n\r\n  const [filters, setFilters] = useState<string[]>([])\r\n  const [logLevel, setLogLevel] = useState<string>('ALL')\r\n  const [filteredLoggers, setFilteredLoggers] = useState<Logger[]>([])\r\n  const [loggers, setLoggers] = useState<Logger[]>([])\r\n  const [logLevels, setLogLevels] = useState<string[]>([])\r\n  const [isLogLevelDropdownOpen, setIsLogLevelDropdownOpen] = useState(false)\r\n  const [isDropdownOpen, setIsDropdownOpen] = useState<string | null>(null)\r\n  const [page, setPage] = useState(1)\r\n  const [perPage, setPerPage] = useState(20)\r\n  const [reloadLoggers, setReloadLoggers] = useState(false)\r\n\r\n  useEffect(() => {\r\n    springbootService.getLoggerConfiguration().then(logConf => {\r\n      const sorted = logConf.loggers.sort((logger1, logger2) => {\r\n        if (logger1.name === 'ROOT') return -1\r\n        else if (logger2.name === 'ROOT') return 1\r\n        else return logger1.name.localeCompare(logger2.name)\r\n      })\r\n      setLoggers(sorted)\r\n      setLogLevels([...logConf.levels])\r\n      setFilteredLoggers(sorted)\r\n    })\r\n  }, [reloadLoggers])\r\n\r\n  useEffect(() => {\r\n    let filtered: Logger[] = loggers.filter(logger => logLevel === 'ALL' || logger.configuredLevel === logLevel)\r\n\r\n    //filter with the rest of the filters\r\n    ;[...filters, searchTerm].forEach(value => {\r\n      filtered = filtered.filter(prop => prop.name.toLowerCase().includes(value.toLowerCase()))\r\n    })\r\n    setFilteredLoggers([...filtered])\r\n    setPage(1)\r\n  }, [filters, searchTerm, logLevel, loggers])\r\n\r\n  const onDeleteFilter = (filter: string) => {\r\n    const newFilters = filters.filter(f => f !== filter)\r\n    setFilters(newFilters)\r\n  }\r\n  const addToFilters = () => {\r\n    setFilters([...filters, searchTerm])\r\n    setSearchTerm('')\r\n  }\r\n  const clearFilters = () => {\r\n    setFilters([])\r\n    setSearchTerm('')\r\n  }\r\n\r\n  const PropsPagination = () => {\r\n    return (\r\n      <Pagination\r\n        itemCount={filteredLoggers.length}\r\n        page={page}\r\n        perPage={perPage}\r\n        onSetPage={(_evt, value) => setPage(value)}\r\n        onPerPageSelect={(_evt, value) => {\r\n          setPerPage(value)\r\n          setPage(1)\r\n        }}\r\n        variant='top'\r\n      />\r\n    )\r\n  }\r\n  const getCurrentPage = (): Logger[] => {\r\n    const start = (page - 1) * perPage\r\n    const end = start + perPage\r\n    return filteredLoggers.slice(start, end)\r\n  }\r\n\r\n  const dropdownItems = ['ALL', ...logLevels].map(level => (\r\n    <DropdownItem\r\n      onClick={() => {\r\n        setLogLevel(level)\r\n      }}\r\n      key={level}\r\n    >\r\n      <LogLevel level={level} />\r\n    </DropdownItem>\r\n  ))\r\n\r\n  const tableToolbar = (\r\n    <Toolbar>\r\n      <ToolbarContent>\r\n        <ToolbarGroup>\r\n          <Dropdown\r\n            data-testid='attribute-select'\r\n            onSelect={() => setIsLogLevelDropdownOpen(false)}\r\n            defaultValue='INFO'\r\n            toggle={\r\n              <DropdownToggle\r\n                data-testid='attribute-select-toggle'\r\n                id='toggle-basic'\r\n                onToggle={setIsLogLevelDropdownOpen}\r\n              >\r\n                <LogLevel level={logLevel} />\r\n              </DropdownToggle>\r\n            }\r\n            isOpen={isLogLevelDropdownOpen}\r\n            dropdownItems={dropdownItems}\r\n          />\r\n          <ToolbarFilter\r\n            chips={filters}\r\n            deleteChip={(_e, filter) => onDeleteFilter(filter as string)}\r\n            deleteChipGroup={clearFilters}\r\n            categoryName='Filters'\r\n          >\r\n            <SearchInput\r\n              type='text'\r\n              data-testid='filter-input'\r\n              id='search-input'\r\n              placeholder='Search...'\r\n              value={searchTerm}\r\n              onChange={(_event, value) => setSearchTerm(value)}\r\n              aria-label='Search input'\r\n            />\r\n          </ToolbarFilter>\r\n          <Button variant='secondary' onClick={addToFilters} isSmall>\r\n            Add Filter\r\n          </Button>\r\n        </ToolbarGroup>\r\n\r\n        <ToolbarItem variant='pagination'>\r\n          <PropsPagination />\r\n        </ToolbarItem>\r\n      </ToolbarContent>\r\n    </Toolbar>\r\n  )\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {tableToolbar}\r\n      {getCurrentPage().length > 0 && (\r\n        <FormGroup>\r\n          <TableComposable aria-label='Message Table' variant='compact' height='80vh' isStriped isStickyHeader>\r\n            <Thead>\r\n              <Tr>\r\n                <Th data-testid={'log-level-header'}>Log Level</Th>\r\n                <Th data-testid={'logger-name-header'}>Logger Name</Th>\r\n              </Tr>\r\n            </Thead>\r\n            <Tbody>\r\n              {getCurrentPage().map((logger, index) => {\r\n                return (\r\n                  <Tr key={'row' + index} data-testid={'row' + index}>\r\n                    <Td style={{ width: '20%' }}>\r\n                      <SetLogDropdown\r\n                        loggerName={logger.name}\r\n                        currentLevel={logger.configuredLevel}\r\n                        logLevels={logLevels}\r\n                        setIsDropdownOpen={setIsDropdownOpen}\r\n                        isDropdownOpen={isDropdownOpen}\r\n                        reloadLoggers={() => {\r\n                          setReloadLoggers(!reloadLoggers)\r\n                        }}\r\n                      />\r\n                    </Td>\r\n                    <Td style={{ flex: 3 }}>{logger.name}</Td>\r\n                  </Tr>\r\n                )\r\n              })}\r\n            </Tbody>\r\n          </TableComposable>\r\n        </FormGroup>\r\n      )}\r\n      {filteredLoggers.length === 0 && (\r\n        <Bullseye>\r\n          <EmptyState>\r\n            <EmptyStateIcon icon={SearchIcon} />\r\n            <EmptyStateBody>No results found.</EmptyStateBody>\r\n          </EmptyState>\r\n        </Bullseye>\r\n      )}\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport {\r\n  Bullseye,\r\n  Button,\r\n  CodeBlock,\r\n  CodeBlockCode,\r\n  Dropdown,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n  EmptyState,\r\n  EmptyStateBody,\r\n  EmptyStateIcon,\r\n  Flex,\r\n  FormGroup,\r\n  Label,\r\n  Modal,\r\n  PageSection,\r\n  Pagination,\r\n  SearchInput,\r\n  Toolbar,\r\n  ToolbarContent,\r\n  ToolbarFilter,\r\n  ToolbarGroup,\r\n  ToolbarItem,\r\n} from '@patternfly/react-core'\r\nimport { TableComposable, Tbody, Td, Th, Thead, Tr } from '@patternfly/react-table'\r\nimport { CheckCircleIcon, ExclamationCircleIcon, SearchIcon } from '@patternfly/react-icons'\r\nimport { Trace } from './types'\r\nimport { springbootService } from './springboot-service'\r\n\r\nconst HttpStatusIcon: React.FunctionComponent<{ code: number }> = ({ code }) => {\r\n  if (code < 400) return <CheckCircleIcon color='#3E8635' />\r\n  else return <ExclamationCircleIcon color='#C9190B' />\r\n}\r\n\r\nconst HttpMethodLabel: React.FunctionComponent<{ method: string }> = ({ method }) => {\r\n  switch (method) {\r\n    case 'GET':\r\n    case 'HEAD':\r\n      return <Label color='blue'>{method}</Label>\r\n    case 'POST':\r\n      return <Label color='orange'>{method}</Label>\r\n    case 'DELETE':\r\n      return <Label color='red'>{method}</Label>\r\n    case 'PUT':\r\n    case 'PATCH':\r\n      return <Label color='green'>{method}</Label>\r\n    default:\r\n      return <Label color='grey'>{method}</Label>\r\n  }\r\n}\r\n\r\nconst TraceDetails: React.FunctionComponent<{\r\n  isOpen: boolean\r\n  setIsOpen: (opened: boolean) => void\r\n  traceInfo: string\r\n}> = ({ isOpen, setIsOpen, traceInfo }) => {\r\n  return (\r\n    <Modal\r\n      bodyAriaLabel='Trace detail'\r\n      tabIndex={0}\r\n      isOpen={isOpen}\r\n      variant='large'\r\n      title='Trace'\r\n      onClose={() => setIsOpen(false)}\r\n    >\r\n      <CodeBlock>\r\n        <CodeBlockCode>{traceInfo}</CodeBlockCode>\r\n      </CodeBlock>\r\n    </Modal>\r\n  )\r\n}\r\nexport const TraceView: React.FunctionComponent = () => {\r\n  const [traces, setTraces] = useState<Trace[]>([])\r\n  const [filteredTraces, setFilteredTraces] = useState<Trace[]>([])\r\n\r\n  const [httpMethodFilter, setMethodFilter] = useState<string>('ALL')\r\n  const [page, setPage] = useState(1)\r\n  const [perPage, setPerPage] = useState(20)\r\n  const [searchTerm, setSearchTerm] = useState('')\r\n  const [filters, setFilters] = useState<string[]>([])\r\n  const [currentTraceFilter, setCurrentTraceFilter] = useState('Timestamp')\r\n  const [isFilterDropdownOpen, setIsFilterDropdownOpen] = useState(false)\r\n  const [isHttpMethodFilterDropdownOpen, setIsHttpMethodFilterDropdownOpen] = useState(false)\r\n  const [isTraceDetailsOpen, setIsTraceDetailsOpen] = useState(false)\r\n  const [traceDetails, setTraceDetails] = useState<string>('')\r\n\r\n  useEffect(() => {\r\n    springbootService.loadTraces().then(traces => {\r\n      setTraces(traces)\r\n      setFilteredTraces(traces)\r\n    })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    let filtered: Trace[] = traces.filter(\r\n      trace => httpMethodFilter === 'ALL' || trace.method.toLowerCase().includes(httpMethodFilter.toLowerCase()),\r\n    )\r\n\r\n    //filter with the rest of the filters\r\n    ;[...filters, `${currentTraceFilter}: ${searchTerm}`].forEach(value => {\r\n      const attr = value.split(': ')[0] ?? ''\r\n      const searchTerm = value.split(': ')[1] ?? ''\r\n      switch (attr) {\r\n        case 'Timestamp':\r\n          filtered = filtered.filter(trace => trace.timestamp.includes(searchTerm))\r\n          break\r\n        case 'HTTP Status':\r\n          filtered = filtered.filter(trace => trace.httpStatusCode.toString().includes(searchTerm))\r\n          break\r\n        case 'Time Taken':\r\n          filtered = filtered.filter(trace => trace.timeTaken.includes(searchTerm))\r\n          break\r\n        case 'Path':\r\n        default:\r\n          filtered = filtered.filter(trace => trace.path.includes(searchTerm))\r\n          break\r\n      }\r\n    })\r\n    setFilteredTraces(filtered)\r\n  }, [traces, currentTraceFilter, filters, httpMethodFilter, searchTerm])\r\n\r\n  const onDeleteFilter = (filter: string) => {\r\n    const newFilters = filters.filter(f => f !== filter)\r\n    setFilters(newFilters)\r\n  }\r\n\r\n  const addToFilters = () => {\r\n    setFilters([...filters, `${currentTraceFilter}: ${searchTerm}`])\r\n    setSearchTerm('')\r\n  }\r\n\r\n  const clearFilters = () => {\r\n    setFilters([])\r\n    setSearchTerm('')\r\n  }\r\n\r\n  const PropsPagination = () => (\r\n    <Pagination\r\n      name={'table-pagination'}\r\n      itemCount={filteredTraces.length}\r\n      page={page}\r\n      perPage={perPage}\r\n      onSetPage={(_evt, value) => setPage(value)}\r\n      onPerPageSelect={(_evt, value) => {\r\n        setPerPage(value)\r\n        setPage(1)\r\n      }}\r\n      variant='top'\r\n    />\r\n  )\r\n\r\n  const getTablePage = (): Trace[] => {\r\n    const start = (page - 1) * perPage\r\n    const end = start + perPage\r\n    return filteredTraces.slice(start, end)\r\n  }\r\n\r\n  const tableColumns = [\r\n    { key: 'timestamp', value: 'Timestamp' },\r\n    { key: 'httpStatus', value: 'HTTP Status' },\r\n    { key: 'httpMethod', value: 'HTTP Method' },\r\n    { key: 'path', value: 'Path' },\r\n    { key: 'timeTaken', value: 'Time Taken' },\r\n  ]\r\n\r\n  const dropdownItems = ['Timestamp', 'HTTP Status', 'Path', 'Time Taken'].map(item => (\r\n    <DropdownItem\r\n      onClick={() => {\r\n        setCurrentTraceFilter(item)\r\n      }}\r\n      key={item + 'key'}\r\n    >\r\n      {item}\r\n    </DropdownItem>\r\n  ))\r\n\r\n  const httpMethodsDropdownItems = ['ALL', 'GET', 'POST', 'DELETE', 'HEAD', 'OPTIONS', 'PATCH', 'PUT', 'TRACE'].map(\r\n    method => (\r\n      <DropdownItem onClick={() => setMethodFilter(method)} key={'method-' + method}>\r\n        <HttpMethodLabel method={method} />\r\n      </DropdownItem>\r\n    ),\r\n  )\r\n\r\n  const TableToolbar = (\r\n    <Toolbar>\r\n      <ToolbarContent>\r\n        <ToolbarItem>\r\n          <Dropdown\r\n            data-testid='http-method-select'\r\n            id='http-dropdown'\r\n            onSelect={() => setIsHttpMethodFilterDropdownOpen(false)}\r\n            toggle={\r\n              <DropdownToggle\r\n                data-testid='http-method-select-toggle'\r\n                id='http-method-toggle'\r\n                onToggle={setIsHttpMethodFilterDropdownOpen}\r\n              >\r\n                <HttpMethodLabel method={httpMethodFilter} />\r\n              </DropdownToggle>\r\n            }\r\n            isOpen={isHttpMethodFilterDropdownOpen}\r\n            dropdownItems={httpMethodsDropdownItems}\r\n          />\r\n        </ToolbarItem>\r\n        <ToolbarGroup>\r\n          <Dropdown\r\n            data-testid='attribute-select'\r\n            onSelect={() => setIsFilterDropdownOpen(false)}\r\n            defaultValue='HTTP Method'\r\n            toggle={\r\n              <DropdownToggle\r\n                data-testid='attribute-select-toggle'\r\n                id='toggle-basic'\r\n                onToggle={setIsFilterDropdownOpen}\r\n              >\r\n                {tableColumns.find(att => att.value === currentTraceFilter)?.value}\r\n              </DropdownToggle>\r\n            }\r\n            isOpen={isFilterDropdownOpen}\r\n            dropdownItems={dropdownItems}\r\n          />\r\n          <ToolbarFilter\r\n            chips={filters}\r\n            deleteChip={(_e, filter) => onDeleteFilter(filter as string)}\r\n            deleteChipGroup={clearFilters}\r\n            categoryName='Filters'\r\n          >\r\n            <SearchInput\r\n              type='text'\r\n              data-testid='trace-filter-input'\r\n              id='trace-filter-search-input'\r\n              name='trace-filter-search-input'\r\n              placeholder='Filter...'\r\n              value={searchTerm}\r\n              onChange={(_event, value) => setSearchTerm(value)}\r\n              aria-label='trace-filter-input'\r\n            />\r\n          </ToolbarFilter>\r\n          <ToolbarItem>\r\n            <Button id='add-filter-button' variant='secondary' onClick={addToFilters} isSmall>\r\n              Add Filter\r\n            </Button>\r\n          </ToolbarItem>\r\n        </ToolbarGroup>\r\n\r\n        <ToolbarItem name={'pagination'} variant='pagination'>\r\n          <PropsPagination />\r\n        </ToolbarItem>\r\n      </ToolbarContent>\r\n    </Toolbar>\r\n  )\r\n\r\n  return (\r\n    <PageSection>\r\n      <TraceDetails isOpen={isTraceDetailsOpen} setIsOpen={setIsTraceDetailsOpen} traceInfo={traceDetails} />\r\n      {TableToolbar}\r\n      {getTablePage().length > 0 && (\r\n        <FormGroup>\r\n          <TableComposable aria-label='Message Table' variant='compact' height='80vh' isStriped isStickyHeader>\r\n            <Thead>\r\n              <Tr>\r\n                {tableColumns.map((att, index) => (\r\n                  <Th key={'th-key' + index} data-testid={'id-' + att.key}>\r\n                    {att.value}\r\n                  </Th>\r\n                ))}\r\n                <Th> Actions</Th>\r\n              </Tr>\r\n            </Thead>\r\n            <Tbody>\r\n              {getTablePage().map((trace, index) => {\r\n                return (\r\n                  <Tr key={'row' + index} data-testid={'row' + index}>\r\n                    <Td key={'col-timestamp'}>{trace.timestamp}</Td>\r\n                    <Td key={'col-http-status'}>\r\n                      <Flex>\r\n                        <HttpStatusIcon code={trace.httpStatusCode} />\r\n                        <span>{trace.httpStatusCode}</span>\r\n                      </Flex>\r\n                    </Td>\r\n                    <Td key={'col-http=method'}>\r\n                      <HttpMethodLabel method={trace.method} />\r\n                    </Td>\r\n                    <Td key={'col-path'}>{trace.path}</Td>\r\n                    <Td key={'col-time-taken'}>{trace.timeTaken}</Td>\r\n                    <Td>\r\n                      <Button\r\n                        onClick={_event => {\r\n                          setIsTraceDetailsOpen(true)\r\n                          setTraceDetails(trace.info)\r\n                        }}\r\n                        isSmall\r\n                      >\r\n                        Show\r\n                      </Button>\r\n                    </Td>\r\n                  </Tr>\r\n                )\r\n              })}\r\n            </Tbody>\r\n          </TableComposable>\r\n        </FormGroup>\r\n      )}\r\n      {filteredTraces.length === 0 && (\r\n        <Bullseye>\r\n          <EmptyState>\r\n            <EmptyStateIcon icon={SearchIcon} />\r\n            <EmptyStateBody>No results found.</EmptyStateBody>\r\n          </EmptyState>\r\n        </Bullseye>\r\n      )}\r\n    </PageSection>\r\n  )\r\n}\r\n","import { Logger } from '@hawtiosrc/core/logging'\r\n\r\nexport const pluginId = 'springboot'\r\nexport const pluginName = 'hawtio-springboot'\r\nexport const pluginPath = '/springboot'\r\nexport const log = Logger.get(pluginName)\r\n","## Spring Boot\r\n\r\nThe Spring Boot plugin provides the capability interact with [actuator](https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-endpoints.html) endpoints exposed by an application.\r\n\r\n### Health\r\n\r\nDisplays the current health status of the application together with details returned from any Spring Boot health checks.\r\n\r\n### Info\r\n\r\nDisplays relevant information regarding the Spring boot application. It is the output of the Info actuator endpoint.\r\n\r\n### Loggers\r\n\r\nLists all the available loggers in the application. You can modify the level of a logger and the changes will take effect immediately.\r\n\r\n### Trace\r\n\r\nLists any HTTP traces for your application and lets you view information about the request / response such as headers, time taken etc.\r\n","import { hawtio, HawtioPlugin } from '@hawtiosrc/core'\r\n\r\nimport { helpRegistry } from '@hawtiosrc/help'\r\nimport { SpringBoot } from './SpringBoot'\r\nimport { pluginId, pluginPath } from './globals'\r\nimport help from './help.md'\r\nimport { springbootService } from './springboot-service'\r\n\r\nconst order = 17\r\n\r\nexport const springboot: HawtioPlugin = () => {\r\n  hawtio.addPlugin({\r\n    id: pluginId,\r\n    title: 'Spring Boot',\r\n    path: pluginPath,\r\n    order,\r\n    component: SpringBoot,\r\n    isActive: springbootService.isActive,\r\n  })\r\n  helpRegistry.add(pluginId, 'Spring Boot', help, order)\r\n}\r\n","import type { HawtioPlugin } from '@hawtiosrc/core'\r\nimport { keycloak } from './auth/keycloak'\r\nimport { oidc } from './auth/oidc'\r\nimport { camel } from './camel'\r\nimport { connect } from './connect'\r\nimport { jmx } from './jmx'\r\nimport { logs } from './logs'\r\nimport { quartz } from './quartz'\r\nimport { rbac } from './rbac'\r\nimport { runtime } from './runtime'\r\nimport { springboot } from './springboot'\r\n\r\n/**\r\n * Registers the builtin plugins for Hawtio React.\r\n *\r\n * The order of loading the builtin plugins is defined by this function.\r\n */\r\nexport const registerPlugins: HawtioPlugin = () => {\r\n  // Auth plugins should be loaded before other plugins\r\n  keycloak()\r\n  oidc()\r\n\r\n  connect()\r\n  jmx()\r\n  rbac()\r\n  camel()\r\n  runtime()\r\n  logs()\r\n  quartz()\r\n  springboot()\r\n}\r\n\r\n// Export each plugin's entry point so that a custom console assembler can select which to bundle\r\nexport { camel, connect, jmx, keycloak, oidc, logs, quartz, rbac, runtime, springboot }\r\n\r\n// Common plugin API\r\nexport * from './connect'\r\nexport * from './context'\r\nexport * from './shared'\r\n","import { helpRegistry } from '@hawtiosrc/help/registry'\r\nimport { Divider, Nav, NavItem, NavList, PageSection, PageSectionVariants, Title } from '@patternfly/react-core'\r\nimport React from 'react'\r\nimport { NavLink, Navigate, Route, Routes, useLocation } from 'react-router-dom'\r\nimport help from './help.md'\r\nimport { HomePreferences } from './HomePreferences'\r\nimport { LogsPreferences } from './LogsPreferences'\r\nimport { preferencesRegistry } from './registry'\r\n\r\nhelpRegistry.add('preferences', 'Preferences', help, 2)\r\npreferencesRegistry.add('home', 'Home', HomePreferences, 1)\r\npreferencesRegistry.add('console-logs', 'Console Logs', LogsPreferences, 2)\r\n\r\nexport const HawtioPreferences: React.FunctionComponent = () => {\r\n  const location = useLocation()\r\n  return (\r\n    <React.Fragment>\r\n      <PageSection variant={PageSectionVariants.light}>\r\n        <Title headingLevel='h1'>Preferences</Title>\r\n      </PageSection>\r\n      <Divider />\r\n      <PageSection type='tabs' hasShadowBottom>\r\n        <Nav aria-label='Nav' variant='tertiary'>\r\n          <NavList>\r\n            {preferencesRegistry.getPreferences().map(prefs => (\r\n              <NavItem key={prefs.id} isActive={location.pathname === `/preferences/${prefs.id}`}>\r\n                <NavLink to={prefs.id}>{prefs.title}</NavLink>\r\n              </NavItem>\r\n            ))}\r\n          </NavList>\r\n        </Nav>\r\n      </PageSection>\r\n      <Divider />\r\n      <PageSection variant={PageSectionVariants.light}>\r\n        <Routes>\r\n          {preferencesRegistry.getPreferences().map(prefs => (\r\n            <Route key={prefs.id} path={prefs.id} element={React.createElement(prefs.component)} />\r\n          ))}\r\n          <Route path='/' element={<Navigate to={'home'} />} />\r\n        </Routes>\r\n      </PageSection>\r\n    </React.Fragment>\r\n  )\r\n}\r\n","## Preferences\r\n\r\nThe preferences page is used to configure application preferences and individual plugin preferences.\r\n\r\nThe preferences page is accessible by clicking the user icon in the main navigation bar (the top-right corner), and then by choosing the preferences sub menu option.\r\n","import {\r\n  Alert,\r\n  Button,\r\n  CardBody,\r\n  Form,\r\n  FormGroup,\r\n  FormSection,\r\n  Modal,\r\n  ModalVariant,\r\n  Switch,\r\n} from '@patternfly/react-core'\r\nimport React, { useState } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { preferencesService } from './preferences-service'\r\n\r\nexport const HomePreferences: React.FunctionComponent = () => (\r\n  <CardBody>\r\n    <Form isHorizontal>\r\n      <FormSection title='UI' titleElement='h2'>\r\n        <UIForm />\r\n      </FormSection>\r\n      <FormSection title='Reset' titleElement='h2'>\r\n        <ResetForm />\r\n      </FormSection>\r\n    </Form>\r\n  </CardBody>\r\n)\r\n\r\nconst UIForm: React.FunctionComponent = () => {\r\n  const [showVerticalNav, setShowVerticalNav] = useState(preferencesService.isShowVerticalNavByDefault())\r\n\r\n  const handleShowVerticalNavChange = (value: boolean) => {\r\n    setShowVerticalNav(value)\r\n    preferencesService.saveShowVerticalNavByDefault(value)\r\n  }\r\n\r\n  return (\r\n    <FormGroup label='Default vertical nav state' fieldId='ui-form-vertical-nav-switch'>\r\n      <Switch\r\n        label='Show vertical navigation'\r\n        labelOff='Hide vertical navigation'\r\n        isChecked={showVerticalNav}\r\n        onChange={handleShowVerticalNavChange}\r\n      />\r\n    </FormGroup>\r\n  )\r\n}\r\n\r\nconst ResetForm: React.FunctionComponent = () => {\r\n  const navigate = useNavigate()\r\n  const [isConfirmResetOpen, setIsConfirmResetOpen] = useState(false)\r\n\r\n  const reset = () => {\r\n    preferencesService.reset()\r\n    // Reload page after reset\r\n    navigate(0)\r\n  }\r\n\r\n  const confirmReset = () => {\r\n    setIsConfirmResetOpen(!isConfirmResetOpen)\r\n  }\r\n\r\n  const ConfirmResetModal = () => (\r\n    <Modal\r\n      variant={ModalVariant.small}\r\n      title='Reset settings'\r\n      titleIconVariant='danger'\r\n      isOpen={isConfirmResetOpen}\r\n      onClose={confirmReset}\r\n      actions={[\r\n        <Button key='reset' variant='danger' onClick={reset}>\r\n          Reset\r\n        </Button>,\r\n        <Button key='cancel' variant='link' onClick={confirmReset}>\r\n          Cancel\r\n        </Button>,\r\n      ]}\r\n    >\r\n      You are about to reset all the Hawtio settings.\r\n    </Modal>\r\n  )\r\n\r\n  const resetSuccess = preferencesService.isResetSuccess()\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <FormGroup\r\n        label='Reset settings'\r\n        fieldId='reset-form-reset'\r\n        helperText=\"Clear all custom settings stored in your browser's local storage and reset to defaults.\"\r\n      >\r\n        <Button variant='danger' onClick={confirmReset}>\r\n          Reset\r\n        </Button>\r\n        <ConfirmResetModal />\r\n      </FormGroup>\r\n      {resetSuccess && <Alert variant='success' isInline title='Settings reset successfully!' />}\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import { Logger } from '@hawtiosrc/core/logging'\r\n\r\nexport const log = Logger.get('hawtio-preferences')\r\n","import { log } from './globals'\r\n\r\nconst STORAGE_KEY_SHOW_VERTICAL_NAV_BY_DEFAULT = 'preferences.showVerticalNavByDefault'\r\n\r\nconst SESSION_KEY_RESET_SUCCESS = 'preferences.resetSuccess'\r\n\r\n// Storage keys are hardcoded to avoid circular dependencies between preferences and plugins\r\n// TODO: Is there a better way to manage storage keys to preserve?\r\nconst STORAGE_KEYS_TO_PRESERVE = [\r\n  'connect.connections',\r\n  //'osAuthCreds',\r\n] as const\r\n\r\ninterface IPreferencesService {\r\n  isShowVerticalNavByDefault(): boolean\r\n  saveShowVerticalNavByDefault(value: boolean): void\r\n  reset(): void\r\n  isResetSuccess(): boolean\r\n}\r\n\r\nclass PreferencesService implements IPreferencesService {\r\n  isShowVerticalNavByDefault(): boolean {\r\n    const value = localStorage.getItem(STORAGE_KEY_SHOW_VERTICAL_NAV_BY_DEFAULT)\r\n    return value ? JSON.parse(value) : true\r\n  }\r\n\r\n  saveShowVerticalNavByDefault(value: boolean): void {\r\n    localStorage.setItem(STORAGE_KEY_SHOW_VERTICAL_NAV_BY_DEFAULT, JSON.stringify(value))\r\n  }\r\n\r\n  reset() {\r\n    log.info('Reset preferences')\r\n\r\n    // Backup the storage K/V pairs that are not actual preferences.\r\n    // Ideally, the preferences would be better organised under structured keys\r\n    // that would be provided to the preferences registry, so that a local storage\r\n    // complete clear operation and restore of hard-coded K/V pairs could be avoided.\r\n    const backup = STORAGE_KEYS_TO_PRESERVE.reduce(\r\n      (acc, key) => {\r\n        const value = localStorage.getItem(key)\r\n        if (value) {\r\n          acc[key] = value\r\n        }\r\n        return acc\r\n      },\r\n      {} as Record<string, string>,\r\n    )\r\n\r\n    localStorage.clear()\r\n\r\n    // Restore backup\r\n    Object.entries(backup).forEach(([key, value]) => localStorage.setItem(key, value))\r\n\r\n    sessionStorage.setItem(SESSION_KEY_RESET_SUCCESS, 'true')\r\n  }\r\n\r\n  isResetSuccess(): boolean {\r\n    const value = sessionStorage.getItem(SESSION_KEY_RESET_SUCCESS)\r\n\r\n    // This alert is one-time only, so clean up after read every time.\r\n    // Not cleaning up immediately because React renders twice in development env,\r\n    // so otherwise the alert is always wiped out before real rendering.\r\n    setTimeout(() => sessionStorage.removeItem(SESSION_KEY_RESET_SUCCESS), 1000)\r\n\r\n    return value ? JSON.parse(value) : false\r\n  }\r\n}\r\n\r\nexport const preferencesService = new PreferencesService()\r\n","import { ChildLogger, Logger } from '@hawtiosrc/core'\r\nimport {\r\n  Button,\r\n  CardBody,\r\n  DataList,\r\n  DataListAction,\r\n  DataListCell,\r\n  DataListItem,\r\n  DataListItemCells,\r\n  DataListItemRow,\r\n  Dropdown,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n  Form,\r\n  FormGroup,\r\n  FormSection,\r\n  Slider,\r\n  Toolbar,\r\n  ToolbarContent,\r\n  ToolbarItem,\r\n} from '@patternfly/react-core'\r\nimport { PlusIcon, TrashIcon } from '@patternfly/react-icons'\r\nimport React, { useContext, useState } from 'react'\r\nimport { LogsContext, useChildLoggers } from './context'\r\n\r\nexport const LogsPreferences: React.FunctionComponent = () => {\r\n  const { childLoggers, availableChildLoggers, reloadChildLoggers } = useChildLoggers()\r\n\r\n  const ChildLoggerList = () => (\r\n    <DataList id='logs-child-logger-list' aria-label='logs child logger list' isCompact>\r\n      {childLoggers.map(childLogger => (\r\n        <ChildLoggerItem key={childLogger.name} logger={childLogger} />\r\n      ))}\r\n    </DataList>\r\n  )\r\n\r\n  return (\r\n    <LogsContext.Provider value={{ childLoggers, availableChildLoggers, reloadChildLoggers }}>\r\n      <CardBody>\r\n        <Form isHorizontal>\r\n          <FormSection title='Global log settings' titleElement='h2'>\r\n            <GlobalForms />\r\n          </FormSection>\r\n          <FormSection title='Child loggers' titleElement='h2'>\r\n            <ChildLoggerToolbar />\r\n            <ChildLoggerList />\r\n          </FormSection>\r\n        </Form>\r\n      </CardBody>\r\n    </LogsContext.Provider>\r\n  )\r\n}\r\n\r\nconst LOG_LEVEL_OPTIONS = ['OFF', 'ERROR', 'WARN', 'INFO', 'DEBUG'] as const\r\n\r\nconst GlobalForms: React.FunctionComponent = () => {\r\n  const [logLevel, setLogLevel] = useState(Logger.getLevel().name)\r\n\r\n  const handleLogLevelChange = (level?: string) => {\r\n    if (!level) {\r\n      return\r\n    }\r\n    setLogLevel(level)\r\n    Logger.setLevel(level)\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <FormGroup label='Log level' fieldId='logs-global-form-log-level'>\r\n        <Slider\r\n          id='logs-global-form-log-level-slider'\r\n          value={LOG_LEVEL_OPTIONS.findIndex(level => level === logLevel)}\r\n          max={LOG_LEVEL_OPTIONS.length - 1}\r\n          customSteps={LOG_LEVEL_OPTIONS.map((level, index) => ({ value: index, label: level }))}\r\n          onChange={(value: number) => handleLogLevelChange(LOG_LEVEL_OPTIONS[value])}\r\n        />\r\n      </FormGroup>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nconst ChildLoggerToolbar: React.FunctionComponent = () => {\r\n  const { availableChildLoggers, reloadChildLoggers } = useContext(LogsContext)\r\n  const [isAddOpen, setIsAddOpen] = useState(false)\r\n\r\n  const handleAddToggle = () => {\r\n    setIsAddOpen(!isAddOpen)\r\n  }\r\n\r\n  const addChildLogger = (logger: ChildLogger) => () => {\r\n    Logger.addChildLogger(logger)\r\n    reloadChildLoggers()\r\n  }\r\n\r\n  const availableChildLoggerItems = availableChildLoggers.map(logger => (\r\n    <DropdownItem key={logger.name} onClick={addChildLogger(logger)}>\r\n      {logger.name}\r\n    </DropdownItem>\r\n  ))\r\n\r\n  return (\r\n    <Toolbar id='connect-toolbar'>\r\n      <ToolbarContent>\r\n        <ToolbarItem>\r\n          <Dropdown\r\n            onSelect={handleAddToggle}\r\n            toggle={\r\n              <DropdownToggle\r\n                id='logs-child-logger-toolbar-dropdown-toggle'\r\n                toggleVariant='secondary'\r\n                onToggle={handleAddToggle}\r\n              >\r\n                <PlusIcon /> Add\r\n              </DropdownToggle>\r\n            }\r\n            isOpen={isAddOpen}\r\n            dropdownItems={availableChildLoggerItems}\r\n          />\r\n        </ToolbarItem>\r\n      </ToolbarContent>\r\n    </Toolbar>\r\n  )\r\n}\r\n\r\ntype ChildLoggerItemProps = {\r\n  logger: ChildLogger\r\n}\r\n\r\nconst ChildLoggerItem: React.FunctionComponent<ChildLoggerItemProps> = props => {\r\n  const { logger } = props\r\n  const { reloadChildLoggers } = useContext(LogsContext)\r\n\r\n  const name = logger.name\r\n\r\n  const onLogLevelChange = (level?: string) => {\r\n    if (!level) {\r\n      return\r\n    }\r\n    Logger.updateChildLogger(logger.name, level)\r\n    reloadChildLoggers()\r\n  }\r\n\r\n  const deleteChildLogger = () => {\r\n    Logger.removeChildLogger(logger)\r\n    reloadChildLoggers()\r\n  }\r\n\r\n  return (\r\n    <DataListItem key={`logs-child-logger-${name}`} aria-labelledby={`logs child logger ${name}`}>\r\n      <DataListItemRow>\r\n        <DataListItemCells\r\n          dataListCells={[\r\n            <DataListCell key={`logs-child-logger-name-${name}`} width={1}>\r\n              <b>{name}</b>\r\n            </DataListCell>,\r\n            <DataListCell key={`logs-child-logger-log-level-${name}`} width={2}>\r\n              <Slider\r\n                id={`logs-child-logger-actions-log-level-slider-${name}`}\r\n                value={LOG_LEVEL_OPTIONS.findIndex(level => level === logger.filterLevel.name)}\r\n                max={LOG_LEVEL_OPTIONS.length - 1}\r\n                customSteps={LOG_LEVEL_OPTIONS.map((level, index) => ({ value: index, label: level }))}\r\n                onChange={(value: number) => onLogLevelChange(LOG_LEVEL_OPTIONS[value])}\r\n              />\r\n            </DataListCell>,\r\n          ]}\r\n        />\r\n        <DataListAction\r\n          id={`logs-child-logger-actions-${name}`}\r\n          aria-label={`logs child logger actions ${name}`}\r\n          aria-labelledby={`${name} logs-child-logger-actions-${name}`}\r\n        >\r\n          <Button variant='secondary' onClick={deleteChildLogger}>\r\n            <TrashIcon />\r\n          </Button>\r\n        </DataListAction>\r\n      </DataListItemRow>\r\n    </DataListItem>\r\n  )\r\n}\r\n","import { ChildLogger, Logger } from '@hawtiosrc/core'\r\nimport { createContext, useState } from 'react'\r\n\r\n/**\r\n * Custom React hook for child loggers.\r\n */\r\nexport function useChildLoggers() {\r\n  const [childLoggers, setChildLoggers] = useState(Logger.getChildLoggers())\r\n  const [availableChildLoggers, setAvailableChildLoggers] = useState(Logger.getAvailableChildLoggers())\r\n\r\n  const reloadChildLoggers = () => {\r\n    setChildLoggers(Logger.getChildLoggers())\r\n    setAvailableChildLoggers(Logger.getAvailableChildLoggers())\r\n  }\r\n\r\n  return { childLoggers, setChildLoggers, availableChildLoggers, setAvailableChildLoggers, reloadChildLoggers }\r\n}\r\n\r\ntype LogsContext = {\r\n  childLoggers: ChildLogger[]\r\n  availableChildLoggers: ChildLogger[]\r\n  reloadChildLoggers: () => void\r\n}\r\n\r\nexport const LogsContext = createContext<LogsContext>({\r\n  childLoggers: [],\r\n  availableChildLoggers: [],\r\n  reloadChildLoggers: () => {\r\n    /* no-op */\r\n  },\r\n})\r\n","import { useUser } from '@hawtiosrc/auth/hooks'\r\nimport { usePlugins } from '@hawtiosrc/core'\r\nimport { HawtioHelp } from '@hawtiosrc/help/HawtioHelp'\r\nimport { backgroundImages } from '@hawtiosrc/img'\r\nimport { PluginNodeSelectionContext, usePluginNodeSelected } from '@hawtiosrc/plugins'\r\nimport { HawtioPreferences } from '@hawtiosrc/preferences/HawtioPreferences'\r\nimport { preferencesService } from '@hawtiosrc/preferences/preferences-service'\r\nimport { BackgroundImage, EmptyState, EmptyStateIcon, Page, PageSection, Title } from '@patternfly/react-core'\r\nimport { CubesIcon } from '@patternfly/react-icons'\r\nimport React, { useEffect } from 'react'\r\nimport { Navigate, Route, Routes, useLocation, useNavigate } from 'react-router-dom'\r\nimport { HawtioNotification } from '../notification'\r\nimport { HawtioHeader } from './HawtioHeader'\r\nimport { HawtioLoadingPage } from './HawtioLoadingPage'\r\nimport { HawtioSidebar } from './HawtioSidebar'\r\nimport { PageContext } from './context'\r\nimport { log } from './globals'\r\nimport { sessionService, SessionMonitor } from '@hawtiosrc/ui/session'\r\nimport './HawtioPage.css'\r\n\r\nexport const HawtioPage: React.FunctionComponent = () => {\r\n  const { username, isLogin, userLoaded, userLoading } = useUser()\r\n  const { plugins, pluginsLoaded } = usePlugins()\r\n  const navigate = useNavigate()\r\n  const { search } = useLocation()\r\n  const { selectedNode, setSelectedNode } = usePluginNodeSelected()\r\n\r\n  // navigate should be used in effect\r\n  // otherwise \"Cannot update a component (`BrowserRouter`) while rendering a different component\" is thrown\r\n  useEffect(() => {\r\n    if (!isLogin && !userLoading) {\r\n      navigate('login')\r\n    }\r\n  }, [isLogin, navigate, userLoading])\r\n\r\n  if (!userLoaded || !pluginsLoaded || userLoading) {\r\n    log.debug('Loading:', 'user =', userLoaded, ', plugins =', pluginsLoaded)\r\n    return <HawtioLoadingPage />\r\n  }\r\n\r\n  log.debug(`Login state: username = ${username}, isLogin = ${isLogin}`)\r\n\r\n  const defaultPlugin = plugins[0] ?? null\r\n  const defaultPage = defaultPlugin ? <Navigate to={{ pathname: defaultPlugin.path, search }} /> : <HawtioHome />\r\n\r\n  const showVerticalNavByDefault = preferencesService.isShowVerticalNavByDefault()\r\n\r\n  const keepAlive = (): void => {\r\n    sessionService.userActivity()\r\n  }\r\n\r\n  return (\r\n    <PageContext.Provider value={{ username, plugins }}>\r\n      <BackgroundImage src={backgroundImages} />\r\n      <Page\r\n        id='hawtio-main-page'\r\n        header={<HawtioHeader />}\r\n        sidebar={<HawtioSidebar />}\r\n        isManagedSidebar\r\n        defaultManagedSidebarIsOpen={showVerticalNavByDefault}\r\n        onClick={keepAlive}\r\n      >\r\n        {/* Provider for handling selected node shared between the plugins */}\r\n        <PluginNodeSelectionContext.Provider value={{ selectedNode, setSelectedNode }}>\r\n          <Routes>\r\n            {/* plugins */}\r\n            {plugins\r\n              .filter(plugin => plugin.path != null && plugin.component != null)\r\n              .map(plugin => (\r\n                <Route key={plugin.id} path={`${plugin.path}/*`} element={React.createElement(plugin.component!)} />\r\n              ))}\r\n            <Route key='help' path='help/*' element={<HawtioHelp />} />\r\n            <Route key='preferences' path='preferences/*' element={<HawtioPreferences />} />\r\n\r\n            <Route key='index' path='index.html' element={<Navigate to='/' />} />\r\n            <Route key='root' index element={defaultPage} />\r\n          </Routes>\r\n        </PluginNodeSelectionContext.Provider>\r\n        <HawtioNotification />\r\n        <SessionMonitor />\r\n      </Page>\r\n    </PageContext.Provider>\r\n  )\r\n}\r\n\r\nconst HawtioHome: React.FunctionComponent = () => (\r\n  <PageSection variant='light'>\r\n    <EmptyState variant='full'>\r\n      <EmptyStateIcon icon={CubesIcon} />\r\n      <Title headingLevel='h1' size='lg'>\r\n        Hawtio\r\n      </Title>\r\n    </EmptyState>\r\n  </PageSection>\r\n)\r\n","import imgLogo from '@hawtiosrc/img/hawtio-logo.svg'\r\nimport { stringSorter } from '@hawtiosrc/util/strings'\r\nimport { AboutModal, Text, TextContent, TextList, TextListItem } from '@patternfly/react-core'\r\nimport React from 'react'\r\nimport { useAbout } from './context'\r\nimport { log } from './globals'\r\nimport './HawtioAbout.css'\r\n\r\ntype HawtioAboutProps = {\r\n  isOpen: boolean\r\n  onClose: () => void\r\n}\r\n\r\nexport const HawtioAbout: React.FunctionComponent<HawtioAboutProps> = props => {\r\n  const { about, aboutLoaded } = useAbout()\r\n\r\n  if (!aboutLoaded) {\r\n    return null\r\n  }\r\n\r\n  const imgSrc = about.imgSrc || imgLogo\r\n  const title = about.title || 'Hawtio Management Console'\r\n  const copyright = about.copyright || '© Hawtio project'\r\n\r\n  const AboutDescription = () => {\r\n    if (about.description) {\r\n      return (\r\n        <TextContent id='hawtio-about-description'>\r\n          <Text component='p'>{about.description}</Text>\r\n        </TextContent>\r\n      )\r\n    }\r\n    return null\r\n  }\r\n\r\n  const productInfo = about.productInfo || []\r\n  productInfo.sort((a, b) => stringSorter(a.name, b.name))\r\n  log.debug('Product info:', productInfo)\r\n\r\n  const AboutProductInfo = () => (\r\n    <TextContent id='hawtio-about-product-info'>\r\n      <Text component='h3'>Component versions</Text>\r\n      <TextList component='dl'>\r\n        {productInfo.map((info, index) => (\r\n          <React.Fragment key={`product-info-${index}`}>\r\n            <TextListItem component='dt'>{info.name}</TextListItem>\r\n            <TextListItem component='dd'>{info.value}</TextListItem>\r\n          </React.Fragment>\r\n        ))}\r\n      </TextList>\r\n    </TextContent>\r\n  )\r\n\r\n  return (\r\n    <AboutModal\r\n      isOpen={props.isOpen}\r\n      onClose={props.onClose}\r\n      productName={title}\r\n      brandImageSrc={imgSrc}\r\n      brandImageAlt={title}\r\n      trademark={copyright}\r\n    >\r\n      <AboutDescription />\r\n      <AboutProductInfo />\r\n    </AboutModal>\r\n  )\r\n}\r\n","import { AboutConfig, configManager } from '@hawtiosrc/core'\r\nimport { useEffect, useState } from 'react'\r\n\r\n/**\r\n * Custom React hook for using Hawtio About.\r\n */\r\nexport function useAbout() {\r\n  const [about, setAbout] = useState<AboutConfig>({})\r\n  const [aboutLoaded, setAboutLoaded] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const loadAbout = async () => {\r\n      const config = await configManager.getHawtconfig()\r\n      if (config.about) {\r\n        setAbout(config.about)\r\n      }\r\n      setAboutLoaded(true)\r\n    }\r\n    loadAbout()\r\n  }, [])\r\n\r\n  return { about, aboutLoaded }\r\n}\r\n","import { Logger } from '@hawtiosrc/core/logging'\r\n\r\nexport const log = Logger.get('hawtio-ui-about')\r\n","import { PUBLIC_USER, userService } from '@hawtiosrc/auth'\r\nimport { DEFAULT_APP_NAME, useHawtconfig, UniversalHeaderItem, isUniversalHeaderItem } from '@hawtiosrc/core'\r\nimport { hawtioLogo, userAvatar } from '@hawtiosrc/img'\r\nimport { preferencesService } from '@hawtiosrc/preferences/preferences-service'\r\nimport { HawtioAbout } from '@hawtiosrc/ui/about'\r\nimport {\r\n  Avatar,\r\n  Brand,\r\n  Dropdown,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n  Masthead,\r\n  MastheadBrand,\r\n  MastheadContent,\r\n  MastheadMain,\r\n  MastheadToggle,\r\n  PageToggleButton,\r\n  Title,\r\n  Toolbar,\r\n  ToolbarContent,\r\n  ToolbarGroup,\r\n  ToolbarItem,\r\n} from '@patternfly/react-core'\r\nimport { BarsIcon, HelpIcon } from '@patternfly/react-icons'\r\nimport React, { useContext, useState } from 'react'\r\nimport { Link, useLocation } from 'react-router-dom'\r\nimport './HawtioHeader.css'\r\nimport { PageContext } from './context'\r\n\r\nexport const HawtioHeader: React.FunctionComponent = () => {\r\n  const [navOpen, setNavOpen] = useState(preferencesService.isShowVerticalNavByDefault())\r\n\r\n  const onNavToggle = () => setNavOpen(!navOpen)\r\n\r\n  return (\r\n    <Masthead id='hawtio-header' display={{ default: 'inline' }}>\r\n      <MastheadToggle>\r\n        <PageToggleButton\r\n          variant='plain'\r\n          aria-label='Global navigation'\r\n          isNavOpen={navOpen}\r\n          onNavToggle={onNavToggle}\r\n          id='vertical-nav-toggle'\r\n        >\r\n          <BarsIcon />\r\n        </PageToggleButton>\r\n      </MastheadToggle>\r\n      <MastheadMain>\r\n        <HawtioBrand />\r\n      </MastheadMain>\r\n      <MastheadContent>\r\n        <HawtioHeaderToolbar />\r\n      </MastheadContent>\r\n    </Masthead>\r\n  )\r\n}\r\n\r\nconst HawtioBrand: React.FunctionComponent = () => {\r\n  const { hawtconfig, hawtconfigLoaded } = useHawtconfig()\r\n\r\n  if (!hawtconfigLoaded) {\r\n    return null\r\n  }\r\n\r\n  const appLogo = hawtconfig.branding?.appLogoUrl ?? hawtioLogo\r\n  const appName = hawtconfig.branding?.appName ?? DEFAULT_APP_NAME\r\n  const showAppName = hawtconfig.branding?.showAppName ?? false\r\n\r\n  return (\r\n    <MastheadBrand id='hawtio-header-brand' component={props => <Link to='/' {...props} />}>\r\n      <Brand src={appLogo} alt={appName} />\r\n      {showAppName && (\r\n        <Title headingLevel='h1' size='xl'>\r\n          {appName}\r\n        </Title>\r\n      )}\r\n    </MastheadBrand>\r\n  )\r\n}\r\n\r\nconst HawtioHeaderToolbar: React.FunctionComponent = () => {\r\n  const { username, plugins } = useContext(PageContext)\r\n  const location = useLocation()\r\n\r\n  const isPublic = username === PUBLIC_USER\r\n\r\n  const [helpOpen, setHelpOpen] = useState(false)\r\n  const [userOpen, setUserOpen] = useState(false)\r\n  const [aboutOpen, setAboutOpen] = useState(false)\r\n\r\n  const onHelpSelect = () => setHelpOpen(!helpOpen)\r\n  const onUserSelect = () => setUserOpen(!userOpen)\r\n  const onAboutToggle = () => setAboutOpen(!aboutOpen)\r\n\r\n  const logout = () => userService.logout()\r\n\r\n  const helpItems = [\r\n    <DropdownItem key='help' component={<Link to='/help'>Help</Link>} />,\r\n    <DropdownItem key='about' onClick={onAboutToggle}>\r\n      About\r\n    </DropdownItem>,\r\n  ]\r\n\r\n  const userItems = [\r\n    <DropdownItem key='preferences' component={<Link to='/preferences'>Preferences</Link>} />,\r\n    <DropdownItem key='logout' onClick={logout}>\r\n      Log out\r\n    </DropdownItem>,\r\n  ]\r\n  if (isPublic) {\r\n    // Delete logout\r\n    userItems.pop()\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  const collectHeaderItems = (): React.ComponentType<any>[] => {\r\n    const path = location.pathname\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    const components: React.ComponentType<any>[] = []\r\n\r\n    // Iterate through the plugins ...\r\n    plugins.forEach(plugin => {\r\n      if (!plugin.headerItems || plugin.headerItems.length === 0) return // no header items in plugin\r\n\r\n      // if plugin is currently visible in UI\r\n      if (plugin.path && path.startsWith(plugin.path)) {\r\n        components.push(\r\n          ...plugin.headerItems.map(headerItem =>\r\n            isUniversalHeaderItem(headerItem) ? headerItem.component : headerItem,\r\n          ),\r\n        )\r\n        return\r\n      }\r\n\r\n      components.push(\r\n        ...plugin.headerItems\r\n          .filter(\r\n            headerItem => isUniversalHeaderItem(headerItem) && (headerItem as UniversalHeaderItem).universal === true,\r\n          )\r\n          .map(headerItem => (headerItem as UniversalHeaderItem).component),\r\n      )\r\n    })\r\n\r\n    return components\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  const headerComponents: React.ComponentType<any>[] = collectHeaderItems()\r\n\r\n  return (\r\n    <Toolbar id='hawtio-header-toolbar'>\r\n      <ToolbarContent>\r\n        <ToolbarGroup>\r\n          {headerComponents.map((component, index) => (\r\n            <ToolbarItem key={`hawtio-header-toolbar-plugin-item-${index}`}>\r\n              {React.createElement(component)}\r\n            </ToolbarItem>\r\n          ))}\r\n        </ToolbarGroup>\r\n        <ToolbarGroup>\r\n          <ToolbarItem>\r\n            <Dropdown\r\n              isPlain\r\n              position='right'\r\n              onSelect={onHelpSelect}\r\n              toggle={\r\n                <DropdownToggle toggleIndicator={null} onToggle={setHelpOpen}>\r\n                  <HelpIcon />\r\n                </DropdownToggle>\r\n              }\r\n              isOpen={helpOpen}\r\n              dropdownItems={helpItems}\r\n            />\r\n          </ToolbarItem>\r\n        </ToolbarGroup>\r\n        <ToolbarGroup>\r\n          <ToolbarItem>\r\n            <Dropdown\r\n              isPlain\r\n              position='right'\r\n              onSelect={onUserSelect}\r\n              isOpen={userOpen}\r\n              toggle={\r\n                <DropdownToggle\r\n                  id='hawtio-header-user-dropdown-toggle'\r\n                  onToggle={setUserOpen}\r\n                  icon={<Avatar src={userAvatar} alt='user' />}\r\n                >\r\n                  {isPublic ? '' : username}\r\n                </DropdownToggle>\r\n              }\r\n              dropdownItems={userItems}\r\n            />\r\n          </ToolbarItem>\r\n        </ToolbarGroup>\r\n      </ToolbarContent>\r\n      <HawtioAbout isOpen={aboutOpen} onClose={onAboutToggle} />\r\n    </Toolbar>\r\n  )\r\n}\r\n","import { Plugin } from '@hawtiosrc/core'\r\nimport { createContext } from 'react'\r\n\r\nexport type PageContext = {\r\n  username: string\r\n  plugins: Plugin[]\r\n}\r\n\r\nexport const PageContext = createContext<PageContext>({\r\n  username: '',\r\n  plugins: [],\r\n})\r\n","import { Nav, NavItem, NavList, PageSidebar } from '@patternfly/react-core'\r\nimport React, { useContext } from 'react'\r\nimport { NavLink, useLocation } from 'react-router-dom'\r\nimport { PageContext } from './context'\r\n\r\nexport const HawtioSidebar: React.FunctionComponent = () => {\r\n  const { plugins } = useContext(PageContext)\r\n  const { pathname } = useLocation()\r\n\r\n  const pathMatch = (path: string, pluginPath: string) => {\r\n    if (!pluginPath.startsWith('/')) {\r\n      pluginPath = '/' + pluginPath\r\n    }\r\n    return path.startsWith(pluginPath)\r\n  }\r\n\r\n  const pageNav = (\r\n    <Nav theme='dark'>\r\n      <NavList>\r\n        {plugins\r\n          .filter(plugin => plugin.path != null)\r\n          .map(plugin => (\r\n            <NavItem key={plugin.id} isActive={pathMatch(pathname, plugin.path!)}>\r\n              <NavLink to={plugin.path!}>{plugin.title}</NavLink>\r\n            </NavItem>\r\n          ))}\r\n      </NavList>\r\n    </Nav>\r\n  )\r\n\r\n  return <PageSidebar nav={pageNav} theme='dark' />\r\n}\r\n","import { Logger } from '@hawtiosrc/core/logging'\r\n\r\nexport const log = Logger.get('hawtio-ui-page')\r\n","import { Logger } from '@hawtiosrc/core/logging'\r\n\r\nexport const log = Logger.get('hawtio-ui-session')\r\n","import { fetchPath } from '@hawtiosrc/util/fetch'\r\nimport { log } from './globals'\r\n\r\ntype SessionConfig = {\r\n  req?: number\r\n  res?: number\r\n  now?: number\r\n  timeout: number\r\n}\r\n\r\nclass SessionService {\r\n  private lastActivity = 0\r\n  private lastRefresh = 0\r\n  // flag set to true by all user interaction. If set, a periodic \"refresh\" request is sent and the flag is cleared\r\n  // if the flag is not set again with another user interaction, the refreshes stop and session may expire at server side\r\n  private keepAlive = true\r\n  // when this flag is set, SessionMonitor component should be informed. it'll reset its state then\r\n  private resetTimer = false\r\n  // a flag which may be used to disable \"userActivity()\" handler\r\n  private refresh = true\r\n\r\n  private sessionConfig: SessionConfig | null = null\r\n  private sessionTimeout = -1\r\n\r\n  /**\r\n   * Calling this method means that user performed some action and is expecting to keep the (server-side) session\r\n   * alive.\r\n   * We can use this method in various places depending on needs.\r\n   * Initially I used it in useEffect(..., [location]), where \"location\" was from useLocation hook (react-router).\r\n   * But this didn't work when clicking on JMX tree nodes.\r\n   */\r\n  userActivity() {\r\n    if (!this.refresh) {\r\n      return\r\n    }\r\n\r\n    this.keepAlive = true\r\n\r\n    const now = Date.now()\r\n    if (now - this.lastRefresh > 5000) {\r\n      // last ping was sent more than 5 seconds ago - better not wait any longer\r\n      // we've refreshed the session earlier than scheduled refresh interval. To prevent session expiration in\r\n      // case a click happens just before the end date, we'll refresh now\r\n      this.updateSession()\r\n      // indicate that the session was updated outside of normal 5-seconds cycle\r\n      this.resetTimer = true\r\n    }\r\n    this.lastActivity = Date.now()\r\n  }\r\n\r\n  /**\r\n   * This method should be called when there's a need to ping server, so the (server-side) session is kept alive.\r\n   * Normally this should not be called on each call to userActivity().\r\n   */\r\n  updateSession(): boolean {\r\n    // SessionMonitor calls this method every 5 seconds, but if there was no user interaction, we don't do anything\r\n    if (!this.keepAlive || this.sessionTimeout <= 0) {\r\n      return false\r\n    }\r\n    // no need to ping server otherwise\r\n    fetchPath('refresh', {\r\n      success: () => true,\r\n      error: () => false,\r\n    }).catch(_ => false)\r\n\r\n    // clear the flag, so next refresh happens only after user clicks anything\r\n    this.keepAlive = false\r\n    this.lastRefresh = Date.now()\r\n\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * Indicates whether given \"time before session end\" means that the session is expiring (to display alert)\r\n   * @param time\r\n   */\r\n  sessionEnding(time: number): boolean {\r\n    return time >= 0 && time < 21\r\n  }\r\n\r\n  /**\r\n   * Indicates whether the session is ended and user should be logged-out\r\n   * @param time\r\n   */\r\n  sessionEnded(time: number): boolean {\r\n    return time <= 0 && this.sessionTimeout > 0\r\n  }\r\n\r\n  /**\r\n   * Returns session timeout in seconds. If \"-1\", there's no session and session tracking is enabled.\r\n   */\r\n  getSessionTimeout(): number {\r\n    return this.sessionTimeout\r\n  }\r\n\r\n  shouldResetTimer(): boolean {\r\n    return this.resetTimer\r\n  }\r\n\r\n  clearResetTimerFlag() {\r\n    this.resetTimer = false\r\n  }\r\n\r\n  async fetchConfiguration(): Promise<void> {\r\n    this.sessionTimeout = -1\r\n    this.sessionConfig = await fetchPath<SessionConfig>('auth/config/session-timeout?t=' + Date.now(), {\r\n      success: data => {\r\n        const cfg = JSON.parse(data) as SessionConfig\r\n        if (!cfg.timeout || cfg.timeout <= 0) {\r\n          cfg.timeout = -1\r\n        }\r\n        cfg.res = Date.now()\r\n        log.info('Session configuration', cfg)\r\n        return cfg\r\n      },\r\n      error: () => {\r\n        return { timeout: -1 }\r\n      },\r\n    })\r\n    if (this.sessionConfig.timeout > 0) {\r\n      // session expires at \"current server time + session timeout\". Subtracting current client time we roughly\r\n      // get session end time from client point of view\r\n      this.sessionTimeout = Math.floor(\r\n        (this.sessionConfig.timeout * 1000 + this.sessionConfig.now! - this.sessionConfig.req!) / 1000,\r\n      )\r\n      // If server-side session is set to last less than 30 seconds, we skip the logic at client side\r\n      if (this.sessionTimeout <= 30) {\r\n        this.sessionTimeout = -1\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Can be used to enable/disable on-click refreshes. Should be disabled when we display a Modal with explicit\r\n   * \"keep session\" button\r\n   */\r\n  setRefresh(refresh: boolean) {\r\n    this.refresh = refresh\r\n  }\r\n}\r\n\r\nexport const sessionService = new SessionService()\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Button, Modal, ModalVariant } from '@patternfly/react-core'\r\nimport { userService } from '@hawtiosrc/auth'\r\nimport { sessionService } from './session-service'\r\n\r\nexport const SessionMonitor: React.FunctionComponent = () => {\r\n  // state for alert dialog\r\n  const [sessionAlertVisible, setSessionAlertVisible] = useState(false)\r\n  // state for time till (server-side) session end. When -1, we don't track session\r\n  const [time, setTime] = useState(-1)\r\n\r\n  // configuration effect (no deps)\r\n  useEffect(() => {\r\n    // 1. get session config and if there's session activity timeout, start a ticker which updates \"time\" state\r\n    let ticker: NodeJS.Timeout | null = null\r\n    // run immediate timeout, so we can use await\r\n    const configureSession = setTimeout(async () => {\r\n      await sessionService.fetchConfiguration()\r\n      const sessionTimeout = sessionService.getSessionTimeout()\r\n      if (sessionTimeout > 0) {\r\n        setTime(sessionTimeout)\r\n        // a ticker that'll decrease time-left and store it in this component's state\r\n        ticker = setInterval(() => {\r\n          if (sessionService.shouldResetTimer()) {\r\n            // user activity caused an extra refresh, so we can restart counting\r\n            setTime(sessionService.getSessionTimeout())\r\n            sessionService.clearResetTimerFlag()\r\n          } else {\r\n            setTime(v => {\r\n              return v > 0 ? v - 1 : v\r\n            })\r\n          }\r\n        }, 1000)\r\n      }\r\n    }, 0)\r\n    // 2. setup a refresh which runs every 5 seconds. If there was recent user activity, server ping will be sent\r\n    const periodicalRefresh = setInterval(async () => {\r\n      if (sessionService.updateSession()) {\r\n        setTime(sessionService.getSessionTimeout())\r\n      }\r\n    }, 5000)\r\n\r\n    return () => {\r\n      clearTimeout(configureSession)\r\n      if (ticker != null) {\r\n        clearInterval(ticker)\r\n      }\r\n      clearInterval(periodicalRefresh)\r\n    }\r\n  }, [])\r\n\r\n  // effect to:\r\n  //  - show dialog when time comes\r\n  //  - logout the user when session ends\r\n  //  - reset the timer, when session was just refreshed by some user activity\r\n  useEffect(() => {\r\n    if (sessionService.sessionEnding(time)) {\r\n      sessionService.setRefresh(false)\r\n      setSessionAlertVisible(true)\r\n    }\r\n    if (sessionService.sessionEnded(time)) {\r\n      setTimeout(() => {\r\n        userService.logout()\r\n      }, 1000)\r\n    }\r\n  }, [time])\r\n\r\n  // called when user closes the alert dialog. Session should be kept alive\r\n  const keepSessionAlive = () => {\r\n    setSessionAlertVisible(false)\r\n    sessionService.setRefresh(true)\r\n    sessionService.updateSession()\r\n    setTime(sessionService.getSessionTimeout())\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Modal\r\n        isOpen={sessionAlertVisible}\r\n        variant={ModalVariant.small}\r\n        title='Session expires soon'\r\n        onClose={keepSessionAlive}\r\n        actions={[\r\n          <Button key='continue' onClick={keepSessionAlive}>\r\n            Stay connected\r\n          </Button>,\r\n        ]}\r\n      >\r\n        <div>{time > 0 ? 'Session expires in ' + time + ' second' + (time == 1 ? '.' : 's.') : 'Logging out...'}</div>\r\n      </Modal>\r\n    </React.Fragment>\r\n  )\r\n}\r\n"],"mappings":"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","names":["oidc","str","jsLogger","$","log","log","_a","username","isLogin","import_jquery","log","EventEmitter","moduleName","log","log","$","_a","_b","import_react","log","import_react_router_dom","import_react_core","import_react","import_react_router_dom","import_react","import_react_core","import_jsx_runtime","import_react_core","React","IconSize","_a","import_react","log","_a","log","import_jsx_runtime","log","import_jsx_runtime","_a","_b","log","React","import_react_core","import_react","import_react_router_dom","order","import_jsx_runtime","React","Markdown","help_default","log","log","_a","cookie","import_jquery","log","log","Keycloak","keycloak","token","$","help_default","help_default","import_jquery","pluginName","log","log","_a","state","$","oidc","help_default","import_react_core","import_jsx_runtime","import_react_core","import_jsx_runtime","import_react","import_react_core","import_react","import_jsx_runtime","_a","import_react","import_react_core","import_jsx_runtime","type","import_react_core","import_react_table","import_react","pluginName","log","import_react_core","import_react","log","import_jolokia","import_jquery","import_superstruct","_a","_b","_a","_b","log","_a","_b","Jolokia","import_react","import_superstruct","log","pluginName","React","value","_a","log","path","_b","type","order","log","log","node","_a","_b","JolokiaListMethod","log","$","Jolokia","_a","_b","pluginName","log","log","mbean","log","type","import_jsx_runtime","_a","mbean","objectName","attribute","canInvoke","log","import_jsx_runtime","React","log","import_react_core","import_react_table","import_react","import_jsx_runtime","_a","_b","attributesEntries","attributesList","index","import_react_core","import_react","import_react_core","import_react","import_jsx_runtime","_a","import_react_table","import_jsx_runtime","ChartDraw","_a","data","node","React","import_react_core","import_react","import_react_core","import_react","op","log","type","log","import_jsx_runtime","React","import_jsx_runtime","log","pluginName","_a","jmx","order","import_react_core","import_react_core","import_react","import_react_router_dom","_a","pluginName","log","log","_a","headers","ok","_b","import_jsx_runtime","bean24_default","log24_default","IconNames","import_jsx_runtime","IconNames","_a","log","_a","_b","log","notifyError","_a","camel4_0","log","_b","import_react","import_react_router_dom","pluginName","_a","_b","import_react_core","import_react_table","import_react","import_react_core","import_react","_a","log","import_jsx_runtime","React","import_jsx_runtime","log","React","import_react_core","import_react_table","import_react","import_react_table","import_react","import_reactflow","import_react","dagre","node","newData","nodeId","import_jsx_runtime","edges","ReactFlow","_a","_b","import_react_core","import_react","log","notifyError","type","headers","_a","_b","import_jsx_runtime","type","import_react_core","import_react_table","import_react","import_jsx_runtime","_a","import_jsx_runtime","React","breakpoints","log","messages","result","notifyError","isDebugging","annotations","import_react_core","import_react_table","import_react","import_react_core","import_react","import_react_core","import_react","import_react","componentNames","import_jsx_runtime","import_react_core","import_react","import_react_core","import_react","import_jsx_runtime","_a","_b","React","index","import_jsx_runtime","_a","_b","isOpen","React","import_jsx_runtime","import_jsx_runtime","React","import_react_core","import_react_table","import_react","import_reactflow","import_react","import_react_core","import_jsx_runtime","React","import_jsx_runtime","messages","filters","value","_a","selected","type","React","index","message","import_react","import_react_core","import_react_table","import_jsx_runtime","_a","React","filters","value","_b","searchTerm","import_react_core","import_react","import_jsx_runtime","headers","type","React","xmlFormat","import_react","import_react_core","import_react_table","import_react","import_react_core","import_jsx_runtime","import_react_core","import_react_table","import_react","import_jsx_runtime","import_jsx_runtime","React","import_react_core","import_react_table","import_react","log","import_jsx_runtime","log","import_react_core","import_react","import_react_core","import_react","import_react_core","import_react","import_jsx_runtime","React","import_jsx_runtime","React","_a","_b","import_jsx_runtime","_a","log","React","import_react_core","import_react_table","import_react","log","import_jsx_runtime","headers","_a","log","import_react_core","import_react_table","import_react","ROUTE_OPERATIONS","RoutesService","routesService","import_jsx_runtime","routes","routesService","selected","React","import_react_code_editor","import_react","import_jsx_runtime","log","import_react_core","import_react_table","import_react","log","notifyError","import_jsx_runtime","React","log","message","isTracing","import_react_core","import_react_core","import_react","import_jsx_runtime","React","import_jsx_runtime","import_jsx_runtime","_a","_b","log","import_react_core","import_react","import_react_router_dom","import_jsx_runtime","import_jsx_runtime","Split","import_react_core","import_jsx_runtime","import_react_core","import_react","import_jsx_runtime","help_default","type","_a","IconNames","help_default","log","import_react_core","import_react","import_react_router_dom","import_react","import_react_core","import_react","pluginPath","pluginName","log","_a","_b","log","import_jsx_runtime","agents","log","jvms","filteredAgents","filteredJvms","connect","React","agent","_a","_b","import_react_core","import_react","import_jsx_runtime","import_react_core","import_react","import_react_core","import_react","import_jsx_runtime","_a","import_react_core","import_react","import_jsx_runtime","importConnections","import_jsx_runtime","log","React","connect","deleteConnection","import_jsx_runtime","_a","_b","pluginPath","React","import_react_core","import_react","import_react_router_dom","import_jsx_runtime","updateRate","maxDepth","maxCollectionSize","autoRefresh","log","help_default","log","import_react","import_jsx_runtime","username","order","pluginPath","help_default","pluginName","pluginPath","log","help_default","import_react_core","import_react_split","import_react","import_react_router_dom","pluginName","pluginPath","import_react_core","import_react","import_react_router_dom","import_jsx_runtime","_a","_b","pluginPath","React","import_react_core","import_react","import_react_router_dom","import_jsx_runtime","pluginPath","import_jsx_runtime","Split","order","pluginPath","help_default","pluginId","pluginName","pluginPath","log","help_default","import_react_core","import_react_table","import_react","DEFAULT_OPTIONS","_a","log","logs","import_jsx_runtime","React","logs","log","filteredLogs","import_react_core","import_react","import_jsx_runtime","order","pluginId","pluginPath","help_default","pluginId","pluginName","pluginPath","log","jmxDomain","help_default","import_react_core","import_react_split","import_react_core","import_react","import_react_router_dom","import_react","import_jsx_runtime","jmxDomain","log","_a","_b","type","pluginName","_a","_b","log","import_react_core","import_react_table","import_react","import_react_core","import_react_table","import_react","import_jsx_runtime","React","import_jsx_runtime","jobs","filteredJobs","emptyResult","import_react_core","import_react","import_jsx_runtime","objectName","log","import_react_core","import_react_table","import_react","import_react_core","import_react_table","import_react","import_react_core","import_react","import_jsx_runtime","log","import_react_core","import_react","import_jsx_runtime","log","React","import_jsx_runtime","_a","_b","React","import_jsx_runtime","triggers","log","filteredTriggers","emptyResult","import_jsx_runtime","_a","_b","nav","pluginPath","React","import_react_core","import_react","import_jsx_runtime","import_jsx_runtime","Split","order","pluginId","pluginPath","help_default","log","_a","op","addOperation","_b","import_react_core","import_react","import_react_router_dom","import_react_charts","import_react_core","import_react","_a","import_jsx_runtime","_a","_b","import_react_core","import_react_table","import_react","import_jsx_runtime","_a","React","_b","searchTerm","import_react_core","import_react","import_react_table","import_react_core","import_jsx_runtime","import_jsx_runtime","threadsDump","_a","React","threads","_b","searchTerm","import_jsx_runtime","React","pluginId","pluginName","pluginPath","log","help_default","order","pluginId","pluginPath","help_default","import_react_core","import_react","import_react_router_dom","import_react","import_react_core","Trace","_a","is","value","_a","_b","Trace","import_react_table","import_react_charts","import_jsx_runtime","healthData","import_react","import_react_core","import_react_table","import_jsx_runtime","import_react","import_react_core","import_react_table","import_jsx_runtime","LogLevel","React","import_react","import_react_core","import_react_table","import_jsx_runtime","_a","traces","_b","searchTerm","import_jsx_runtime","React","pluginId","pluginName","pluginPath","log","help_default","order","pluginId","pluginPath","help_default","oidc","import_react_core","import_react","import_react_router_dom","help_default","import_react_core","import_react","import_react_router_dom","log","log","import_jsx_runtime","ResetForm","React","import_react_core","import_react","import_react","import_jsx_runtime","LogsPreferences","React","import_jsx_runtime","help_default","LogsPreferences","React","import_react_core","import_react","import_react_router_dom","import_react_core","import_react","import_react","log","import_jsx_runtime","log","React","import_react_core","import_react","import_react_router_dom","import_react","import_jsx_runtime","_a","_b","React","import_react_core","import_react","import_react_router_dom","import_jsx_runtime","pluginPath","log","log","log","import_react","import_react_core","import_jsx_runtime","React","import_jsx_runtime","_a","log","React","import_jsx_runtime"]}